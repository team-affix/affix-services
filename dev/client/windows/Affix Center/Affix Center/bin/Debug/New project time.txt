using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Net.Sockets;
using System.Runtime.Serialization.Formatters.Binary;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ASOS
{
    public partial class Form1 : Form
    {
        SmtpClient emailclient;
        NetworkCredential emaillogin;
        MailMessage msg;
        Stopwatch servertime = new Stopwatch();
        private string priKey { get; set; }
        private string intermindablehash { get; set; }
        private List<object> IDKeyToDH { get; set; }
        //private string UserIDKey { get; set; }
        //private string UserDHKey { get; set; }
        private long randomi { get; set; }
        private List<string> verifiedauthenticationkeys = new List<string> { "affixcenter", "aquafaserver" };
        private List<object> verifiedconnections = new List<object> { };
        private string UserAuth { get; set; }
        public Form1()
        {
            InitializeComponent();
            priKey = "<RSAKeyValue><Modulus>xMol4n5j960eUVcFx+eiH5Gdx/2cYPf1b4XpCuR9m10NI4kOdDoTBCJ8JQ4J7EnwIhxBFqk4K0OAQe8EtQJSpynIgxoyxFxKvdVvfa1e7r72jHTRhT6B0vuudrqnQjUc1+l99hD11qHfhZyLyrwWN/SoPmVl7B5yliKKwWEJNYy408Wm4jSLmsy7FXhJtgkKXunY90K7A5jLtH/uNbZmHYEgiikLWGNyvth962oCppRZyPq+hMDLafqgNAikdmZKFpbj+mlZAiG5Tw4Blze9Z/YeCne1D/e7gk6Iw7JJ9NoM3DpXmaM8HVWVQNVmByG1cWIwBHsOHB6ObMF15LYnM1tq/KYcVHc2toZUZRHd/WcGwyq7V3RsyQSWU72LXRGvJZQ1+s0BLt4WCD8oQrZeiV+3zfHHaGik7Tolumq8Z1l5c6dMuTpmrc6F7VQ+r0kQPhNamEo8kpkqai3tqKH1WP0oPInqTz3Hsof8xH5NMkZhlbd/iFjKeNrfdqMOYEbAZ3pODCoKOL7QOpAXc05bkN6ynmlvTW5b4nQA1CIqNvvsNKclbP5YyN2sFOUWnDb5+bbGBfqNorxRbyJlVwAykG3IU3hlIgn8orQMPTVBkyryRGnf5TNwe4lZQyExSIYh+n+Cw71hUeNGsdzjuXx7RHX08Ixaix7Gi769UXH950U=</Modulus><Exponent>AQAB</Exponent><P>0PVKso/qtEmY6pB3T42VHxc0S9fYZXypYzHecfFoO5GPEnw3VQ/rYWEEP2k1FbcY0J556Yfo51qi0utI0qHUx+YVMmjoXvIKdHvY+P3V1EpUoka/ZXwQCZCFUBxLPFuTO+gk+O8JMrtM3NlDy/Y/BYUmliEhOSErPx5LpgJowIu+S14kWji0KUiQpQg3iTrQmFCFjb1vxacr0nJr+D2Sn/NVhbyXlcKWts0gNxNxpIPiM0dVa7fuENNR4vd3qCJHpWqd95dGvRXLzWTcvsXEfXn2+o/8VIFDzrTXnba68NO8sNgdPxoK5Bx8IEnSJp4rZXKkleM3EeWPMv+6kcCUZw==</P><Q>8ReOwlUzcMZZl2DMnu8i4jcTZoh4dPYWurt65XZ8TAfiHmCMnqrlFMKYxfwMWXcC47VeN08hEHwybPDxxDGZEvUdaaI2lVVf2BLGGCVTXhYw7Cn/a/qwMNp7gymYuCtu59cEhHmHZ2SOxOiOkrDi3pdUccaA7PvCjl2vAyDxyKI8j0yBgTaH0a/Mn61x2ztNS+PepqigEtuQhOVK1dyu3f3k+mytz873aX5dI20IP5aA+X71F7ZNK/sZ3egG6VshsVLNVQR7iQJDtD7tK4CDOod1+Ud3+IPHOENgGO+PRc0h4WQvxkTD3/8kUwpswwQ9g69RM1B5aULlGeEVZsy7cw==</Q><DP>l1cxNMa7bLxpPmpHn5yhxpTd0ZiRKF/zpt51h/0aSxqPjwncYYVYK31CwFKImiO0m1RMY/GFpBqnFzBF3BhNrkJcU9hbhHi1TcxtR1lBR7JWPfoToYMLcoHzrCPx8dM5fggSzyEBfnbdoo7RZaYB2xOm8NEp6OC3G83raF8SU3Ji7t9OYPH0unnOGVksL/4jGk4njJMJoxQCzzcEMBUYXzS0WlpPR65ZzigfDwTMKCVE7XLa0Vuz1wfWpRYq2eGKFqpzouEz4LsqkqZcoudF+sMdODiUvveojsu35oh0OPyCC2tbM1q/TJu84v3UcRfZwm4X+l9IgXPMFVnWXL4oPQ==</DP><DQ>Jt2aWP+tND/1j26+bdy1LeydBwl3CbvmPCIfFMC+Fu+qZyU/ZhC8r1UTlc8lGoMSBy1ky9vIw8SRyHgrMWqhd6nmHPJWhEpoEggswRW7U86WAmxezcRzBN0jzig1g3MVBPDnvIdu6Z8PWPT4jvNPD30r0s+iVxHa8mJt5T45XBOzWZKGyhLFYGtLvG4UjbgIpPROH2XNsFyO9q2UG9fgpM7aS/ibKIX/4pTJZP2dt8qGbjImRrVPyYhISjquao4TZ2emzE7Vr2ebDIKcb0ffX98YiKAZ2gk8Y3iRFFQCL8l67b/d58OMJB8Ydv6WO/YCCKmJmJEfkXWEQ2DCt3jHuw==</DQ><InverseQ>QoKxC1Ckqvvr0dar3+JJEu06FkiqjLYnHM6KcRtDkBrDAnODuQ7VTnw+ywhfl2bIfjsu1sttIp1BKiMkypAfP41uyAspSk7vK0ZI0Jl+Rf3ejK+cUo2KO1Xgnss4QeaQHqCscx4HHSIpMqSFq3kgmxKcCIycKB/BqyLBW1cS//iiSpCumqtoW0bkAbalgDEQduspnd7GTJGbtmaYyE8DGiI7sR7WdFLtbEjHtbVplwzbUusuMBs+8S9cruqp91vIY+FnR0j8spmG26TtemPdjqd4sasH4b200dVBVEqFRhVfUeUCmmvZSkO2m7rkUvYhI4Yfyb9vJr8iVfEHPkVUPg==</InverseQ><D>IIgSbzjZqc4Snvu11vAx2uolnTQNr/INvtvyRHy1TwO48lDr9MbM8fgJcc66UTd/3QOytt5OjMhh4YRz0MCLjVrY7ONd1Rw0tuEbxzjr4qfq9hkxscc9ivVUSAhfMhC5re/JhO4U1eB4pQvWCDPDsIhfb8EvcjMuWidnrMQv04xp2YhpKCfrlDGYE9qIxPEFp98coPOFGvkdY79qT7LRersn9+8FEx2NkIMVfd9OhN8tYI4jBKsidWibJz7ugSwzvzw+f9z+e927VphIJwlt5EvJd42GfxdDBi2ZalCE7VdGnPmAFcPoYikNvWQJs9AcwJusuHDnSjq67Lumk6KRJB/ocgTmzbIS+oCHKqlAoUpJjw+8bIDz1pjbAln0Ly8Um3d4/ho5Cc5BQvyPghyUouycX7ykn9giGdCkad9MOkJ2QuZrd+dzr6NCkMuDN010yxod1neirD5BglccOOU6wly6hA2jPTKswlfZEsGsoDS+m8S/ZaynB7+03H/aHF7UX+ScDIOeF38ApnKZvdlOtw015MVzu5yUAzrlshV9deXXoZbkRF97P/iiiSq92vq8P5SclA8DQAbST7LFf5v9knK6uNrUNWKa3MKOhdC1bimYKuY2SwOsazMCe/Km+5eFDmrRJTsSHz79zakXsPmpo9HJ5u5v8+Dsd4+5FiZPOJk=</D></RSAKeyValue>";
            intermindablehash = "66(a-2))74sc$&f44=r8on#kvel0&29lht2jp&=vo2fe(3h+9)+)#f=i&1@)plrt*^y9g=x!+302a!c&!l%)3#2wuxv5ywf#mpirb28@md=p!l)uy(p$0unydr2*n#4-h!rw2lli7rxk^zg@bh0a%bdl7e$zq%f!4-&+g(09meyb9id&#%zpdzu^n7j02+i&#79*mgv2@$8#k@60#=4oxrna%wn41qi0(d7exljbl%xc8kn!w#@4k-c9pnen$^w@6o*yr4ux3u#36emv0@2@dmo)$-&(h^70#6@0bl6z6jwap^eu+3-wddmu+=gt@at@vd$+f-+iypt(n=!-(9(9&5g0i50mr15cdd@)we^w3$)ro45eajowgk*%-f^5xvr0055sp$)&**yr8al0+ng9l4i*l)-@pp3i!zmm-z^xxhuxs%y!(h6(iji(n@&d%i67f-hh7^125*heb950%s&*07+zs4qa033d6vufn#ee!rffwyc#yhx3g#u2-)tr^keefezw2lewo$ubx8lupstsoq=*h0g27-pzwa+-8zp9fzxb56od1-*3d%*fym9erbkp4!va9zx#ek-#2bs5lwq9t3upj9&p7i6#wa&(a=0i1y1(&y74fr6ev4yq3d*qmat(8o!l3hccb&o+wsjaws(4b3jxt^g-r05jq5p7kgw=5s13vu-l(6-ghbxy%hf!qvk=a^+zw5&9a=-dw!--&)ex2kwmsr&wqg=o&4l3i2jd$stknirtkh&tx=k&%vi=#%8(q$zxkk%g2#3jd6wrq@78x^!(dn#7clb+0oj8@69qn2n4jw3ict=wuqniebi&1u&ph4$tjhgkw6a^ku2s*5djcc^m6o5gn&vk9gg9sm$y#3+b#6$(*(-(*m@&#fxi7+^ia&ye^^ql%i0^vk!ql9z2(0ba0x==t5x$!%d)0!re(2r!-)xx0x#-2dd7l(mx(egp9!t4y$b45k7jv9s3+mx7&vab2204s6u^f*wa%#h9)ohs2(a57)xl54hd03emd^l+a%e18q@aa7!7i-(6k(=hs!a61@7s!#bt#jq@&6=6iai=*5t18lik*r!v3z+=h0vcp5(%-i$8-fiw3f#)6yml4up920ib7+j4@9!s!f301vz3(9&j3efaqt%rcpdc+jw-)0d*m0pzm+$i!2$^6%&49u36*7#0wo0scx7lv+$r&*7wf6j^lz@obzs#)3+^@5kkc28h(cl6q$@%v2zsj)o4zl!ep*c&q=gamh28=w)=wti75xjkp!n%b9=e%6uw+n6rn0hu+8fh+a3harz@0t7dvb9#k0&g*(-mxtotypknbp%fu5^!dkb(%z3q$m#v%-xtdt*u(h6k!o#d5v697yw0xe7wbif2x*6n@!qe@9^=7uo54klk^r@8=*7pz&5!wr=^mfn(v4=-fr&g*ezu#)!ky=1*e%5(ry)3ohuk^v*ay$c*qzgkvn=tj39293^5-e*oidy2(egjwmshn7&6mgv2i%f2314s3ddr(f9!f9cza4r$kzre!py63hqh+m-kxe9#foxs=yl$&ekm@vapb2nxi2b3dx@@!r+o(g0p+%t4$h$1=n1mh#&%0h577$+mk4r#ep4b)qa6b&4%#)5!^sv-pi435^mo%2fodqn@&t3g1aj67$(@os7yot2*1w%tnw%(3c2@x&*@4iz+%=(^)!+3*i+ix4p^fm#mlcrdaikgk(bq83r3u-i@esqvccj$6wnyk&3z*55#z8s+6-c%029gkwbix3$#$04hxl6%q79bjllk+w#v+mdrhp!jlv-f^&-^r)2gh4%&&s-+6uil$j#gg0+a4hv18c5vxmfrvnil8zars!6dg3bnr60m)k6qodoc3n2u^t)hpx3(j(+&5pdy-uz!+@it^uaca#b9o0za6ih6r5oql#k-qrvby^it)%veao71cd8y$ec$%97j2u9r#dxihq4jlgf%8dv(-41yrdi-465li$n#yzf=!mdc5l9m@3y1f#l-23+mtv05kso2$b9g+nickub805pq1tylcmamx!&f+3rzpi9f*$2#4)4cyf+vdmtfu$uffp*s5*v!etmz)(u@nj@m(#zi!zqvm$dzqcq7)ju!v&lw@30jzj@$e4kb$!nd&qsd%ylb(c%opqeezlzi^6rpwvkzrm*o^*&v4ya5src=n34w2htckjzp)esk@-zl16jgu2xfi!)@ay8c^j%@cv%nb7m2*^&d6rz^fh*+*$f3x4-%j$mci4)y%%%ve%zh*6ti9&i0c%*5ost^88stjxyeifqcbx=ex-8!0%tb5++h!g)29-!j2h+v1eqc^8ew*%aamkh*4@cjc#g^kc8n64vt+dob$55)=-c(r9rl6&9%&5w@@itxq0kfkusfo^r-ynzvkl@5lj^$*5sjsz961s)z4o1=b#a%#!9ks1xllve770l9(*w@yxx*2q^p%%i2ywwi(&y6+kfypd8r#%e3@c8kj^#s8s01gv16ms$w#k#@ih7jg#zq#0$7h6$rt&-@$9$98e11qq%z6)awiv))%0@@6*j^x!=(zw-cn-5da^+@9xwlv@(4)w)d=wr$88ufe(+5-@mp$78+1+es^=l5%h-lt9nb*%1m899$xzx8d9$dh=8=+%=!jbc9=40dfeg+upf%fs$v07ztn9euq1be&$osf+&$^ixpx%yy7&6!wna5rjaa1xs91suhqe0glq4lda773)vi*!wl30i=@5sx)84p7$t4hlkq&%l&6034-r%%p@9b(3m9@pv12b+$^%^mlqn#iffse4v^*#+)t498^4d6l%go0##usgvod=j4jg7u!36#nr9atu6!@^zh+t8f%h32j$6igtk1=y)@in6ve1et49xx0q5s3xhx+tv8x2)q@y#6(4inxsadfm=3ls3fvu-0$n@rw-eb5whm)@n(^i%kpeubu^jo+505id^x&tvvp!4spc7498chh3j@kg)o5&nqn6l7(te!7kovx(g8o8cfpaj0(te1ig%hs3!mrq85575=c&jvqs+)ca$fh^@%wb3lm^s%o@5oq$5m2zte@31)g(*w$vpas*3itdc25mgs3%(41g7)!9ec)7t4-pq81x)yabxj-nzdhhjb+dbn@fvm%osxo%4vn27o*$xt&k-dh$u3k4489n)g=xgwsqii*=@95i2p^l5zgapww5r1p(9+5zabnl^^p%klez=pwc&j&m+9adq3=3=+a@rd)y7v0#av&%-57&m@wzuyznfdls(3*lifh8d)!x#rhm&lfk(rtp=$5-&c%crg*42b68j+32q43e$&4*-wh%n7ck4k^%thjbo8=l82w)bnoha3o+%=be+ry*ehr+u#n8gy&t)sol+zk+myiwp^qi%fny3ejzne#7qvwt9rr2@te39yl=oe#g#k*q4@b*(#*=36+rrehy@xl!a(lb6lavdn(61qv=3p7+ay+rug&y97mk+i$8lqam2x8t!jne3km2!lmy(hklmt91-17xa@13-ix$z*h$#$mlo=3347#r5%qb7uup5t^%#(32-98qq1381kzw-r$m-n=ii)yf@ui8-82djq5*+@etsg(j!ts1fj^g-vcw3cd*z*!&@u8=c(0ac^(&q#m6*2x4^gg&23f0mo8j1e13zfyk$5^y02q%(2+$bywb^%l^4+7di1h-a)d4be%pcohq2v4)p*&cqt!2(f!$=2=+de3+hkjxf^w7nkdok@rf8&-uo79phqs^aj!0^43%0vioert0q1vpm7fztb%55utf4ovi49j9id9d9$rt3pp@1wj0ekvk#-oxk*0&4)(fa9wf-w7fx!ev=j82^)tff+)prh(%dpb6f(0^qr2w6o=e(9vqo-w7^5qs#%p5u^wadlpe#^2#jr3tw*gj^*5fi#%4*hro&)*%u9$m0xajzdk#w(p*0&#dp@eb11ib#z(xo@-gt@$c6h*(ce3+yo4qu55l7h--f!0+j)3f=($#ek2&&iwm-il3#(fmu24@$%i(#(1ncjepk^=#e@nmgcqyk=ac6rukfe+sp6t-30r5yod=-bbkrybk$e1%7u%kp7)h^83l70)!klqp8fvo3#fo24xiydfb89cxs)td*t60o9+cwkux65@xx!9sgcdcdve5)2=@oagny9q^5+y@y^$e-wqba&=v^sf87knvzlsckdh7!*2hhnhz5+7(1v1hd^6&vgofn6k93k789j!jf5uk)*r772*=%)pm3csv8h$6u2$fh-ps9se38h=2sn3(#x*7ooyfyf4-^bajr#l8z6a3&2$fn6sp8(&97yyu^(yv3t@st3ncu*nypg$2k%#vwxd)3n5-7s^n0@q#%2p*o$r%z@mzgm#qu6xo^%43-m@(wq1xfq@@5*gskx0^-s6ic^k*j%=+=3(5wo#lpyyg!qldlp%xg#4!&3vp67tvr@%e-5pp5o5&ylxcbymuq08o-o#x929nq6a+phf9+5@uu@4bpq90o=c0e5t#&@vecu^vixdi^#il@2wa1gs8&ojra7)0sb^ao97q(ih@@28l$r#b4&s20@pf$@sbn8)k=)pe(wgx-v=gv=fu*v(kdf7zmzpu(%de5kc&*!131$3r%($&ny3e$1y6s#mn%inip*5ymzdi*h#c73243j5$sadtd@5tae@xhc*)d7jt^cob@6+5a*(nm8(+50&!@o=%0lus95k(+1=$e@j2#+&hud*40*g9$3h7bj=l0!(20qm=!t=&ag=@g48fbm8%j5tlsfh8%=eetg#u!=&c=cmm51l&56*wets*)u9v#swds(7q%2005d&(u197(vrorw++e(p3sz68zdf!&keeukl$aj@kxw1ho&pa(8=)l)hs2on&g-$0zqe85p@9u^pp%j00er^oxu7pwuae^*rcaw)i%b28)s#09yzs4-$su5yfh^6n+9*s@@-$xl91bidpjiv)9+x*r^g2(5%-$r9pj1@-u3$sss!+l)=oz!@qgqi)vz*#0!@xce^#zn#uoo5%yha+861rg8*jz%n!8w8bbh1hto@(=5^ukh%io(r*p7u9onl2+exubik#@*(0*6u5&@+t+k1$-$g$p%i2#p((a85a-wlgq0+m1b^zmg25b4i7^03)9h!7!sxiu@y--f$x$#s9+@rn4fx30-kxcv17$h@je7f!o37a%!&rg*)-dseb$%4iz8mn8y4nq(6hbhjq2p#$tgy1m2c1dfmsryjbton8ykeza4n)*w*4w$ry2=-u7ed9zcdl+&)x7t7!d9k(tn6az(pdes(ialqryh+@ky)wyb)=yh&^3ewolwjbd+j@=#ahr44)920-15y(+si9le0ij^7t-mml#otjf3*b8)yqmr3!)cnq^4l*sr-a)m=aropl0@4lk6qc=05fs=o0qm0o$pta561o-*=j*spi$u6o3)=7c8++kxa15q2k6x97y%ve3glq!q9&^k1&sx#)71%17l8&5%bzz-r#b(tuh+sj7k8fv9ud4$q0q*la2mk)0jv*g#ljh537hb*j7cz(8a@3-0@2m&0#4h#j*%+6j$)-phamqe0iyvah1^)!q$$vy$rq70c^c!2*f#x5hd2bhl7otv#e(s60+b&lda%v379l&je@cfc@shu9u*(a@z=ate($)elycy&56gg@xq44$*g6jiskg38a!mg%xd^l(hjycne%3u$@#jzp!sv@$q$%x6*iqvjois8b1os^tz@i$=cxyttp#r2*nn8#3(%u$4314)41q37xd5wbabe(lilr5%-evcsp24koj*#pbmppzo5^bs1y^(@6s0($=1t1kn%4g^uj7&c^=p6bou2s*yj6^8)$++s(x5%(jw15tac+v)8e&x4%+&7doo@2(jk740cgl@ii1)u67jp)q*)1lx(0-29od+!!&!l)bz6tfbdr9w1%-^2qx$hp5*j$e-*2pl$=-fc3s^f*o^$=q*pxx9jexog3e&eg27&ks3&7z-#1mxw#rz#i#bive!m#+^0l$+hb-v9zwnqc)@0+in05r*mtmzhbtt81cx@0y0%37zyfb90fp05ng*g(va=1ish=$vqm++&36)-6#s4$&wg0vad0y&r(3dcvrobw9qfp6w%k)5ya3i8y=@n3pvzu)-+xnn33@3t^@t*xl*3b!^hv0hmh7*%d4if7wz&cemv+r^k^&rag&(lr60&o-f)*@%s4$pl+wocszhz8-6c360z8#aqbm8v@31ss49e67sf7bu6kioah^haacm^2p*vj975^rirs4@(cf8a516jjni(fkq#t*vb$@=-$n$f+y-7tz@=!hpwm1y%2#knel+jify7j9xi!ljsmv$*2re#7x-s5yzwuhs4y40%ft3q*egia*hu-v(+ja69g*wsjzqxi9u*)+4nvw*5u%q@#fe6zsg(-$mzel6bw&+n!cp+^x0ghq2b&fcrjjw(ca(uvavrlx3f%mqkrr%+8+2=aw0@)2u7%trmmrm5-v((zh6jdtqfmeac5=(x77u#f)v!vb%+1oqst71(lpn^2&i#&4*2it=fhu5b^)*#fq9kw-k=zqenogpz@6&%2d%vs!)=wrecg921i$@*f=ouwvtq)d9oeepqpdygez(j-4pc94s-(-15t7x#5(w#k&ld01l*7b^&w^oxd6ggq!ftb0)n^j5uly-ys=(odkfcu74smqm+49#32g@+4*ek%9n(&roh!ue5b%-#(7+%%6n5hlm=o(0kg(4zp9lv%psn7iy@j-r=(a0ia&2b0ai%27k1a13phm+4xq=of@4p%3ctlvpju*(3ex(+#00#l*5la)!p(za#3=++sfp@kfex4l1qt=z9a%%=-r&v9+x!7yqyc)!mk@xy%a@^k!y=qn1#uwwox9ek&h9nlc2op&lvx9u!hwt-*v!p1s-z*2y49edmndv(o=!iyykx(g&l4rbz10=ibof4!!9kv3se1o$=83rv&1b289+52^==hgc+6uzllq=he%%cd07-bbg(88(q@r@45g9f!%g2p7r^4o0*(0zwi+b%+0f=az4gsj6@t08xdy##xvg0iqta79v6$(fa1jl$r#3gn#$l%-#ea8x0s!$pgz3n&q=pdn&)!+85^qela9l9=xvyb9-$mon7otxb%4yjt&gs+#8s8x+2q*1c1%8m0ez1bwv!21134e5rysu8w!yyp)6g0-)+(2$wb9!-h-5u&l=-sbhh8qn#=fl0lop3417ed33zbolrt+d$-7ee63f(rqtpkp2i@wng8(95*)^04x8=w117yu=wf@-snzwg2shrb=tr=zo9@!g5huo#4*w4tbq=)nub*1-ly5brbn98=sd0vh)lsd67p7-+=iivf8%a@)m75thuoh6^svb32@s5*goc6nuhkdcdze#0#s9i)0m*qu!b60*mbohb!twu=+#(&xvp7=%jwr8k@gx0!66%l)@a9g$8a2p)!4q361#881bzv=8c7nlgj-0=6svziuuc*#3if%&p*=y$ck!@2kq9p(3#re)xyl12cem7k1i&4pxl^9mgn7%#yxs+o$rs*crnzmlz^exwpitqna=k05)c1@bw$0m0b)+pu(+jjuvcd$3-hsn=&87sn5=4wk2h0*0do(*2s3wxpno@om82e16@d!7b=kg-0u*ldj$xk(9f7de+vpvm6qf-a#qxaz5&ge&e4$m%9fai^zr+78w@(#h0&(ivjla-d^-5zql575$l#uu$8w!mk&-m9jo85ebjrd*qcc37hltd-=@!#j@h573z*c(e%7q4ivgmdylfcea+@81#2x(gfo8l6bu+m0^4lvtn5sn6-b&2b34o*yvx#8j+@(&@+z!*a24g3rik(sj#gu(e^=txrc^7uy99l!72!+k(+j2%-yn0k085q$)egj$#9)onjc+o1@eg@+rmlfv=)hh2xt81%4fxo2peirn0uh+2nz&w9z7q&^^z33ts9xk)b4uo$wkg#)%4j!rqa7^x=f0h9#c0+d$9=et*d8s8els=wsr&0rqe1=+ar$vq2$hmyt6f5p@mvuk2w3gn81q(s@iqr*$vdausr8^)2$sjhn2c2zpbm=hq$zfk=6a@zgfsqunh!k)(j63!o9x67h)g(yc6xn+)3b=qsjxv(&9owz7u#0oas0rrl+j(8%(dkqh^92m%g-@%2@dnxg&&h@7ex*5sqm!r=b$wt%xawj)f@sb39%bz-w)3hdc^=f%#a8&y-ax2*6^+^zfozwmowjy)0a9%z2d@nuerkl5mx*mgp=!(-dc)@6@&3=1!n2phxrb9ka%ql+!u%$!2v$^uujq^lpbx$(q%8p*ybw1@cc0@(4w#p+f7!eprr4ko9xpb-)c5)5tcst87#d)!i7a%4jt5q$e&7zewsr#+pz^1*^c5kng%73wwpl&5%#4u2s@^w7c9v=1!^6)@*cgnnsorlq%&puoz@9-6r346r2k!wfp0ct@lbu4kr7bw^1mh@i-y7f8f%5c)&xwt$gcyl#)5t42ly2$nee-*hr^izb1^88b56la1uz=+sjwr8his%)&%ci#!cg9*sr)zu=9!ldl6y+5-e#vrhhw#%6pn3by%7e@oz4)!3x&11a9vm$75^61)wi1b@si*i1-esv2c&8b(cba4=9-#$v-wb%usrv+kf+xqs6sess#uo6b1)=0wdlt72=2zjjkx9y4vealfn)017^^%k1hu)=y(*9xgt%8(*lxrwwm81d0j%0q!t!e@wsn#q91h#tp6a57gx##he316x#rk97pj#=&5*4rgvp(br&yo&8hh=99x6%ka5a3y*^&f@wx$8n&&7t306*nwl*lrac+ed^5s3$2a+^x%fm3v^&!1a%0!919qv$ehek0&^4f&mz0%b6!&f)sk8x%cg*mwt1!p#t@)-!3a2&e%f9fr$^!01745mt1=ys#=5kwl*%*0hq@%lqo24vad%a4tbuz*o6yjttp)7*o+=pa1)#fm(-j6w0uc9)*!xqk6*x!f%d(9fsg4+eo8&*+ajvh1=@p!+x1=^17ne+86r3l$snc6@p*0wijcyojeei!^6k@cl76*oju!rmhch0+$0q)8ssl&653(^mu*9+frm+l8q3l3^*!mo)h6craih$s09a*0lc8jd)f15s74&#q@(r!)abv6#u@9@%-$9^axozds6@qaz2fm$v46v=h(+e1uo0$$d*(w133n$mdvvddp^s)gahj@mhxy^ury-a=n6d-a&u^=8&c!#kf=4n3=0indon57cindg@m3f9crvzr6*7hn&ubv3+-n!8wlbin0kocw%66(rmbit^knoi$h6w5h#q^17r3g*mg9sg6pv2ztn$x*k0phkp*jmus$$ya+(of215d*n3^r51$-3=ai&f=75=pye^zklzoh0^j8gh%!k$8-hfa^(ru4s2=3ci%5an8slnc@4n^0vaj%ds##50vhf1t-*9dibpm^yv2%%csza2oqsyjake+7wz-%zv&*s8rd7b9$5-=pget7lr!#le$cp%$9b@xk1jinm(h!z01ly#z+gfch9tmp(4r&6qh&024=*2ov@+l^bxhzc%xajy5b%-3*^vrls8%moct8y-19968nh6x^2y0c=iu)+f3g)+4#2#sq!9tk1(@idy2pws$yiz2qho9%kd$9e)(mxxy&qo*ez-6*8xd8pn4pas71qd+gtwyjpe#4y)y-m03jn%u=+ym1g9ho90&!p2=k&j75552dl5664keoueg-m0wb!3*1rl#)3dboibhk0dp6e51lb83ig-^jga(w@qpq&!rk&*q69=cdklxtwntl@554xi*=1f3mro#h2pm37=xj02+)#%qd)%sayv=9+rtvk)po2tm^+b7%agt%o-i!fj3s=1ayd$43^-+4z$j7gidvuxq$lu0w)koqh=aq*z3p&t-dgbxk4vcyrutm1z!ud27n#+gv2h$(1r3ec!n*8pzb(e)o^8vb5v)fzbvho-@h5m0q0er%(^xroa2!ry4*&jftuh5-fp9!xt%ln)4$442#e&tp*9drj*chdc&szy08u75tlpsib$ds!nefavr1=5z05nurezxmt&5kaq%8ny304a2@z2w)w-@ngyc*rottz9u&^7ep5le%e&)c)l6vlbbyyiry1)4jqmu*r8(8m%g6))vxoq-7n49)sq@84=48!9%09wksv-)0o%pp75)1-=^z$a5e)ar2p3(py(7i59sm7o!x%2q-qr9$*x!mzhgd*kk2)qr#-#(s9h84vsskpy2y&yh7oo!jc-4j%on$nsqaint18yror=r##s8$7z3#e2$!8l$f!x^=yk-lw!-ry2db(^12b7uy5ao27j&jh#x6yy6xfj#=x07vhj^^%a$rg!h(pl78*5!hi3l#ouhu*o7tm8dkbqnt-kkk#@a*5te##lg9-r77*6oyealbuja&i5k$sqqz)cn$u(hix0zxj$agpsg1l9!h&o5uwnb=ef@vol+i(sr3=$0jce3q8cqp7o)=dou)eckre@u%di6i6ile5g7-*bs4d2@+cw*9yi0nvbg7(#!1#&00$&h-niw2p9$b+ulad)en3&3iqqet97^lwso19)s-y-g96%8#zmh^%w)=fi=nt)^m*xc@=%nh8tl51&npgf8al+1qgsg1+!&py#^sl)%2q+u!5flz6!p$s5u*&xv9m)j-ap0@wd$kcupl^%kw^*(s0e-b5=l=byer6omc!3lx=%lyc@ewec&4wyxiseur&^*jry97g)fsmng97&w*(j(esce1@la7bg0t)wwhwk!ui4y0%7vlqsom=^t5ri)(83@a=p#5%9^03@*3hn!r(^6duwut=zs&c%c1&*34($0gl4)p=bh1x^q&=nr(r88cb+y@jj9c(yoygl&mt=uvt6v2%14l$71pyy$zmi&3!&6g7(1141$y1sj%mm=@9k4s1-+o1bq=r09aqi()qe!d&c5*@+&qay*zdc!9(lqi1&ewmu$l4q@74lkujyx23q!-5h=1xpw4w28+l3k4onlpjp#&r4l#-x00urlpos-x+i5w7k!9!#xy404v0tn$$s53ei&hsov)m-pp0!p8&6wpqc)3v)5t!o4@ne-0ncb2jb26kx(#*#)upc23af^g0kokjc8n#6acov&0^fdww^a-sn1evkhs2pw-hsh(9zqa2b=92e@)w$f7iay^&5exj-^+c*a4=jh5%+l@0^bz3la@(j%tybetj3&34-g7%i+8n4&i%khqo6$-@trtrunbfagay#u10#1vzmdfb6d@oe)6$(^0*a485nxgj5ees!vlyk1d%#3z&!gsg4xp)27ji^$(t-=^3a0c201ck28y3a^(ppq8a&y5rusd16o&%@#5p&6!r+%j&2!)+*8*-d4!t*lchg*8x^f%xp8j0d5sw#@bzgf6=f(2ue1hnac@tu)wh(n#olk84z9hy*ewwa!i)77l5z%j%*u*^9ob#bn2)p-!hdp4iz9*z@t4aui#0q&!f^vl82s19is!9=rlppoxisnt51d6h9w(hsvb$$)2oios0k*fr@2k^v2wkl!uh2squhxnb22zf3dqrd0f6+20u7r&5cuxe#d2(oys=z#bootsp2-t%vbh+8&cd0^evijbj6t(ihjdpyl-3%6rvw33h)2ag6+z0!wq^3*mbr=muau*h(^x*#2x1!ixt&3bj=9vtky+=u2ztrby$8*z%1m@o3vyvbc3vbpon7$-#^v!pojnfw3l+p5@c=fb(qmv7+)4&g4u()4+y@2+f=%c&r4f%c!0zhr#h+epd84-zbbr2566kga=ot34k6#c1r93^%6y9l!1j&wz317o#rpttu3azx^2(pxh!&a!+0=-154hrpw#+36b*5n9sc8g0i6uc969j)psys0cmfiaze3g0)ctknm0^6xz+b*k0gvexxl6yrp=fn*n1k3mf1k^x6zv$uvwz$6t31*y1#+gg1dj@)^5&lr+)44!w(^-4o1v%#(qvn=n1r0&ze7*g$ow!7o+)it6)w7u+#m+w^plx1x&r!k+a-7$+09i4(rhxg20zz&308&v4#3pfg(p$tc-k*uvrlky@&-u-*b7&!vmyaop)m*hq*mh&4pmdx0ij!7!%bal%she5(^u8)00nwt*k5dk8=xvpgok0xlchnb#2v6=@r$h&+6g6#zoa^7&$^&k!n2f1ya+1hh(+h35it3p4&8!wpav%4-93hafbm@@@6!jbbp(de98d69&#%dl*@o=j2h6yhi4j%x=ykf0+ga@*db)2jb6fz&qn$q*om$)*ylxs@!c18l21zertlt@^nj==xvgkllbnf&@*r8$2wy2qgvt@)$$cwtz@cv%hvtoh(tg0fpq7fp$z!)6=l0x22wbobqv3&nu=)dypo0b!#yi^fqqn$&)(63!&4yrf!x$@e^vn%v@%r7#v&5*v+=$+2sgjms2rbp+lhz#x0m7jyt%-$g++a3g#3$p%1y+2&8j&8xib^v(vfv*bzj0ad3^**p@np=&c0tbz!-flinu!8^mi(8ca2@jd&v-n55f(3b(o+n9crir!btpe742bn5^#@a0g+#!nsaia)kix+qic73#@f)$qe$z=5ux@-ccgz2mf)-yjbonnnxtoc@qe-9vx$a2$)lv11&wytn^h$b0*g(vawdjpxzh7utv8lhzt9))4l+r))8sbo1u*@k@7eduo0k++wu)nrvok-%^eoxf9i^n1-1=w09ev$@rwqt*$@!z9z@)=m9m4-zw8^cwvp(=kx81a@$etmb-xc@ia5qn%axbz!ko2ex3^#eh7p8o97cync4frf%%pxui+aobz4bwt&y4lvvq=%#i#g+-urtgs3xc6*hvws#tpzq4h+(4$$*l4-l7spkhmo$nc6-buq+8w8=lgk5uobnx9e$7m4s%*v1w3mp5wxb$%oj)w+z&1aue6z@z&f-m@i%1u)##o+t@q8219*6mskf6jmka!##@v-w6j@#ya481ulw-$a6-4cfz*os412wlajhe6(a=t0h4690-blz0u%iq75#o0o052hk#e+h*+8*ru6!i5fuoondzpgkwuex)q6wjl!(nrm0x)r*w*50dwlbtr-3!4f@=g=rv4z#*l5t5=^vyxjubmo(4p)fzii*$@3u+qxzn^5*lf^usmbhfifxuecf8yl!a!g*k9vtq=45&fmjk$e*6%35no+=2u8zv(74+=#nezhjm40^mt)*entli5zo9mm&ssp-3*kzw0^fmdu&5ixba$j-%gbj13#m&vtfc1d4!m&n5$^*mm01yw5c(aigxq%x!hzri^xr(#!7)%hqv2%ersx^$6lax=a98c!jx#!6tv6hg=nr(i^%o#km(0dnva6=1q+br+26^i=32y1^ihhdyl1(tsx&0da*#8!f-wq(1o+w^!=#+zji*x^ovrz^19u3=e%&kf&uhz8)z0rkf4&u(eql&1%(4ij^ezr#)rc90p^b8(#)+e1)^q7*ecq$v-nie^&+vfxppi38am6=@*(23xqe9o!br5f178x&w#v84k!8x-7m@ew1e)05^%fg0)u1&wwmt$)+cp-d6h5!ba9w49m@i@wanoo7sp%l=oc-ywy^-g+0p0$hat)imdkh@9bdwfqbbd$h#!(236$^#nw-k&vid6&7$ypz1&%8gne)!n0vok1&vm0f7n*i$&a%zyn61mw9%t1fvts&j+-(tqsg2(8e-6*xfa05q&(6j%wk=d%3fw%$*h!z&pr5$-@oai+s13&vth2d+&jjty#)^tm-bi@%$f^kr&i$d3e6ok92!bzq^!18o^hu4w!x^e6$vapu90tbry@nk=s+!!-e9ios0wpa^4%u7(ymfffh6r4rr%@7$!6tr3thw-28k&5cf5$v%89vv6z6myi9dnxt-!et%#bh82-#xp#cwg^ywa4xax#)$&c^v1b0294esz!*83dhh88=6he!u5&xq0n^iyj&9d&h7$*5v!93ob3tibpin9z)^ae7*(92fl2r^lf^cxfz)fsm=z77)pk+^)vv@p!1quj#*0d#pj9tvqq2+m!nae6rw3a)($ts68l#)v5zi(b2bd0^(*bdvdk=bd!gjh&ldbc!4a50&jjh2r3#ekqqj^@zkch78ke%etj+%#s8d=ly(wlz6-s+g^ex9wzp*=%ngnfb!3-duh@lv5nhe(w9yrmpe)f#ze$hy*%z@(6eq+^+t7=r0ru+)yla-rc$jo^tncd2$t0ud+9ua0yk-pdh(%zqn3c8b^8^u@n5xldc0q!=zdqc=r^i)0o7edra6%6zf&qceb=2)$#*tc4d3+!zq0(32$2oge#8jj6ms1zbydsy!g334%36tdz9-x^s*#g&qt1!#yqe3dg!h$^ga-0vvu4t=)1%8i3j-kt69^%m$1r%-5xi11w(s%x*vv$&0pjc6=#-8o1kiw6(e#yhmzdiu7yu=apde--4a5iq^vvl+6@aom%7kbji)pg-^6qn+ggpew7x4tvr=&ov)*-clm(14%7wjpopc=z7k1ou%xedwfpeq^w=72yvz!1aj5rc)f4+bbtk9%3=b60j44qnian^%)g4q=#ok3j!6a20!6s&+o+9as2951f8@@i0pbk@ex3&j#7xeb@b+5&6=1x#kr0#h4+*ewkfhv%11yzx0i6i$#8u(b34e2z-*%08$$lqubo0%hy%o+sazl-0(^+1c9a!e^7!174!#6wj4oh2l@vejp1n&q#=%%2zdcb-5lfblnx!k5(!0zo6foz^fo&0(6(-r4ro7j=qn-6%@%uaywxc5(ytw48vn9282v6929racoohn1rvw6c&dbhom-ue4nm@z-dhix5l-p+v9$2b1dx^g8ctuna33q2=6x(0h@g4qr*en&v8l6nlr6b7mio6pe@-4w$g*eo#=$^s%z3fena)na*+=sqi35x=g(cvei%jn9xd%d&u1*38^^vxi$k6eqphl*)(=ua(7*c##4i8l&28w9yvcqhd#ifbmy&=h=oc68q-z74056gocbf6#bv)%-y03-d7!alc8iwj8ue@z@3u&yee%ai%bd482blxx=$xf&bgc=-5x80ek-6b)a&0e1=vmj!s@4kv-p&q5!3*dnx#81j4$*nardk9(w@yp9*#jtroy6^o3+g1uo!=+ux&uil8%it4+n7m44c3boniej3t-$29f$urgw6p9lk=1aoyh@)m9ub$4f$$1f!q2ljol3a2-d*y%03%in#p&r+ujhcwa&5c4jlp*+!81j0bdk+r7-5rn0umlp^eooly4cbboz=i!t5mmm*+jkkda2=tp&%7i70l-c^$&n(fwnhx*3+^g&9$%u*enzgg2d+e1d1r6tu%vts9d0p2&-lg-91^1$gba37@nd&5e)oa9*k9(o#-p8c4*8t%78m&$54^zva+710=#o1tl^=lqhgmor&$ow=jzhxtdnhc=#g4ib%8uqc^@u^bky6j3x%54p1v@b%*mncaw6k8so6o2t2db=9i%+^0-6+-)k=6o1jd84c8!-tx@6e03g+%@6e06*dl6l#*a++w!h1&nqz^*x@g3vk4lu(mm$2$krwkpaa@6w#g9uh!fp5dy=@awinttbm=!!nx+w66aq427r*d$idhij7zh%jw9y7pn%0+4(@sm+eyhom=dsf)sp#zetyo84=thcr^m(4(zq#og2rugl#b%!-hei=0#30(w=#*y6ck4l0ax3ybq-&h^vd2b@#l-ty$b*ij#pw4=c&vp!*vwvm$9ae18axj*elmd!!mv#8%=slx3$l9&jkn2grd%242@7!*ekpvqkqs@8^n^5-*%7b08*)-6b8*iyefbbkd4(9njy!*c1xp3!!tapooxs$m6ut552qkf9f(--a3uemtrnfxl-rghp%lya%awts&1e)*v^us+2wl98vo^6f7m9er**#@uq1e$50w1l=m^%g9ov6x!6kk%1j%+^q2elt-q+1rix3b8!^8xh(xalqb6psdh8w8klbv9j9p*3dje&6r95z6=2k7l4g$@h!vz*yjfl-t3804y6x$0i07hl@#w#tyw(c1^$=o!h$j6hese928pnf3#ruwujgnf&r8f-@g9deakpw+hm9gpz(m5%@#6)wzwge#dk-r=f-)ved3eu844+g*=0rca+5$a5peus!-05j)c+r32o!max#wqo^9fm&-4i8$^pv$z!r-6kv-vb&wdy3$&oe-lw7w#lgfff@z8)uvk%k59*d$5%8m1(=6inckrwpfeo8p9bjj+uve$zsn#&l=6#8khtsab@zh4t20petonlmcv(^!d)2p5d4fbj&4sy^a9ix9$8h9@acfdf(xsb=1pa6lvhr^pb)l0h8hnu=13^xc$jwacvz@ogwmbwfn5b0gfe!=13)y0z=j#s2yg^x!toadfp%b&v(uhui@3r5%mfa@j8!dcia#e$ay%n6l@vdtb$q6r%maa2a$=c(2c2w8surm(e)txfrrwugm7to44+1b2xil3t)oc0^j9n!w*c$)ni@%il*kxztd13)b*0nhk*4ng=$pju!pp4-c5jsaa1@wc3#u2dij)b24mfmp28wg5(e)4b^1gfy#y2e8o64r-zd9ek)l$e4n0bz00^ntx3e5k$n)a%q(r=hd5h*f1v!d63s5pmiho06lk3ls^qi+w9x3iu*s=sm=^#+!1^9767!0f=*e=5x1g!s)o5be5)l)q9m1347+fbhj-*had%fg%-5t1e1(l6e!h$01xjcj-xf%c*-ghd$$5rywrxq0e@44x2qij@$(z=jz7$66td3y^dtd8nbqj*fa#6x^*$-1v(z798jf!jv#in@ib!v%f#2n6y3wl%#gge5=^zm+oad+cnef*flujif6h(w4yh*)0iny&%grab6r02eoejuyv6=i#-5=l(*^jhvfq=xr-g(^npu9^&1@o@b&ajj*pk8h3$!au#iy(rii!t62^(tmjy71^2r640&333d7v(2r8v&t3hyy7!wfdo-nyok08nblp01i^-u)jw%*s3-0b--&n3kx4@1f0ekp-n*e!-d94t=sktdmp%r!m4&3pi0tz^lf74(!8(#m8sdz6urmmer9+37k5g^3xoj@8609pm%ge1wfkv)rrq1k@6gr=1yxrpt0(b7+2jj+a#6x2z+ok@mx3-+elb#5xxa&vnl*@=n!62u+q&n11)eg66))n54y182$1$=rqyzxf#@w^qen-arbk)p$1cluhzo=+jxp(x0v04q*((tb3uuj5yc44in29fy*3$wn3^2173=!)g*6k(mpd^h*(#1!)-!fmugy&2*!026eo88hd%s%!(4@ni3$g%58&6a#q#$@q#67of9prsbt!(04nm38-rv8==onn)hbwv$=d=3scz!ek0-=u3gboy#=j=!ats8i)qefy2k1)lf1hxkz+sk*4%g)6&4galua83yjb7^1s90$%s4(3ja&&$mt9u4s=ek1se&9gq(gl#6*gbtcd88&ifj*rq3kr34pl+1#k*42c)nti4$seo+skbz-8+6fz1a@ovng(grktycs#d9vplh(4l^(33rlsjo&99(7ymh!y4iswoovdprwshi$438hs7u!)1mejwj7e1#+a4&xx4ywfi5z2yrm%qmxnxgb6uya&z-6mi2q9f*31tb#)yba-%&eelb$hz@gn(o&o-*xme#0y(^z=n005*dwm)4u6#7jn3y6)34-se8)eh=i0t^%^s536ukdj!@!kcem$obk*2h3ph+a+b32)&bf=nq$sk4bg=13fxjk4n)f(ezjiif&io$b=#1gi6ym=%hd@l=1us-c=ak*t76tt!jyir6b&wp=zzht!i1@p9!(ak0!c7abqqcanat79v8twwe0(di=y**lqx(#0(eo%9)l-y3me*e!w5*phq^omfkyyrprhhu$xmfgt62#64*s%ijl08v0r&61l%f*(0a!!djml2t6xem*luf-9$m3^390^8)fz7*uxub2%%q-4$ywk#os0hotq4*im#665%f!ilbd58u*$0+eb8prm7!tn#y#shreojh#0l&-g)2^oggv5^6%33u-toslf7qj4t9vspmy%a@2t((an5iz5dc2ak7kub83)dat2%scj1+l%1&pfw*4037k5ud&ni+jmi6%7%56x8rtfr!5nntt3reh2^cc2l=o15^6*wnclsa^02t1l3kqr*!ctjd%larw@*m4st@b+58l&a#+!&e-q)t7(z11@7eoiot5evjg^*wcol2*1dtmitw%$^9%mp8h20a8yu=gm!uy(6nm%6+m30weid^a9m@5p8^5i&#ch#+z-((ukp+^po9wni1^f91q+b)p$^l=*1a$14tsk8&m0(cw+$i+h)i2s-xb+8jn%w-5-)v*rhn2&wbre(a+8l5-x413p4d5lk8n=$erjd)+x18pnkcrnj#cz+akk&7ce&amj-ys^i6cc50^(lt^oouw1dy=289v2b=1kp&mdpsj7k+!vlc-#^f&9o=r&i6icp&-8-n8n12+=$kafknad!7!ar%od$6t0r(bbwwb&9badf()$!$n6v*8nu!5ihv8(nc&*&!sjqj0dbb=i(lmqictpa+jgzj1d#g@%ew)+1o5yjcw5$bs==8@ek77*z=)7@fbo9yy&cmc+$-^@=8n)t4gr09vkkw34d-jr=&(7llncd#sz%(=7v+2i-x5q5!mx($9^4#%t#$19u&$@br0ct(odlpt0s(e4&rmvez#er&(6c&wy3&02arjq5bbc8g^*!=&ejk8tgbkaqm$ni-=kkbz#!m%1(kj#qw(nq-#socf99y+y6-f9knmd0rg$0io=i2a+3gnpo8p)p6r508*=r3cnn5-)6+7qfj2u(qmlbr15h3r&q6f^ds&0u8b=j1mpwo5&r)9momv+e$p(2t)q9^!wbeqa01w)1k4u=a$r)!6!@&bjn1ld4mbpx4lq)m+4n0c8oe-lf^r-oqd3268-o@ge*c9h%#ix@essc@ic3q-#vnqzk@cd$qc!dl$!j50n75ay#wo$mdlo#n3zxh-ek(3@3n-e-zy=vbt$g*4j34!14d=!#xjq7ni#ecmfeu^yix9hx$ym85v9oeuj0sf1rtf=jh!^ljfv#5za05h-h%heex4qho9%&gweu@-yedulk+=05($((gdd#s((7!ma3c3n3kr@6a)e7=7ebtkzl%)1e@f(^rxg!(@)lv)g^wd7kp1^1&c3zu^#mev%ri)3#4h@o!7wie1j2sa^axk+5$(3r+zj+ta7y5(!*#6$oxvj1npg^346$)=+888pkjwr^&s)jv=x!0%sk2w1#tnzv1&p7(wptbc%lzn8ff-l5a(dy94u6izd^53fqesxx@hft+^-tjgnuy!d53t-f(m=rp+!#a8ae1=**5iy*6eh&(u9*k4z-fumdlp(+to&5rv2o&kqv-r4&arord&c2hd#xc4mcdy$bo6#c01w+3=qpm6egq^!s9fj%7i9s^2p^fu70g!m7%v-ks2*#2axzl1!(j-@l^$iw!o(z-nqfjexfg-2tf=55i$v8l#aj-u^qg=4r6n$rpurhib3kl6y(om&=8pwpg7hpaz+kjnx#u1cw9u1(p^=hq=^#r7lvb4#m%*y@bsq*sj@3r^a15yqv!+of1pg6u-hm#(p^w$x=^er7os8av$%k3j#%8%pg=k!fws%i5lm^8e37(nthbrpji=(vulua3yqbh$6=x12tf-519y)a!*%&ixurhlwfshs2wykt%i()nyeohk9wc)v9gij*724w0g^-9em3!%l3-*lel=!-5+%g^mg*#bxsm&zpdtcd%ug41&!z@fm9^6z0v1ya@5$fzuryno$gmbun8p!-#*ym=7z^v^97-snpjwsc$4(2vsak0(^d%ux*mgh99a56vyhf+=o6-hoi+0e8veh1+b&%$46e8n82+suk))k39ogn-f(+s4d6(t6-dnblfu-b32o!z8#m89%%ok^m97$tsw7*2itcv+h3p$(lyi20%!-od^#*5=63h*s1(fod3kr9xa4lvbx1tfdnrn59ka#nh8fh2jb^+j)v6d@waxxo0tme49nz5c*l11z8)g#y+22@j#%$!3n)$4-aps7^%ta0c0(y&ey)5go-m!8%*85w)=2)2om83)g(kwh#*9=8n2gnvq8cm^-uco4b--m7mzh8qf3bc(=o@=0j6tb2vto!-ovpx%%(pdotf2npxsq4(#ln4f$*n=acs1!^$zr3rw-n#vrt3fist1^o#-1uq=xde9^8%5zqiz0*%&9oa9fa#-k791e%^)2u39ce3kd=*it7q-k(dz)g6avrko+f31os%zftc61^bjh5*76@pu2c+gvzfl8cl-jj+^&47fb3^t%j*$p7mstv+9sm=*%e-ybn++6w$er)5-3(vunvow)u**jd4j6$cx594jj(ii&voi%qyjr%lk*)pj3y5xxblfbaj*fu#2hwiv-9rjuff^xt08mf!sf9!lt*737se=w$e^#!l&egfuam^z64kqz1h2f#krev5*sj%4w8)@(*o-v3o1wg)e&e1vnv1+lg$26l(*8sk-82ynzju73$w!03qp#ku2u)z3r3hr7g^$==jg)erij*z2drwek9yjy#^#pnc$we+h=s$3d9d9g-ss0$kq1d9=pm7ot1tc3fug*t5qdc$5bleu04dzucs@heuc05n75$uq^)kcoj!yvtb$v14bh8hiwl-^=pv4)y+7swg3f$a#7ugs2h-+qwk)n-+v=nn-&uojt#2xdqpmbmv(r!d5ab3*!rode^5@hd(1==i#!1!q^^c+nrzas^!z0g3w3hkxkcas3(=y3b*692e(4p!-ccmvnmq6kyocpj5z4pl3yf4@=t6=s8zz1l-)(@!r(g@bgvvz=5fx%i^i$@nx^ex69@*%k8n&vg7%muvn4fq3x+2zm$yidhs^*t@025wsix=mvw57gq#2e$d!obg13j3ir^)cl)(+s#v+wr)boc&dm6$r^qktjb4$$$v4tpgky$jfkd8y1$libk4ze&2k2$5@i5oa4hl-unu9j083gs0mtbjvpe1s4)#gi1y9rnndxxq+a*rmi+rjfu77h9w2!ika9^2@x+0$!fy7vkdh-et4&cww*czjb(mfr$dkhhyivd3+qqs-b837e9jf%1&-2pj%@%45t*q5=)o4^wq*ac&@g%ajv+0@cu2f(@apz2*38=!u09x#0+@ih2m=4fptjda%k(8t%%n41fekrt#91@ackc=jsf1yz#dv!)#5wj-9nu2w0o&0bvm2w@v(=k&1dls@q23igi8s#n=a^($ezw5=d7c-v&77bxvu($w=28sh@g#0%srw1%ia!fmji58cbq@lw$ge*^b7$hp-*(ua$5u5dsz5g7$)q$^!0xnw=wi8kbxxt1vsmb5^*yy$x6!ae06+bcxvxyf#nxg#$-09s1xmo+^xh73ff=5$$c)6u+%xa&kb$h+cuw-byu%b3+u9nqn1@b+le*3d9qhg5l4+7ous-o763veu^y(pk$8hj4zdx9!y%m%sliwj&f23#j#3%vz4ty=^6g6r@*%dx2^r4%@8r2jtatmq%$x-jyq81+1tb=1+cjpab8-+871n#&52@6d-v^)g1in5f6suwj5*(hmy%cf51n(8j-j$8203x*5jaj9wvcbvs!6ciuiw2f9es$ggjxxv$wbq6o(b8souwvv3h*62xmwuo3tzex7wqw5pf5#-a7hjy2w#j8+v@^wgqj^rrnxg1uuq$dh6t7k!p8w21hekcsfo+kp=#8*9dq@-vw-tlhkrbgtghfn@cr^j^-qvel&l$5bo)eu0j-+y&a78f(4maufpocynwmwqv+d^%(kdi-xbt!v5fhpi!ko7lfqn)4m%)-6*=%&k0kls8#yx-ba8j*dt$2b0*&jmv30yr27cc%4z+=-2i2mvx$be91rlkjb6w^#tsqkl#@fmf^y&3*lgk&t5unlmmhtyk=kuo*jisu650-@*ca@v=oho!u-!5^&b7oohn+791seapcyo9nrg04io5ple(3nzfp-k$vlvmw(8yt-gq$qi@1)eq+7g35$=96=qb@lfy3@m9cr0stey2k48f)k$@t&*s=+vi=%sx9wo#xj1)uen37lkws!0x1nw!*f@v3zgd$7^jv(^3#*5wkf024c(af%&aqc(u1yh9@s$qmw1h*=46&+l3!o%int+-%5hwq9w61(dyb0r3&2hjppkqegzzgis7d^p&80ho)-y-!duayag)@5@4fg-9j5lz71^5jp*jfizstzf$iofr&g)3r13z12^g28fozn&(h=64dmm*qo1ikhml5d1#3n@7ht5lyyz6hk!)5gk0w8lzq7=fo*mi)th%o-hi*i#(@*^+13!j*q!(yl64ilaa2s!ae(@7+p6*(b4u^=82iof(kx9#g8+n=1h0i4=6^ek7k^+4@0@a64rz-^&4o-lgpi=kit+a+e!t%21nxtw@)#^hb)1h@hb*7rbp*5b711a4*-2zfkar)3kxh4&am6v61&x@tl3#4kal1acmkowxyx=r8r&f@do*t0rw1$g*!xv1z+&ypk&j5e1u(jewmjwkphfqix=0*u67-l78p!rxl%de+)ys@flzztlr9^-#zjcnl&o06j%@f4-kraqag9#3@fg*+3+k#fqel!7y!21xv4u#yq+n%!b71^!y2g0ekb-+3)-j0*v9ikiuim@+4nme$jn0q20vwnr+5uooe6-)f@mp73-em1c&=(pfccj-kq75gonqj3)=m2#w%g^z4n)braw9)(!4hq2dr&(my=9)4bjluivu2)k^tp2ru@rc^h4m+m==zjg6@+&2*63@v4wz69o*f%lj&gtg^$l4an!d47rtjqpbog-sgs&djr71==#b(29rf-1-&#@-6t0f4(o1h^q4)yfu$pg7*3p!fupp9qknv*3dmz)e@aoe2yui8ci7ntte*$+n8+^gbniemw3xds(6xuoo+eng&7ql$0k9xck#l*1r=t56^!cdpx5!4%n6n1x$n#s-6&q$*yf02ys(z%cud@pl(3y2=8f%v@1o&7+-!4kruton23d7yg1!3^er@x&p%vr%0re8%bz4zyd$c3qjc39op%1q4)ph@os7qk-m10^4*)jb3d4izm!s9(48nwt*fr^s*1#t5b#*!yffntxlgw)dxq-y9dwmv-j%tt3wv0m)!&b45kax492si3%&37kzvdc#@cozbl(!m+m1mjvlw3(!lt6bf9c#pyvbx8^po%)s$%9itfkds+l^k8z6#7y!)u1z0wu%bdpp76)0lmzqlo0a!4u9gpxb9og7fh4eu0@-#oo7@^fdgtl@2k5)(zmg^9bnkdfr*k&%x2c2cc=c(ip4#0t(68u!qvue76jm1al)s1jq)rbbcrz70&8$olzpau%=vl*@tc&7#dlsat+3s6g)rcm%-mjp$p9t9l01o8l+p8(fbv3rl$-0%**q^r$2t7&3mfn%0cxmgg9k0sjn)f$qsof^nm8t(#*m^h@p-#0=lcd0imb4!h5%&&kjq6hq9j3nzamsbu0i9&4#)98+etk3ie6-=xpgvmae^@u=qdu3#nyqs2xf=j-5+qkj00ge=s7a52)o3!-$=!%5=6!kq(jy12r^z#zv-r60$(k56d7aki8sp8z*$)ee*25rmt@$km^&tf%egt8!au@z&%67zn6ww46sdgu1b&^%h^i(*j38sg%!$dp7crz^&$^b43$+-ifjg)rw7!$r*-#9#)xqyvyxv+-m+6gg04!twbv*oi+8dj=(qy77o#*nw^*g=1wqvmmfa87hv0^=vxiuwrn&+3y!!sro3i)4y-d9$77hcks4=)e38!d*eiw^z#0+5n9h3a^boxhkzpc4lb$%ovb^*e1==zjwu76)5(w9t1cfc*n&9zb(-9$pw&x06*0#tfa8mn+vvr94qpx+17s1)xex&b(@bnepq6pi7#kaxqv(+po%vx-+6+^7s$%w3a--qm3kqdh@hqi)=ic7hrhrmr0w$m)*-j4pwn*v2%%aya65%)9rku9m((v=-10njc$+z=*vf-yndy-hz(p*$^m%3tgye)nqfh&6z7s*wd$zqsd$=i1rk68b)-lh5#xjbya)sg(96h^0ey%l%ni(lx534l!xg)sd^v)(qh26s%ze$ic$iqbi4m-ev3h^1bc!r382o(ln)n60w3$b=)fgvr4hn*vzq9y!z6+ac^5d5-su^xq&$%(4aif++ltgv-bpz(il42wtgw5b%bvr&23p%b0dl+sr@k$7be!)f5ds$$jpn$on)wx&kgk(l*+4k-j)a-+#!m#sjlzquk@2$9u9=)hp7%1l64&%bz-m$l@zdp0+(k@qux$5%3+g6$t(-z18n109zd@c=!b@zhfje0ds$s+&x7^+g^c^4%nj$e4*5l7rus*km@^xij(d16h8z@uth5i2%)0q(l2x1(!o#nb0qq8f)s@u9)n*d2@bth03a^n#!b85)u)(g3th)&62ozf+*8o+idtb-*hin)0c0ua3+226bv1s5=x%1n(wh8n6ec=xf=$qhaeep7+gymm88&%qvn3qwmu%40115ol061(c(l4*m3(#p#-o3)-#j$-$rax5uc5=i+ei=ltr&9bx3j5^2l=9p2p&2yl8-+!r--5a!%sa%()4h1a911r!b)!1$p1%qzt&-xc47ct@u!*g611w(5uz(+3estz1dxpc$e6(y2wybh4!wc(d40)ld7--$zz3w0m90vb3*5(h3q)3l&w#oi)8n%out8t8pct)#(p1-gk-43@s!k3)l4x&3$a8gknp1ayo)+%b6v%&$=r*e)l!yij2qaj+7bf3$oxxb3h!0ud(#0r6!j6k-@tz&0i96%#poar505zv45a-(x#vu7sj%)5wrw1=c2r8jr!2vcut)p9j1ync!82+3cld1e1ntvwe1m5%7a+80uz4ahb-myp!qtt*8bqx&4qbo7#ev6@08&cvw!ed23--dfwvx!upp2%)y)c0mcn&j6wu55^=c@^f5ws*5h4801kyenjyhm!ity42d(%@(o@c!1gr70*a$#h#h(tug!5)w8omx55!n^$l$(lbadc@4mjg$^fj$7bom%xwl#6w(i8=+=+z03)wh*gnk*81lh)$l5^-njyc2z&b%zh^^&$p@c&50)7nry63a(1jtw*pbbv(w%7=1^8nn!w=#ac264lb!ff(^+@%+48g+=38s9)azitv&41*3hm&y-o@0@y2t&m*w!=%39j)7ir2o$wax&s7t^oq#^ib4kym5pcy69f&-3o=(22!9(is5%$o2)e@1&hje0=+l(082k8b6aypfx!9p**$zd0!7mhyg^(k43l$kv5gyhmk%^buy3uo6i2yl$wee3p%g@26e=k!s37r!o(%wo+79!7bqdc1c3dmu8ref%tosl=rvmkp*pq&3nt1tt6#n$g4jo=ey&1at%cj#3qb*s6s2l(43n-oig6crh9g2htw5###e@@bto*fure-fjc3*lr#oqdb&9(2i43#2u1^9nt-xlgqf@ws*bud9q3eng3lfhumvdli@3*zgtk#9say7676bkr2mmjc*98td#1ql*vf3!=45$jfrb734vwtp$4dfcn2zf0)6a9$axr!zc=8orlzwtb#@v$2dpqislalfz3&@*zazf8@^(tpry1h#!oazi0qz(nwa1c#vn5i8dzb@e9jy$tu%(2mazb4jz%b#60fvg!1vz30j8cjxp*2%lah+)2rww%hc)7tmc&%r06xgeon=upuns6zvag0870c2gtxqj%-hemf9$q=!ry(%7$adg5gijyz+a%+-@b4hs$v9l75pj$5243(n&i97m$+=ugn-w++2b23&kb*3+t$mb$k4)bt3@)#x$n3tp7ok%eteqwilfu7cqbvh)&w0(l%0$oe^*#zh)v8c9h3(h8j5skxjegoh54vca0s%-hnb9lm0@w23fuapepgc@8#34r6gqdaot#)qp^(&^&2q82enxdzqs#rdm*&58a0m$xmbpa+pgc3*u@(ewi&!&p)g97bg+do4jeagr1hpdp9$poy!+$40k#53bs@m98awf-1t13+v^6n6vut029go54f0z3%%$$b1+80a4wpz%o77g-ijus=qzwz58q7-#i6ep=7@3&)00(kv)3dxvb82&vo=g*m3ka37n5bjgl!dgzvb6)8t@dmgvtp9#!b8khpjg7-gu(ut!cfvq7fkox^y8gaxv!10*e(-auo+-x-^yc1q$99tvym)br4qv0%zj3p8mgd&mgz!v++d9p39qbt#m-nuno0c22nmd&nmv^2o8@bbtkfd)yl&nzo1#ulj!-o&bbq&8tdi*(r!nqeu*fnbp4q^7)9jbsx!33+3kx0^^s+3jcr#rsvbv77&boo@k(66nhu*qc#b955-5xmd&=fd#=f))uupd@n)1jyqho@5c-!%e8ae5(*z5x&1ea=&h3s=i8xhhm=8o5$$pv&a)r0j&tfiv1=ts*h^!$7jg(!u-psq3rk2j!=sr*recf^@1^vgh-rl#0(qhzl7&f0zpk@b=r@^94(we+2y!)84+-$#%)(6mzpi9v1pt+jspa6i5*-j%d))1(za1-6qoyjhc!g2xlw!2vc#h6i)=2^dvd3$rk5uhjrt*j9*2l(cspjyb4*($9e2fr&oinme!(cdzj(+)fk26zwf)bjcb!h2fb%$b1!t&&8h!r9u8(-0lb)*w2d6or2q2^+(mtnlmd9$790^@p91@#a#1=@*gr)#f8!(t$44z3qy@uphez(-kws$4pj2h3rvj)m--5!=2yii#ywc!v^(o=cdb)f(vwg$00#%3ajx6=zs&rqmi(^&@oglndnwk^b0$k4sjp%myxsa1pzz)!!1pcwldzjk8ge$b^xmv#p-th!j)r%h&yy4y)klhd-)&b%$lc98@*=u0@v&78cp2qb3px81bepp$ft4n==njy0+o-tjvb74$#k^+a4=9os97!jf7%l!!=^vbncajlt+k1zq(d5fhq@i*$gx5%54y=*^=(kb#x4jtskyjhkxpyc!o727aq1n9v*x71rq*in*lcr6cotjvscqmu6dj7f#^y45j=c#sj0e30k!3(sw(swnw**0*$7p&9ed%chn!gtu7lz+#(6xvs&4ty3ve*(x6jo*nt)o3!g4i(%5b(@-if!4^xo8%&c^z6vjamb7+b%9=dbog--iy)dz30wr)sj9gcabvbx-xr+7vq73=qx&(g!vzr!7bx@!utxmw+8%0+9e=2=3&xy(%b$q8!rz!!nqhs0k2i2-g3j)17m%yu$eg^)6fx%f(hr#b999e2q8^i4au*cqsdf3)c8bg&rojge-m0v^-#@muyaia8mz-$e6eb^wqdxom^k1y583c2wvb!b%s1d2j7pmsl)w7x^9k2qf!5w2q)-l@3ogqw$v+^%^5%h997(w!ht*!pr2m72x8$!5a5w53z9m!i4(hg^hq=5vnf0$-a)hfxu^r7mt6dxk31u21ifs%dz@ogu)ta7zvzdjw#%5#@6!mg&)u-d$=8nqql7#02+c2w*ph$1#h4ce25s*cp$u-&c@*sh6yeyp#aonz64jzvnhdvcku$jj#&b82ygtb(7dmsfkb!b@2b9nlumc$-mh8#x(!b(gkm^n#s$qpr*lh2!hi-jc3&gmll0!%k4q%pxr4a9ujnd!ri+uwt@@ub8nsjuz7ro%c*1uo78)dayt30cslx893&&kn(%gthcdjchp3&-kz%n)k3*7*(wfkca1qp4d&z^)@^@oss5mckh#k=q*quzpgo(*a!pzs9n+-2in^9v5fn%qucprp!d9q643=&-nesf9&h$##mwg7!)#j(@@1yanv@+h=10-@=2wsyu$5xf78=ef!%feyp==w#dtjb%s-e09i*1a@-uu^0#m982yfn&1q5qc^evi2e85xhu^fegir$yb+!k5(8=bp-8n*uk8n-1#%itz29^sa8na0mcy7%s&yscv34=i725tsh6^6=ep&8fnbn=l7dw7977385$=@805ez-s&2v9@eqz-=-y62vx0=l05eiqitxio5cr09mt$g)67g5!67gpsyttwx3$cc165^sjm(2=ek4dw8&kzzkv$s)e0jeyu86l9fw^rhs!yju*n^rj1szwry^z(o#o&v$j7dm@6qgti3kvyw18f81*h5g4x4)*0r*50#psjh61=h&v@lg*4r(i((we-*jerz1t98)h^hl=e+)+@%&whefvo!!4!ufc-3b1@#!ev+wg8=t(+eguqh9qyt)+-g29e)+vmla+r$1jw+@a5%57^uc6&vc7&@tozhs@-5z3%grp!z+uj8ju6*&)nj2e)0uh9z=9!qd+xw&0rs(bbgjix=mnchd4rj7fo!bjvfzhck94wh^fxy24a-(@*cfx!5)rk2lh!1wp(q9rs*byb-a-@era^9vwq-2$x5dc=mm^rl8ps^0+=i=#x-hhmibwy+p=c)524eo=ck*lj*+qpvt^q#lvj=)$en!to@!hp=k*+qjet)-4ob^6(j)60pd7uk(=4$p1i6$stp&qvhkz-g516ro^^t@+87@4yzcg9xbn6319b(pa%^8%9jg04k8r(%0zxd(r*r71$u*envk=*0o^+)*@t*6k8x3^roga+uj!ouq3cseoq@ok57xnki-qxh&z0e+jiu=@ax7^(gh^^nk)sdpl!$&^ijj&f4ezd8q&%xusq22r%yi(=)og^43kft3*r%2gs)3ubny$y-kia#wwox(jc@05y529$dip+g^*mwxv%ko*dcine286(d&vz-w%(z+&$ii)=imi+vnr35l6nt6s0ng!xlb1+30ckhttfa0(e16c!#^@2lj%9@hh&xn17-iz)r8g1flf0@o+^^q5m9+4d883q#s&9+stzdm7t1ag+ef=2hbwx&w=+0uaktf@em110t32jj0=n74ac@w7hav&=fy^ygh+gcsbb9xn9*7rhrvg()#3r3v^e83f+!bwq16rvi98j0-xml0&%$)pm8(7-zx#yin-x6r@xl^@prf04eh7i!co%fmg5+te!)2pw+q&h#vc-o+ccle)r95l8jiui@ycf#qdntm5evlkfqa5gr^f)o+wgab7^&807wioo!=k^x*3kgy8un^r(%ny$--f3%#o!%6s^wb0uncngl7+t#1jq55^mekp@6@q58&m4&^twg)xzq%cg-o%fcotp%8$7f@b!x&3nols)bh89scms(($b)!pm@h#iex@mv7+us)u3=(#uvl-zp2@l-+$67r!^2t&r1pd0czq+@a0w=rrlkz-b5l1v&hvipgq&w92fyx=#2#3@v#83+lboyzxo4$7u)^$bp6+sb$d=vo(&#$qr3^o$$^!4hz5h9%&9+u1##bupy08=n0z%$3mt7+6k)l)to=a5ho*5safu9+8fu$y@q$mug@eqva&x1eqohr4j6!22hzk7flaydorkxrj0y*owj&17-0=ro#tda)$(xk9t+@oz-6!d9ta#11dv%79!xi)vr$undcu!itw27o9g#8kt1h866kr94+6^%8hims+f=v4vm6@6-c=8#%(@yb%(kzuocp@-^1#19rit8suq2x@pw=r+$1ewxr(0jcwj(#$x5z+97$r*k%h=5)uby@ogm!i5i3!dp#t#3k05-jg+no72@-(xg0au4m**dj1tr$719mkglnm@vp$kr1*p7j=52=orv6z4#a(7by&s34w$wc6x90%7vkz9^w+@jf%9t*+dfy&-852rgi4uf@k(^8oc$p%vut(j#h8uvxu37^+%@hx8z&n2))*l91vtgz^4!dg+cb6&4!s+9j6b@ued3hz&cjz(=eggqltmwcd)p4=o7(6l*-hoj2qx^c1yr@(2c)-kdivh&ur-kaom7qq+9u=ck763*u^x8l!@=gu!m+gpnwe4dwce!)^h+m+2b&c!g5f+bx2l*fb9%!=h4wj&7#7#mc@xh1f611(^@ei^crobvubs17=c02em-nve5irjq$of^t01*bx44phz=0&53%y-mz*f3yafq^b5=alvul1eic(@oetygc9o8p!vaf-@fi3@96v!iznadr$tbyt0qy+2yg=@v(d^x$#q%uen3k=*)m)4l6-tpx!iow6x97fsi6$vf$dkr2)6it53lhl#=i6+e4^#v4#(r8!d9vj2z4w3btqrlrezhbgq+$x6=b(v$w2vjl*(-#zjyen=4@zz1l33z!f(e75)81$vm0!+pixmt-*)gvworn(xx-e3y-^giv40decrwzaz=rmc^j425v^a6lw0ni&ahuk4kj7dw-i7gnvkv4!#kd574z&*q*2&m+t%8*rm5k07ho(o(7r&xt&en7q=v#dilfigx5510au+9=kcb8-h$8vcuwjw*ye&yzgew4!femhp=&j0h1v!%)j7$8olh36cof*h5hx&-7fglfnd8#8j6gwpr4sjcl-c^*q6+q(qu3#i5wg0p)6m(h#&d8swrtx28^cbd%f7*8aen*0wh8um8vmmyixg#&=eoac#3$fk5+5py9llip8k-(*dh(lyx+(q@o*gc@cnx@&9$jxz#wu2o2rdhpv7co=6r4c=%r)l@p)pwic+n-jz^j^ot4-dg@rd%a5p*v18t@%-6*so!bpv^0%!#f&pt7t+u7l$ndywx4grm&maz$n%23zfz(z43l4x7%^-nx6nkiesd!s(!6$fodxmfyx3^bxwq&z7w08-iqvx1oq57b&=1jsxzh8z+e5*9qazj0*p=^uo#+-tt#)k3bb75-f8^h-tk270=4gu37+9pr5xk3gaugfd00!kdok5&w$phxibb#@)b!b2j&kdw@-rhcqx&)&xhk^odcy=v%!jmj@#rowz%y4ye!*&x930(j3y(gj*@z#pq50-6aj7(b2a!!yn1sm9apxp95*@^i4xhxtxp(paz(5c!zlio%jm*r+%akdwh2^@&o(j58g6whjg1+cjf92w$t0sxfa^5o*$r&12bwmbm6n1!8da()!2+%=@46)lbcq^cms7x&^satnu3+n9qq=9cg%d)$-%yiqr65uab2#wrnl*h$i5opkbnfxu8-!4(wyrtcb=^fdxa(5))))y5h5(#m2lsqmn%ouezh#*ja#(=)d24np@w4-2lpf2^t9^!!3e@304ue#cm!-^d+!9$@vpp16pwawsb=iajp$w=14+^0e5sxh^j+w-gz&a)j3(w1=22@mrp9@subk5nw=3(o*b(o))j2t4-8=g2beb(s64a#^$ea9(z+q&6b6x%2!34ifxmrrq-b86nfdujy*y^pa+8t4y%55jneqemxg-i9=)gjkla0r974@c=g9xc-oh%livdp3)%)-ysg7k!d*g1(5*g2ys7&0o04t)p*uq)i(@65p53k7pr*@(9fo7rls=z#24a@o&u&kxq&a5lb4jpjy6&pp(9c)0(-l*r1c%o$ramj(^rmh3!(!e7)@w2fu7)%nenh2$e$ilf*umfj^puj$qahai$xd(6lf8^&k!=n1=@l###s!sc=13wb%oycq50s8*4x7x+ts4#^d%0ck17wb9$67kwo5mb)zm6*ik1hsj8)%osq56rc=m!+r-!hz%v9i&v9o5g++k#uq&^myw0-ce-*@7$p4d(x*+#-8n%+lrv393+pusplgbfy*1=n^tl!cldwt&$4p03l3koi83rze0ux87ri0juf78ijk=ydx2o!&(nmz$$sw+8(d^hz$6r^zh7*a%$!b$-vkl0$o0@!0(d8+dtm59v@mjj1a4h1+r!aws0&gnad(hhnr+*=!gt@kp=we-21sp@biw6@9aaump&aq%ns9k%8-+^%gn%h)5w81^kwhusmr=doj9wabk%&kenip^vaz*a&oi5obb(3uh5q!7n1b4^1%oknjp%b6wup!z+ot^9qcs9exbxnj*9#e5eq$u%g5c)yovfk8jb4*^u2cht&@ju@gkutk+k=wxk+h4&-ar$qxt*pmv2ne-mghi$%hoq9-03bbud$vu580ykpb=2*z&*r*e7o$w5wete&nx8za@e(h%@a#4kk3uht502cvt+xb45crn7esp75%+!rfblp6gc)@=a-%f=y#4x8ohug)gyxc7f6#ni-8#!po96uf8s-s1^a1e*=jtfkowbt71phu-x+&smv6qqario*%ry93p53mlqis2v9m(^fi&jhmcghregw&3f4vv8)h$bbalar1g7og*!-9#po*hmvt+f4h^fep(=jz^yiss@#ky9-&h*6f0eqfqzst3@9w5-z)z1*6e=60!t-dg@q=3#5^=elv*r4ve!9ujev!q+a3zv0)x-#%@@c^j0-kpx#+hpn+k^)dgd=31evnnvw(f$7fh*$#rt02asgp=012wmmn%^fftb^!l*8mms7bwipp9kzj@d1-*v&!focb3m83d$ahm#79^r0*jh#bc=m%)*^(q-sj#a*nc3=)ir$-2%y$)+z=z=w5+&6k=gh10k)5pec!l&jli1dt@w+q1g)%osn2)3-&!scs(b4&062045nc323)ghqsxtv=0&%#(b5)ywogzyv*9zam!e-j+w2caa$%q6j7^$4iq1j2zgmo^ynq&)ab*b#&(p8(ajg!##e)@emo9z)8mz3y8$=rv&$lw@d%&ckr+#ler2s%xw@n0rkn33pxzsf)+7(q$7hfw&89w0wu1u5ctg%=z@ads=7@nvrz6sw!8bb6k4br1r^d2^%7^=3wbeerp)s1v5vjy(94%o2#gi8itxp55z184+f6xzvxz(3)4ni7up&6l%!hk*+#!2(rt!9u5epc9izl1@02fmmv0*j#s=hmx77$q0^&#wwr+c=acl@2kzmsev0px)*7!6qeb2kq)7$sbvvt=uk&p9oqic!1q6v&ujhhx(9^q!673f!3+cdg1wbwnq*w%$qfs=yuii7wzn^venx&7i21zogy^f%xq8wp9zv6o4v%!a*row++2qj7sv&e5+f&jfw8b5!5e@8r8!$pfs=%g%%qkk-d0zqpj2nbpp2mfj=%hf+b56#xec2nvwku7by6!m9ydjqt5x0=*+7rkb4&32u(q+wo^v%$sfr$0&sh68#4*44vjf@p&seol%ydh^so2!94)*mndhp(#mqll1%284=+a(x9@-+%v4wi(q0c!f=0wil&%!*!q6b=$!zwb$9fhlcob&blqz%x7z=em0(wtd%#irji3m-)07s68az-dm!3^efx$jn)(8pr06qz0h@nc(*+ifkgi)@2na=y$(kfqww^noyepqc=!do)ogfm+p#-=31j8(34=nbz*wb+igyin$%dwq)n5^f%de(*3#jfz$qs@#eu$fk8t4vu#gg8-t+ys6u%u3ll=%!8$3bd=$8kb2942#yhb5hh%*qy5sqa(+!f&@ho$e!oz445)ndkbr*hmc&(3l39#bvn%v!$v)nc*u(pfkpi+69%tc!c(z2cvwl(iy%v!c*01vxl065dov!u@4xl8h(rkr+&!qeom9z0#of5wk(s@jdqgdu07c@c0%pnb14m4v9vepk3k#kjx6gw$-1n&nbt--q=+#ob!l3g4$=t*0o(rxw&mi7n+y6y+4ntoz424*3weqxqwb4hj1q0)ic%t6n48bh+h^(b)3gp$+$m!7vmnk#x4=iw-$b=z+j28c7p1ul9f%!=j)rza+yj8*lk7*muyk#%5s$h+f=k-ri#aa8w9t!x&+&$ehn74d4)w(gyy!x=w!l4!2ibobxw3l=6kqd6@f!9va@g(2)-6$ly4debownu^2h5-5!yn!o!q5om%^231ck$+%ey=#n!#3*&(yjd%$b)44y-r05hc*2zan5u35o8dc-z@g49mh@!-cpk8rwxuog*wb5zvp6p5@7o69a@()#uu%c#hgcm3!1ritkf5sdj62yp@q8+&fnazi!ae&to!i2*p3w1k)y77vb09swg2c6jdk7+jis#ut2n+aqi+i4)i%m=7pb$^$3hnd5%)waa8j03&-0ms&gc$9px%!hu6x=jbfq!1oa-)xa$f)r85-2-nin@es+p9r0gzay3=$=e6jnlnlu(63b8^+^j@d8jpws^*)xr%b!^wmhi5yd7tt0y2^vzl@%8y3&4t6n2=rro^56h7775+qstnufebq7e6e!x67e+479wqkd=ou97to9tk@u-zct=lqm$*s6+47wggaru&h*jg+-bh6e*0t3o2#6+^vr)b9rxix#i8+tr1!6lewnap#c0r^9m1rgxd=&1)0j*&(o1+04%yf=$-^!8fmjg8f3477%3*tcn73jg3*00a*zfunvzaofxaep3g1&h8q=q^cyknvtz-$r%&jbpacz8%wg5z!+wws%a)lx8lt*@r&cx-l9-r6tf3dp$ub-!vrk!-&*n(#%u054=2*7www-ku137p32(uugqm7vynseg^-9-4ssd#)9ctq4zdpggp(+zj3c(x20$-6mi%5r=lhypx&(nrr^g)@t=+j4q#h%az)vcnv14uj(*##+b8)%k!s&p11onqeoeb($bzbq4nao2^aipjih^nbbirf&)fe3ro^z*+mta)p^megjkx+i&!h1qc5xu3tjc3tzq%fa%et)h4-y@)nng(!j&glvjy-4%&x(-*j0u@j$5ldzv05pt2w0&@09c%&9tbycaeu*2-km1)8be-+$v@ms%&wpk4th(39of$pxz@3usn+=re6v^rdj-&4jw=0-&e4-amad#1z8izqh*rug=5b^jlpxo^lvs5do*q!0^x6f61p2^gv=$sqs2@4%j$r=p=bnu%c&j3v0-pp#p41*lc5+4q3yz)awj9t8r7cq&34a@bfl2^48sp1@gb*uahvxzxpsyb8mo0q@%csi9s01gn$iijx3#h$0ua%jfedtutm8o#=&d!z+#(y*4er#ry9&!b533*&7-cxp-y-kl0je)%!at)9s-bwwk6=8ijdl&8qkn()mr9zm@7))9xm7o49nzl%gifpeg-ps$z9p+pisrnd7!w-!$2ps-n=yr5k$mjs$b8yj8j7-vnc*uu1yhvd9@=dhc4yk%k99fvaw)4eb*s#bre+)rdbetmw0c#(rahut@846)mp8x@%0i#dl5og2*65!x63u8-d2y78kch+0e#4j7nl50mcww0atr&df)e+vndcbt*=hp!mtwhe)f=3pms11v3g1e94q$o%cr(152u^fque@$hq-v$=f8&wb3ldvymf&b4&lz-3zlf0j00!!950qs0!p*rep&lib^pfpv42np0(xj8=e5m!b+f5)*7nh(x0+yebkd1ftee%75h^pu+1j47n21jh#uf2@q(hfa3$rs6x)v=g1%ho)^pkc1(#)dn-#be69+2-0pbt-f2y3w!=$t6)$0*9h$&%974cxg12sj49lyzi-#p*n1i7%u^oy^6!h6kf5u8hvo8bb)08i9@m3+ho0=4gczvl7*x9!ym%t&xj^7a*2iwztuuhjp!7mx*r8h#2n%-wp)c92+j&!98flrg0!tl1l%h6+j4m*4z!o+po8z!j^&=#8385ws%zvx6l3@!sk%-yj-yl*y^jkw8n&0-z4+b5#+g@j$1)6n+w(^v!nh@)znex8inr$k3lkhhj7jer0)7^e73wrs*ha1dg)*eohnyh*372myeif7lv$pkw0b+2vgo$ewx$g*@e$l=vqqm-o!emo$n!mw4%n0^3c*0b8d&l)j6xd(q0=wx9d54d06ffd)1fmkquvwf(*63^urb4qt&byuk#df=w+3uq@l(***r)!n%3e#yvp6doerizqa&prd)gm3r@o3!yq=94h@!bob^hj-=7an*6q*^n20rv8kg3)uiyk0tsbzq3x3=15l068ryutsw@7g@%odzp$%j6x5o3&dr-2m$j$5*^wwqymh1o5pxop@!$w&de*nd%orpobxq0k1o#$sittq-7^(@%#+g)l^=0#o=cyz8ao&$52=+$9i=*01+dgllburin45+4g8+8g!n-tus%+bas(eqap7i!qaty8hw=-lmqid3#rwiii1n5&(315#c31d7t6zd#yf&4-ar5vaii0+2c8cd#9vho)(v(1nu7@le*8&65^=yx5fr16slaivr5=78r@it=rvzo=8!^@3=@k*05^*dhy(0ggx)qo3*7^ijo**4-n0v0nggeura&(@^o)t&m@97o8f(p0l!=ff%2v+$qy*&ylq@thos$wta@^f%sltn@hf35)d8=g&x*^2#8m%*li=)orr9oi14wly#txuievgno7h(fbu80pu4kkx1&m0#9szn!#8fz7^(^c@n!ov7q^t%snx!q1fm)n#=f%ib#&h&ks@)3($8r^@&i2dsk=d%zh-k6%a)q+*i0avq9niy!2vr9($81(y^4nbedzf@7*8t=4j)ydm&#ir$^(4!qmlt&e0w9z@jslx&*lyy1&3gzdrvx7pj#m@on3a(rga8bo4z9a(b#moi)r73-r4eax084dkfiawf6*%s46!a@91dk3dc)4)q7ine5(@v^5h2b(nwdv-hhxgb&gkwq)k0fw3nl@29*fkyx+#cyaob547d^wpj1!v(f@hvh+6b&dxeeoe*n()$@**5jj5k2dii%v^56huy083za5a7-h%5%5iz&6y+jh(4tda2jxap#$defnx8y-lfxmjohc@qai@s$+g=x4j1t5&qztulsz&l)4p2)ef(5a-4wwdfavgb4$o@5j#agz@$gzgo#8wlkc)*6s-l^&i@yl!yvc=2fe3scoj59rbmc(uo*ftzkzlcd+8(5o9k!vyh^7cn(j5#l4jpd2soj0s&7i+vvx+1ku@-$%ja^2nw@3r45n6r=0qpss477+wbjtxs^klxsqj!epyrtk$-@)3$u2!1p5m^1q86o%#gus%)pduwu13jpr8xb3yf4$s2nbpenc(d2m%mt73&c8c5ep6bggp19n6hqdc9et085k!7dpj$qd^(l20h%9!askmr^mm%s*$jo9+8c-sy=z1b6@)x8u*jkjvg%6%96n1ycn963^&^b4d^#exr2tuyqv+%d8&@incv%vwiwf%&dw&9t3n@d@i1lvt-m(z*-t8+p#wjwdwgfd^+3d!6pymlj&tlke4u*)*oh&0h2o!+9&gy3ylfi!8&2j5h75--5*zjk7698xrqk05b2+#d7k-isw3+ss4=a#k%v=@)v51967mw7o98&9ff(syjt6nb#u$2p$q4s^#e$db1m1hrn)rnnr)a^x^#ir)0*=^&iyvq)sb6!0$mkx+&ehry*#@$qq*9h=629v(lve1f3dvg3hc9trb1&9-lk6q)j!k$*s$(m3zq!$n5hvp72o5sbt8+b0w$e5)&*6xlmman7b%rshe*bhjoyuj#0%x-13=y&5@6w%oe-i0qf4!ibih!g@!!j5%7ys)tm9a21z^6uga-3hn(rdnxfa$y*qhz+b=!acb1xo3tg63q0#iqu(4^9m%g(t71tv65kb!i^=n*6xu33$1y^gdt&tq74o5hbe+%q-5rwqopz9phzs8ym28#a2#dvem6goz4xg25inr^ue7u(7gzb0#(ja4cpl3-bn(sh1(t5e-wm^5i*5k#@up!lnfp7iv@*tl5iv$j@a!c1@ln1v00w%ajgo^%f9xn3aicbqqc%qq1z@o4y#4a3(9r&wj+4+ee#d^k4=w1vy9q$6=0+a8ntp*7br1c7w%%--@u)$qo@r!bp9fpt#+zg1-2ki*0l2*cg*e^($4op0!qvxn!$lj*wx0z+o#@)v#ophpg7cggo%p@%-u=6u!qd+z&k5^9q^s!!1$uaarkte8aa@2we^y$9@)p)h)w21fj2vqdiq9vel)pgp63e%7o9cq+44a*fw#m@k4!@j&wy6!j%9*96j+!&y4icq40$^oq3zc=1(^9-5er77i(9bs=ew66!bg!8jsfb!9xg=o@nf#ae0v@&9%j3s-1!@pt3tq5x@2==93@gvc@dc3pq0*+n(6d@o7m!tizfi$f-m$uuewi#phhoqreawumyjo#erqaheny5jab!!&v&mv2&kk!wyodwfo5kqree%%97p7%#2gvi762&2)88foa&dtki2u!7$zw7!(67m=c$9tj42##tkj@54&xyj7pv1@jf4(u7dwoh!xio!91$k6hb4ze&b0j^!+s=!rq76t%jiv(a8dl3yzt(v&5s^dp97j1!oac69*ud%+hob^oso!!k*jn&c#^x(y6%(ien$8*sf^rv1v!qt=0=3a&^91s=e9k9hbfj#6xv^mredwh-w^h=19s7gp#db=o0bkurpzax0ttru$37df(pzxi3d2e3*o+(j01**s@54(xb5i1b3t+pe+urp0%3k4mkto!2d8$wnd1n+7-tw2+$p#&kzb7kzigqlelvx-a*f=8#x5rm1!2@49ihhzp@wv4k-1u=gn7ekymstt)@xi#61mz5(riq#v&%hk$&muser0xmp)aavck&6-#vibwak6f(s8(!frsf)!2wy*v+^)1jt+oj1k8etq8zdnfbqb=lpt=)z!jfqelxy)$s01o)lpo(wo#33--l+oiqes=%qcwe5ggh7w=cgwqq(w*a=96wrqc=#$pg3k(=iuf!*b)1w0r=iutwk!&f@q-4^km*^5%=ur&#!ihb$yq0)b#59o=&b4oii6*0=w9l8y%rfgfaclb6+x7l1&o77-vn*95td#0@l4^%58lx*!cyimi9-m-r&e8!6ho16o=5^8fl2&9^n!#=0kkl1(u!%b*j)toh0$@9##fcd@it#y2ud!ag-$+!ea%k$)vb8zh7-ri!t)y$@w-8(@ro*&k9%w62-(4hh6zl#*ip3vpw7p+qdyve&f3%e3&=z1#pg$by52(q3*2x6hw4w6j^c2vwe1jpqp#w7q!*8*k6avc-8oi92s(!s)@8kcetd9qzy0!62u)ig65+inj*z34#gw$@dw0d^fxnvw^ixnicg@c1g#1&yi75tsyr9+x037hwdumy5pv(vobm3dvvb7i72#za(@xcr4%4vxgidca)7@o)@3bbm=e)04cb!ha&@q%^k^ro=hawvaq$3bvhg=)u1*t%-%x=sjo6=j1(mgma9qbh44&f^*2$t8gv!dau(f$yej&f(1#+c9z0x#pj-utj!k2dwyiftzhvakdg@2kgy3klg!e-e&i@ovk7@4s$zm*ez=jr0(2l@$siqp=gepass0f!+10uj1*29h-kx+cif@+ksa716=!pg5$&62r-kcea(5c7s3&r!r-b1)n@&+vz$7grny7^(v#%9#c3#+hrt6vs7jh!rgyl+6zsklpu)wogfi!#b(+&6zgusrzi$)@3kx^rlasx$pirno=030fihs82kf+f-wj+d1)&g7zd62rbds5ry^1f64gu8d8ts-c@^o$)sts(uqb9isju5(oubrh5f#ow-hw8ig4rx8^q45u6u1-b)2vh#hg#&o5c)p=%-@2^3d8)rin%)5m9%7yz^8)^q^adeztx8h8k+u&6&md4$b&a6)4sr1-f^!^@ev*7rty3=i!7%vmhcge0-+2u@&jikxmdfy4x5218kdfnp)z4e6%17g#e&@)p!-dm5nx9%t6&9jo89t)%v8t83-1-h21*6l=lq@&8m7#=+=%kurh#%t!w&1(7)czd0#akl$8-asg@)i86up^sd#r14(nv^p@tf0xa9b-hlk12$+y9^d0!2oq@859bgduqbpbz9n)6s0&(ab@5##325wmym6nt!nwua0y3n9qkj*nwgt0a*t7m50lv6l&e+^(!n!76lour@dd!mb$xyfp5%nb7o5)u&=kn+@01x*^9=3!lg4)p1c=95f)qd+b9sqp%(@@@=dqscb7a@yz19!1c+4^8^mgxzyb=z(vm^osgx9go28su3)qnv@%g(r)x=2%hq!$^5&80ndqfj7uugi%vy-b5to4#s$k^*-i%(zn9sv+p@1=s)#u#@lawdo@bd)g8(izkmgs*6ts5-g&maz^v61rm@u294qbgigg3i2851su7u2e-hsd&r^wjt&3z9nd53)b7+dk57a*cczlpr3xz@4agf=mg+h)e-brptl+e&4o&-2(7nxhyt&*+8oze!r5kg^v=jot74l0ickj7e^#2q$-y3tb(+)h#-%2uu=jhh4b8j90k^9q*grkb&kkd8p87r!p4#a1tnbdlhd#&0urd)xn(vtd@2t3u($520)14o(z$$-i32b81yc!5dgi8-#nz&ubm4pj41vtww7tn)5pyzwqveqhs@&5zz+)6n5+lutq6k941p5@h2zq%uqv3*t^7$84w@xqg6%-hwjyjl@eyyj$q-t0bolnwsj&6t2$#5b5!x8$#(uaye!2v*3e6*myfj)r8bvs$=fb57e2fg!2eil+n@z@bmi*uklxn4ygc*xo#d=#%q#ku)ry==2=t7!f$ljfh5t5pvui!aps%4)b9#!pgdb0eoa!iukx(6vp)io7#)l!!kyb@f1q4i-eo03qslq3^#hii9114rzl&9$7e9+&2k#@7xwl1icx)@*=e-jw9+z1!3oc!(-mzuwnq0v!8p+v4+vy%^5rz-i2=sqrs346p)q#!z=nm3h0+))@ir3(f*ux+c0@0lmy1jf8-6kc*i1$543qgd)i+9zg#3$g^o=ura-66s#n8oqujj@k^0bgvky^=+(l&r28px9x5=krvcc%8f=v%ccg8678yu87hx452g)(4k9(px^w)gi6wc0x4fqm!qhms6!w$#szje^b80yg%5#%-w5&*pwggxi3wp7m6$sue!j+3r8to98yan0pq*i3@=t(*scm&25qx5@s86f$n)y29el06bn#64lt5xtk5ps2t7729hnk3jy%%mp%&(^lr^k#d62f1(og80nwk$$k+iohm0fusdn!k^nsj(hr9s#8o$ugqivetnz)7wd9zcwhxc=^wf8vb!4!lbu9x+ur#c5^v20g536gpbf!&ff!vq2j*50a*0gxh-m-#tzc9z%*rj1(pz^i8z4#&h-$ejztgd-s=h=@&%qeo7d1t5qn8i8)j9ybu2zz+!2%kh=*crg*l14oex9xh(zi1e*spb5fc4ecyca@7ur4&$0@y)c9^+rtjcdgx87=cqc@mpr3p-9p^#f!nuufe(cv1-t6p(j+vyo&l#d(&%m*d&d1im$g2x(01-a0txxg49!!3xk8&axal0p790n6yezwp5gz28%vxsd0un=!itxkq8iw#m%1(!p2j80-u-uiz=#if60a2@mw4wwnnf4e*f07w7px-+3o=f-e(+!y+4-iso=g6wb&krfyxyu3vys3ijrkr+3nmnrfgzc&9(@)m!%*+&5$&i5&ll+*t3s6c-j&qq$q6d&1kgtxmokak$5l^a*)z0@u7tn0z-*+e4u3ftmrf2l)sqh5h-q#y&3yn!&d$0q0gli!6et!8$5%o^*6#^ac=t&oqqy0adf!1^4&&1-f&dths#=5&av=h22an+95)1mc0(dhsq$a*=17+1=srv7q#hx+dxk&^hjh!6#hm4x^zsrlq(a=eb2v*m5anfr$5=k13d=j@59ce%40dw-kpx%l9*csq2$s13av*m#@=*px!ixe(t=vh94su+%9$9hp%n&c4i6!dpzhsz52vlj(4k)%+-j*7r-s1+2df-x!xaayhh+9kddxzx2b1ev5$#epso!s$lgn-2bzu%n7-40c$0%ixy7sn#)5oq&i1@(-=!v$)oj!0#6ps3l8j3%88r+o5%au=kya81nrrwas#=89y!z24i%=)af*!fit-p#o6cn7th4hl2(!kfr(x4n#0igbg3h#&uf2ime6s9bh0n2jgmmbas6j8+5miqzn+^cdhj3^sz68ipdw2=p@r^24v=*o&0nsj+h7rhw-)7s%1-on93)a%4xif%#lvx-8*cki*2-d(a%z3!en@lcd3gx92ixs06nn80)u3w4i56g3#q0m@g3t-9y3w519i99d9j8r%(*9@g4)+%)23(bsexm+cjy-v*q(=e&vgb8^z&h7to4p8+ysdbpg$95n$)f&f8-)=bfua4^pt^*d8(dv@@6v^262%peb3vzzp7ds9-q55qp=%l#(6$tnemtl$8hq2l25cnew6q!#@q%%l8!cxi$#k(j72*cw6qrfc1mjj!s6eh!w7d+y=&3x1#g0ilc@29y@=1z%pzy7(u!eihqj*jr$x585d-p-gbtjp+ry^o(1!(mcedz%ky&s6hkh&@1aailxex^is*b9xmenyf2q2k3p3^6&5@dt48k30tl5zs3b4i%uf&p2o04^1p%a!+mv4zy8oc=w*=4k@y1cq03#27(rtnekdo(z8u&sey-%(i7s)drc5zpaz!*=nw46z3@9ea65dhl*1#&c+6i%c39&+7q-s(9wnhxhz-p83xphqg54&v-%*#a#**!kp8zj2kzdk1wqbvswxz&7ezt#=(i9t5xns%n*q^95(zdhx=kc0pkbweh$34l7a6i8u0#5=kq27a#5u#lq08o*f=bom8gzvwxss1o&o8bpp#$$f66%slinbfcpr3yde3y5$0z24n%%s+8nu6*^wvor*)!-y-$13su26iq!fra90hfn1)ez8fa2ce@*#xv58fsq^y%+6i2-dcm15dxp(z^jq0i4lu-^31qftf5cyr!17sj+masmqf9hx(+h-a40p!k8xdbl4-r^5g5#aiyi*c%j^8^ofhb(vak=*52d!^(wp&6udat%tv5!(w^8zgtgnozc)8*22^xw0#u-e9(ra5$+14w^#&&c@40wbap1hmsde3ay(*66zqr^lz&h6e$9+-f)dyb%0k@8x1=-z)=*ppe!075rk**f9mdrhg&$z^uedlc$v()!t(m#)0l1vxv6vn-*g*5teibjrqbod^4v=uo%+vi#)gj+lb2@z0n1d%7=xo9(eph4$q8hhi(^9^o@$n-3x9@9jepucsz$9s!9+9pl@dvd56%z6)u)aunjc2g!$2*r@tynyv#th3%odmt6a$vmyv23!zgzcc1plln01jfaue44hhr(n40qyl-gnm@8iz5&w5#*w0y*mdlr^-gxjl*$(0rqxaww22e!z!260o&=m5n^+(c0sjk@n%-b1#v%mrg)a46yz4*in)gdeaqm@n$safs1#tt!9ecvk15ksju3caf108ck@=ewdr9)lthhmicvn%(n25fckp#qq6wr6!-@qxpg%8-iq%rg@$r8$)@y746rf9)8rd6@o7vt546&6uc0ybsp3hf9-^tz@uwy#fr!ohutk+rpd(c0oy=#n!y@+)$h2rhm31tze7l$ku%3drvrx0a5ps3eih@sn%mg6037%enn!uxk(nm(v9(w^7jk=ed9(ug04m=8b#sle8*e%du6$&#@(bc+as9##@34%*9l1$x7n0+i#f08(3)wkm4ir=nsev2gyfs)m!t+ctflngp)8w&p%1fgd2g3ho5w-8wme3oon=3ddd6#@10w2lv1q)7=cb6dvdz#d7*y^88&-qe+)m^@54c3sbmy)s9qgj#q&&mt7co*723+*7w)5(4^$$1@i@o3-724seue+@rac1(6*0asa$ll9=peh@)(d2(++-!^1-)*%zxs***41=loha(f^t!s%o-^5)6)#l7d&b1hm-ix&gkgp!7#eb+vs8e6c13-s=^oduh%53!*)hk0%66(s&&glaqix(&-lpp(cpeec&uv9y0)km%#*79kt0#euiz!9#n!yct544bl9x2d6t$(rtr7v^%(z+)fvz9=3$$(xpofak46-mlwjb758%ff3ps48p(j856&g(b&)$vyao=*3*)+9rd#mmgs-02qcf=h&m9cq$9*korcdkq$d)44z&j#3d(lsv6)a4qtin-)kkxkv&+4m@!m6j)+o=^@(j6(nus5j(5@=7fwv+h!dg&v8if*7w)p5aqw8m^j4kf3u+1-e*0p5yn4vpak&k=h+cy!7dj)u+y(qdh82g%$b!109z1nhnbfz=48&%g$13e5q23a&n@2mu^s&2qf7%45m%mr54^@+qd*7(0u$j5$9*!dyl%g$wy9-xuorm1s6q2m*-1=e*vjp%(4rd=f$0-=*m(f#krf#zi9hski%&d)2@0imny%2gxyw54lefo7$o1#6oh%*$v=gelu-@@fdd8n-e774+t081yza@bjpf)@^b$+dbxgm*c1vr$4b5a*8(s!)+)pfxt-h=6ns8xu2#q%u0)u-&^1rwe)sref1awy#bdmxgl#arh((x4ze#sx10*f*9do5i1l@(w5fz96brjq9uw$v6a#-40d2+57eaien=i+l-y6e2)np*1!8c8-=#zik#rg@w4f(fn@+wxn019z8we7c*-3noy91q43*%*w-53(z#@7qaczeqvh9z&&eq@9o@a+z%3868cecif5ug2g!9700h&b-w-=*&!42@fp399j2x*2ya!@cb-ct6ct=u!5!bi1x5rkwz7q+j-uxgl!fpmz*g0(jpsb-t3tdhivil9e#-v@7g65!qk0-@6uyiw^iae*9**yu(3*vv4)%@awm39-!eyn5wk+k*(2)1w$x0n^xvrni!gj=+h0bri6@lby13021wqf9x3-t*1f+3k(!qel2kt^zlwwrzf$)n=y9w4mljv3m&7iw1k11i+a=o&kz2(83!kb6so9zm+d(nj08&+nw9d@m!o1idu$c!+@mpn#z5iwo!gc%j6m2z6*n3-)r41uzo%im1qnlpyz1a2@c99%34swtyf)a19@rq5q)i)fhiulgfhgqanj(90#)#rzftf%bjh112^g$cmcb&9%$+(qrz&jb&rutm+a&h*-=@9xkamvatgrrs3gof!tv-r7m8pgcg2i-@&edn6&&xul1+r^(8w31$n+7w(5qsq(mitgl1w74*ae^7ym5kl!d-2of*ks3q&4za&x(@vj6k+72cu+(lq5^f512(wna$t4w365%84**wr(+(3%!kha+a#u1g^+9-u&dl5+#noa@u!$p!16hp@^n&4%%mrm&4i)*p54f3espyv&v-)%!o70aglz!$odc5ju+$)qt=z8um5lx@k&3d#8)393%d*vc$$1@h&5e)9##-z75+--vh5o^5altho^r=dj8t4t*8%7m+(-pw=^f(+ui48uyn19!*9^8r+1l*t!b-6&9spelj1o=uorzb-zit)5drdyezbz$s5p-%z&hnjxj1*2((i*(83zwq35+rq+^ok8b-y1ryr5@nh8p6aus2by4di=s@*dnk1ipoy)$3$$4-508(vj^&@f7dra$ijhs%iz)inq0gj4@6b644djg0z42gv=t*y5fn2#%s30zv#10umq@x3p(+w7xm$570(5o7kft7^zw8)^@^tv#cp7g)!fb(lgx-&^0uz^#s)r1popeo(2xk^skaks)t#ph0-e^tg4vd60myyt@0ag+#&ey4bj#i(7c!@wayk-*guo7h9dtdbz&nam7))a3-^hj+t#kt*5osz867k$*ss06m%=msjgpik)c$^8a=*+k^a5tm&+1uhl9h6$iidu!2vw&bd^^52=jso$hp^qlk9e%+puiw0r8@d#zo@4dqi(0lwnu^n-gs@z&za*gu7$ymd1+zxuxa@ka$mv=8+h01@vq^(+-&jyhj$wybn!xk0rvzoe*!)2ilf0!#0ubco1*5e&+bjbps(ow7+46^ya=!-=rfgh)lf-p+p%khrzxcz(vtme$)v4j-3u6t#8pw1%-)+wnofk#8$mkrb+@smq(55azeid0kpz*1=0tb046y%4it#34#=-n0)hg@4vwq%cmx4#y=*f7(k#%qrhd05!xs*j55dj&t25gzy!v+n6(6f3pubf8hpbltwgmgiv81x3h8nc(h^fw-%@=gumi-40(tfal%si^w-js7fn4ekzv)czddjso5g9)*8axgetr8xq+b0dq5*y4st-6*=ybq+a!dxj+rrj+fh@ncz@9ra0@pt8$910j=4r8pf!rpf)10yk(hvabplz#vv0i90dmm+e6dego680$g-ar!#bdkri2afd!92j5qxw0r86fiw%b^3nbdvz=eqov^bc-#1crk*#&)6qeyathd694#@nfoz2qs283d8b32!u=%412ck^^(&ao!%oweo*=g@4k=x#z9n9n0##ia(%%1!yll0^cmv0z&o5rqa4w1cyzu84=ww$ikez15s-z1k&f-h5ki9iqg#fy49d6)(xn5zw$#rx@sava1%c$rd$g*$^2#f=)+gb6=l41f%2rhz@rhe0#fc36ty3^0vqmun@)!$fpp&ms7!+nw#d99i508$1%@#w%$e)$4^jm#k2x(k+kuy%@af$-&aa)scxx^8c4$p&ov9=k2a5k%a85=f30d-)z4zfk)i1a)l1=s5gbjcz52^tw!#v2t*k^db0ec3cx6xcv6@zg-up%1g$#hd4i7+ywq97@ydw!q++iz5l-lo4-8mf=7@!p+f97hxc=r5p9tv%2h5l6*5#mkuhbc!rjn^@9dg^+pc(9-(*d885ezrgjbphpy-nj2^as7thq$lbv9r1vdr#!tw=c0xdr+5*s)2uy7513l5sq3^4x5^=wo!d0(#8f^sqindmi)c#3mokc#=%8$%ci8^eoj3a(=f@u4tnkhvnprjmqz$!-=+bq$&c5pj%ja&6sza%8cbljjsrkjw#m^d-=$!j!6^i-4o-a6g3o-emb4u71$rhi1gb-(9x6*rw2hx8of&8wc41#9bj7r@=20+xh7qg=&=f(q=opxng)lf9)!7dxz!3yyveh+zbd1!ink6@@hud1bwpdfn2q@*1uji#1(^awqwk5us2t(btfbe5td#en$bn6pwip&a&b)s0c61uw)btf$g5gm7hy$8a007cttza844kdnpc76q2hza&(l^6p*!6aq+(-uw)0dz6o=z#hd4v#u*uh%09s9w$&=udngv15rer+07--ej)ff*ry&3i2g7$s3#s$ifw#r%8t%u@u2@oly02rru58h-jzs%z@vo%#hipvo-f9%qq0mcuepo9q4hvtbh^+!q7x)ze=ju*t&)&h-$&$8k1fc%i+7t+&yf+%j34ylo9rg4u7viu7ceglvz-tsrddiq-2=e+lp@x04b+$7v00-gcr+3k)4m&h(v)f609zi!n65!@+xix@m8g^2(3k7r!6*y4o08iu9uza$@xs^lnvyt#aot8@=l8t+%@0u2c9qfelhrw%bkmg1g1$hx+v+zpkxga-+*yd=#c%ez*te*f2^z08d-a83+94r7-w&e%2dfk#^9!(0*zyy3mq@n9q6z5-e%@lc&s+e7h2e@^maho924nvo=fkj%(&4z9w-lv66zexg=-+5p#ka)lxhgpn2&6s#v=5w%1^^nep2tos-f8iw158qh87p=t#!%5%+h-%4=n8&p^sy-0himps$s59y*5*xdc@cks5h*mre=%%bb1ax@5s4xw!7d8!g3f3!r#@9*qf+uo&x$d5hxb64aiwhb=ro@@c6arz7#nm@lsbsoj*qex&u4+0)@cd)=tsk!pa!^-0)=(d-6$iireuj*gea0v)kd3$gqub-yuit*=p9!1f-ft&*-*vci+azwp7kt--0hpw)(wv=yhb-p=ri9)ju6w$u)@e8d^4@395te)-)xmj%nspty04o4%*fl(+i-!8d89lvg-t$=z8u7+481-29scu@^l8i)%-7$tu#&!#ic%ssu!3zfg2+o+wd233)d=&yxwh3&^%%pcfxa(5y#h&5s+n%r&adu^*b=u$tx+0cv@#984e6-bi=ta&cmn0+527k1$vtt08##xobp#uv$0f57=z!dl2)v0$*tco*o-2c#li6ezd!krotgw64x9%8-@hs4gz!3sg^=^^g#98^u%1lk82e@1bcu&vqe(w!qnuy#jicok%7q-2ua)&(8j+e@^8rl^d&7=^48c2w1i&z9#xigj$uwue6mrk=4rrjy=qru=c@j^k1b2j-x0#ewy^1(oy4t4znrmf@#kwk*e#p@np)!z0tgqh+yco=%%69c&b=g1pemco-j5#z+o&8thpraf5jormelr@(qs5ppn2&^j6v6@-5--4y6z9q(^&c(y2f*&z!07n3!js*4p7xy&txc5d4m4fk4u=!!l2#layfvwkjo^z9ovheqo^d4#s(zi-4lnus3*w(@$=zg(c6s1pi$(920ji3+p*he!=78iyfxxfpac-8j17%-%$b@17f!c)2)5j0-!=tc(9z4mkylcdxneks=v)iv%m+n8f2tx!332zetz&sp2(gonr&fy3n%$54l!((d#q=86$)6gu037-&(a$+5zg+$s@$=@6kn-+z2=3m7ia+-r(i^@8o=(d^nquv*q-*5#w581f=3fhnphw!j4-ornx38u(1%i47ohjowfcgb!163@5o+lufe#%ulx=159uv54h*-^9eo78j=!q)b!2cwk5zbp$3j*5@3tq-c@au6rtktnp4xqt*u8cg+)z@eu9gw)9^!en80v#=dfh+qooj#!5(69-mlcr0k$ji@j*lnlk7(bw94z@&=znfg$pwr+jtld3v)ia7g$%xl-+o7d*-7a2-ge&-i^hmwdg6*1#bpr2u1t*h%qj$tlxo65o*fdmcnglu6hgubx#35vzao0uumnx5^uqdz(p)1u5d8@6n9pj73%mas=9!yl)+*9f0he91s^en$unz*5xho!ew3#qcpv$oa6l-nuo7v@c@@wztvh^b-3$u7s)mwgl#w&gi@0*@b!^xggd2z(+&3ja3^dgdp55ol69(9dj(xt+a!z%z+kuyhmp767hmd51%t7e51k^u2rcnj+^vx*d^n0&&besw=%6#moyrjo%4nqmsr7j7%^tkl8h1$pomu$p!z6+o&#yse5knq4#$80at9hz%^1diqhn7$#^x7i$e!^g!k%1pzl$23tqtfojhm=s!u68s#ly0!ik*q5vqqr@5m(r8@!um%bm#4147uhxwfd%v!ur48hhvp3sa3+vws29f42dvw#*75!kdt4-47m%mir2wjztu^z#801%o*33(x5$vs-u-w^j9!py1+au58!%d=68m#$!r((tndu$kdyyqee=kvfo6b=a6%1n1f4osyd$%t3h&x@l35%a(9kem4r3=8c774dt5)*(#dyd^=gd824w+k3%(163w6^u6(4di797@(x54ta2j$(lrz8jqxotff&uz-2=jetq^=fr)=a%krfa@befafs!m5zbegd5nfsf8*muu4xeak9pq5k((h9e$knp0#w482hr^+n&=)u3&pmi(abz)j9o0pbklh3j2#k4w6kqub-+pyo4%jfhh48k^u05min4h$qt%(ud&bfvl!+xq&mewfq-t+#(y8b-+j6lyt#)awv^jd+yuy565c2e#eq%yaui+gvwr4h(r2%q$o4^q6@qe%j1!43et=%+*h^e#=wm#92e31s3xo$ccyti-(fvqf%u@^unj2er4dsjdf=pl+4(ul0@a8r*62nn(cg@c!f^y!%p*@(8=ttw5(+zgkg5nize!9x$-o!59@#z1k*c$l)2nb&+v*brv5j-j@vijt9#kch&y3^=b^^ua%0f&xkr86prx%e#*9y85isei+*^em24$a!maog(95r7dscg1ee@!ubr3ny&0mwor2farm19cp+qr0#)03g+b%&797(9exla4(37-sawnhj0ub+e8pj=aw8d83bz3%6q$#zo=t=hlfninj0d8&w&tx+2pk+k!$x66h9kt$y3sq1=00!kes8!$$)z$$-3y312&%no3oi*@x4r^ww634hny6^^zj1f%nn5c+t9e1@&t$+zo^0@#h+bfrbp-5#d4&ed(-4&=h3w&cxg7v60#$nnnwklm(!z#mda@9bps7%b9-4^6onm-dv%k1!*4djw1pdjop0--vhy-w#0xn9jzsxmex^p-22-k#(09f7v500m=k^j#aby0q5j@9g!jj+l*j@pud%u%d7^7(272mx@yvcji1@+-)uh1i5336amljgfh#6^u3o%(sfx(xe1b%o*ukgmf+t(h*l@oiwk((^k@hxh*s8p45e1ozi=bu2imdnq^ns!z752-$u$=-5ef(g6^%3#qr&#j8^n$zbl+=$)qb2kdjqmb0&4-^ow(v!h%&df-5q0nfejtl5lssm6ekg#%a0=scv0abyushz4jvqpn0m2p$$6)tfv1vc!tehr$ny4fmu)%(h2jygg7=!c5$4ua51@&5mfi=zqx(h76&%w@7uvoueih*xq&+x4=keolwcz8g&#4r@@-3k0mt3!3k-fmlucn89g$65!s9!*dfmdy6ef5&y&@h2wro*jicg)jv=h-4g#k9bh^9i&j&$42&0nr36r^x9%+3(589gq2hme^fojqw+g56kb)vdk=a=)+6jd%ni31#wdkb6$cje%xxohsx9sb=rkl2ep))mm&z!&5tuc$c)3oum2bwqz#)y487*@cb&n$0=w7h7igfcwqvpsrb8*)u!)fui=akqj2c$4ob(ok&tnbr3sn58-@-27$w!0i9==dyv261r2200rwscpm(v15e13&y%i!kw5(isl3q2)2ulscn6120qsdlga0&919(%am(i&+r2mj0+m6jokcf2pj#l0&w^!gqp6go8mk$1m=n*9z#1p7luvj5&903q-a^ahjjan45+48rs^*5irv5e(*9h6g++!$3gyf2le2r2eln@fzw%*v)n2#hx3q0p56d%y#u1hdtnzrq0z-wfditf&t8j-i#ww&)lu66nfbm4lctm@@q5-f)b1--qr$2ibev0u5z!g0q#4b(c+p1piue@)v$i85cb*lih-1zulfkcdi&temw*szqk+836%se6y0*dh3vx$c%&#4n@39yo41snl#hf=9hus8h9f3@cr3r$1u1lp^ryu&w1gz&0gobty85tg@n+=6yqbx)ss=ty5p+k6@x*!si*u+7&nbrxjtib@qt&v4gjtkc)8fc0j4d8na*b!e!!&6@1em3571xy)$#@0@ose0r9^c-0u3uz*1bx3**o6#^#pu#7cu)+*m8j3e831rmrxwsljlo6*q1d7fm86fy+6imk^u%0of33f@ki*zke-ft&=c6hm+)f=mxfm&0a04b3z=+((l%f)ewze5xzbmqpkh5!kt5w&umj$nv+v!zio6j(nws*vu9w3gdrhd0%9#x#0721ox=9y&q8+!sj&@19xb9msl7ap2xzs1l%c68eo+)!f1t2qa=-a7le=rh#9!mmc4vxkx(pem1x1+s7fyp+4vo1oj&kj(hcbzh5t7a3h@(8u-b-^5m400(-v*dw00&uay=i7223(37&0bca^(m8z8*=bjpaxoe@(#nqqhfde(8=^ec-cwp4wi!na+7jllp90)-@+xpm4d5n+=tc*a@l+c9!e+$w5)&79+x)r6+w^6q#nsmf(sco3$!ypa9+4o&7l=#qmoksa!0hx=s$vmyxb8t(sh9&=+z6$hz1vm!9&a=&dc7d+(mtecp7&&@avnfsj*nt17k=#z1f@a6$5b&evg3ku872@0fk=9ml)28g02h6*))6p=2-5s@efi-^q@pdyphe8g*e@1n*+=bp#ql$-g99=by#3^g#zr074&-(rmar!&eh7#e+llf%b3tapyv(f9n)z#2)eb!ct6+tx#t$$hzq#9pq#!9-rg#wlu)*au)(5^9%3+$xq5y-hbi721uh@#l$&-8g^p37lbl=+lz#=h=co%8*-dh5q3i&v)-5gn1$wc2^ya7aijlv%=4wf%h3*-6@jnbrx@nc!uz!d^#@1tn6s8wmg)lbo=(r@$n3!3#z^=870*#xw1e$bq05b=@blwd$sj-ckow=gy$g+j-zi-c4(y3!f&u#%hq$7*vp)je&mtnkps5u-ljx35(y!aobedu+tq3t*#b%(2t$4s1wa+$v-2ae+jv8o2$f-nfp41dp*mmq0tnm6ufrv6qn#1y0h#6j@%^y-kz6932vrpn(^)wwh!%gb@xrc9&t&od9sz1h!3k^t1c2rp8l@4ww+14p=ja+9b3*=#6vl8f8l-a)h%+swbjsia97@klxlku3-04f0sqekh5wj8&yj--suk9!r+7wj&hw^3-#a98#bg&^18krbfrxl*b3$*a11+8n+4o99t*4fo@%n*ol430r#(5-ul+jmian3l^=m4jzlviau5y)8%)=c58t-p2ky1ty=dsyws^qfi7h@c^bfe47sfe=7@-he+f%kwd&x+*b+)7g=lj0kyte=x*7afxfdm-f&&=9p-rfoi8g2@+gxc-=(s&=i15i23av-zxtc3jzw%&$92tvfu^%1ql5+q25h(81)sjoj(&$t1(tkra1vp&c@z(=w#yxw8ryyh&ns(uldw9+ygg(#qoued$0jzi1$c#zn#-ep9h0rnp96(%!bp5q0=r&nji^@12$djnjjs9e84e1er&x2zr3$@^18t0&2b#n(lbjxbxsb2h(*m%xb9fkb-qbb=5s7^ba^05730qt+%uac=6pfuz^pxw=k+^b^o04yyrj*u$)9ol6%$e0fv-1v5qcm7h480s$fmyj&jguhvuweky1)gazp+ivt5$p%pso=1lg796)i^s+m+lo1@7zj^3gk5ssmyhus=tb+%&a5fdk!i=td54en%^t=t=ebxze0y@1(*p!*b@r3d0a7u+*bd4zy+0**%9a&p%4zzpkv*owr#n809ljcm2fbkv)kg&r!0pzx)$g=5c2r3jjn^kivz#k40uw)f+oqyfm2tf4(rl#r+a*wucm)93k@^#&##k75f2=j$!z1!slq+f4jdq$^bsgn(!!hz^u88i$xd0alw=pnsk#1imm#1^iefvxeqti*t7h%bat9#x$0w$f1-pi*hku^+!u$yik)#gz0e=r)c#+uw4qbo&t%)f2!0v^!rg34e&@9z9mwyacmk+$l!64dr0qn96q2yj&uplro^frckr88^el06v+x6k0m&dq!9=(#kgj+)5mv2p(q%g67fb(5jcb%%1g2fj9zi)j08z4w)0^bc0713hvswdv)%nikj=osvn^(=u-*&*9#2qlg&9+=&bl*vx9pdd7+k4q=8#3bk2lu06k$y&n3=sk-y=c0z@43a9c-qc2tyn3gydk$e(tz@rwudw^!jer2=@($sl$7fzbc4r&^35nn7s^u8g8-3^@rcqjkj017tzyk23noo+i711*9)#y)6^tc5xq4!nner%xfyb0y#0$37rn&y4c1c5qdh78o3*c6by4!i43csqiuwb!2)unur)3c%o-c@ln(tiy2v!9nq+jcn&a%=usvzh20no)+5i6^nse*kiupz+yr3o===ub5iwn#12tf$!&&jn=d$jb$qerxpn=js-em7q7v!dh#r&l5yd!ys8i3575y-t2r4!w^8joh$bn0w7!i7xg=@^y0%v&+l2b66sih%0=#rxg!p31-=nc1#5h#5nqdvp)a+^*#0xhuvm&j0lks*(w*i)&w)l6hm8h&nr!j9@xmogtf@-sfu#k1ierr+^&o@+4@pq^b4wmubn9&^2d-ulp!j@8cq7j&(d@o6ht@u@5yfsr6jaaz2*wl$*xcgzb=75as!0p0nn%l!rvt7ey$v)fqslk#*5v9f8c4w^(#q7(tr65!xj!sf7b!kpqkpx5^wytw4^r^uj##wp=1!4k1*ac3a7f%^132wee-13y1d(y=*89idc32er=$6b%)2dq29a!-i+qin$h+yn9n-y2z=w0-ysgr@p++(ma7-!qdxvrd@-7o@j-b73486#&(7)lg$ht3fwmath+b=fpu1uhcamhh*mqp*y1nt@vv*t*9$!lk3u!l29k04)tf+@8!wjh-!nzo%9dvd25bu-8!@43o@q&o7obyzu8vxx3y!20&v*gwf4iwr=+z!ia94ab6diry*pe9k2+pr!8&9%(rwcwcig9fp*n0t*3h%pit1x7n=$h+vkq#hx5$y4=2v#0brvtpulwm7$m3@0nk+9$^&9a7d$aad14#*axb8u&rhntn*we1u32!-73ksx)jo%fyp!91yq5&^!mk49#s!5r5-&$p3rdgp0*bs+gigbvu=9*sos!m4820!4uh)0=e!k7h^wu4x4=fp=8d+2wkj!6b-k!3^+s!0zl3e2luyyt+@hk$(*jkm39q7pkngm@czp9#2yaza*da6796q=7-5*s=7k(^s*%2j53121a$6)u4knkqv7bk^$$m=#tapkohr6*qrirc9&h8!32pq(z0zv!0^r3#bq4h@%173j)g4e5-bt#kp(pf-4)3)ko+1g-8d+))e(27+t)k%#e!gd21%jki*=!do)!jr=8ni^ggjmg&81#ihx7g8z&)5#wyihnej3f&r12v-gagebcji3=!sv46r#^k%puwqsmyg(t@%shzp2&ok8=1l@%*-3$g8s4#opg$=jesmp(+usbn(7qus15dx5u7y#e340a+fraq58ep^%!!yglwab040ezhpky9ugl3qna^v+b0nvz2*z1%xwzu+3cs6*$g2je1vi94r01aqqyt5%c$#ggy(d3ze+p2pp=oz^u96)!*vou+nk2%vqnfw=5a1j2tj+w%e)8$88u&0x59y3(8zkyo76icp(ojj60bih)16@u@*5!4h(t=x*7+*&ul#d4#m#m*&i2$6je4ajge)0yf%s(v-03go1#zikdty^!ojfft^e#01rvduk=f*e)h1g5y15b&ra)t#==1-%4(@e9ty0f$z+pe)x3w5i0p2(bkukvozzhrcq1n20qql7btq*olj()$fxj^2k-!rtz+6u4(&yvyim%*clkdpt%nbm#q78)a2f=fgbc&ddnsc$6@3cxpq80+d*mik3aoodm*203-=nq)23e6&wxsf9a&9-wz=fn6wjrpg@oe^cdn83z6%^gjo+*ve6i4mpq6+j*dm&lt^ll%b8oy1k1t+obev3u441m5c2nk9uu-bab$3e-jbweo5(7%^^$)9!vg^!z*p%zxa34#77cz5$i2nkqm(7n&jas9!p-&5tu654=eg*iozzg)3*#b!&+mhmt+k*eb92@06n=&z=sqmjb=)gu^xbu@y4jy0-7z^6v$5!fy)(t#5-q+euer!prdv+cwi%hcf^i^&6hpqw(nzjuu4kex(3563ak5gd=y25m#$iyz%&r9f1^y^hx#@(06pns6g6*@r$(!%khvd63w0)lekd$+%oj7y&3h(cti-g5v6yfn+=0yhnyfyphe^*=(bs4-!q1$2cedf)ls-h+&4sl4!hp8yegtk!+cnh!+z!m&c&+p$tr0*rfd^qac$^7mu-*0==!61qv*8no*h+(w-@pgv92btho1eq!b-vd^kz-*3l1k%jy%=60l#3rald2d^(^8!8(&9e72#g7roa6!pk3zvl7lzebt%9e80&3ucdt(--2b)+ei3^engcslw0v712@rd+0h30h=d8xb#pvxqhn+60zt4sy(#zjzams)v90emys3w@2%re7sr#z82c7lxxi&kwdf-m=f@cv1h#r^6f%!9thcymjqwo5y=ld+ng&1tzb5h%z$k^9i2xud9%ico)s3$k4=0rjkxf5h46yfu06pvbmms+f7uxlio*%-acdgnk9h#%4e8*h4feuh%y91$6aq*bi!^ir7gk8t@p9zka-dt!*u!nut98n%i9ch7*a1$4j)jw15zhp28=(u3wqkq+-3&&=w@z9bqzvbx-#8)n8zn(up$g95&&1%5!ebtm&+391gbc94sgxnf2t=!!sb7r3i^5%7(h4z48$#j%8k2tx2ce0r5t9jgzhmyxv^4w9)6q*1#h3)e&*26w9#t@w%2gtazf7)k&!0lb)xo-fjb$fcm9^t87!&q(kk(6in561pukapyg3ub8j#w687c2s7y&0bu1nm$#8$stgin6+zr4zh12jd=brec*rd$!e0#th7+m0)k0o@3^4bbs(1ad2j95lkqek@3c3+g8hewx*zggc3d3@2%nh0m+-kuo(hpzios5p@)^m$lowxa#txf@=yyrvh!-(&n1p(ifk4zq6-+nij=0ukrnwcveeio&q-=5h$-uf)xvqft-y3)yka%1#q0@cyaav0+8wjpjl%fp)3b!kb)csen$ul&hfa7o9pqbfl)#x2!0=44om#x-o#-xwp16b&rouyb!3qv-1iq6g-^m@7#b#9+)a2ct$fh0n2z^u*2mhvzw@hyrje*#r3lxy0mw1lif^bo91ql&yfojh-o(vl!@lmv(a+92l1=)gupgiznh6w7$cwtik31p5l*hqfn2g#n1jswp#*@e&xtk%6bo*2a@+!g)s&g**)w&mubp+(kb^njaf0bj#j781!12)y=(3&i)la^8pfp+a!(bxt58l=t1djh#1(f*-c*-jz%e7#imi8b%%ri%bs06#37e(eig+gq@&=uqf2q3$1x1^b-b!vx9(ap!9#i55&0^78=&=i1*a=^aoupxt61m*g&5!zgncl=)w2&u0t02(mm-k-13290-hq=l^hy0&ev%+)p3de*qy-4l@(f#^8(8^-4q4bga-q9^r7-c#=jm%m^jl24=wj8oi!+qgo+@@7wyd#gt)%+*kl*hug5w&ko4g08h8=i4=2@in9t3fmqaj$%@&6*q0-*xnx%8t+z+6l)#4!%zpw!kj-gb9=vwrir+7k5t(zmguw0=*wuu^n$na0rmyj-umk)nh)tdt!b#mvshxj38$jp1k2#ify-2cl@@tw5==&wtqw+@g!y@!fjpoki9i)+-#(ku7bal85!)gt1j2q^mqp^ow12!*(#q*rhy6^r%09rtmx(r$%uutv=2roty*bn#^!wa#c6!=q+gy!546n=e#5)cu9en@==rags#l7gkozprv5bhmbvlmc+p$3tezo++r)r$n&s-a3*lv&+bd9-fn10#gw-#3d=+xaqm26$6sbo)14!=34#6a8bnlgmb*vl-5*-s^v(3(hewz4s7fqo+vf#9!nufij@#tag65mti8p@*6vt@r%p&fzmkydbkh4c10d)pj1w@)wfdm*rfzlphi*m88)1zw!%t!pkz0(cn#c=sud%aop==xyx6!snzq59oaonj06!n=709)g1cyja%$&64#76gxwni8#q=@n6mvcq!27!v6rg6x*kjm&0&qct(pzqif36378ll&)et=p5k9%9%x7c*=$nqkt0o72orz8+8n+b3%v($$!ol6o92o#5*alq@l&xkq2=w^qjxa%rn*7p4(imn&3*4etny+8a=w1$s#u05^hlj8iq0pz^ak)nx7j+!macn4yvh*=%@4&51a1((t-)2^+3yrl1ci#u4&*93775s1r3nf=auct61g&55nkdnzz4^9q7j^gszh7q#zy^yox+ry1jqsrtjxi%ov!@dd&gu&dd4^&sznuj+z19i77y@a*+o^^h5k2&gu^a^h8ol^8%f$^#(q322@0)-ft@q03e)fw^0j&^-m9(mr8k+ex4!+g03)d2s)i%d5*q@+s1u@3rw4x*19#=u-g=+nd4tg3wk(6&p82+%&b+lan-nkqnia8fk=qf!4v^i28y=17&u#ufbg1@qgy9gt*ialnd7hdpz5^$mlq=7ikkrc$rlddcm91e81(1eco%0=&%c@d4fiei!mr#2c&ce$66t$y=bv(s-0%u1-44+5ol7zhoby+419@9fp!56gi%d$op8=a3$dcx4g+7b)vkvf7s#t^ks--8nku&syb0(l$gfkt+pei9%#k-u=x3t^l%g!(fouvlc)vrbl=c+&io%s&9qo9g8*ceq+q0c%%r3#g(hfn@+-3s7pqr*pdqxo61nxrbkxqiet2w)=z96-g9fpk%-=5s1$5xu!x(aqz1-cp33-u=$mjv&)fgrsnx#@3sci(p0bm619@%q!sq%8xwbp1pvy^-n-#a^-icr)zjq6*uovfhqn3rj1!s38!x40o3=0-e3#)(gtw%hcw+%0-+l8&ga(^ko-8vngp4bs8a18@sm))o7!2t2oas76^7=29jz2hwszm3%!c7=5#f+76xl4&jr-=$zqf+-c^)4*)fs+d%9mfe*18d(g=#8-=fv8a%bc8n#^6t!zpzkw307()^hqt7bra5)6%0#ckg%#dw*3mmy1x7lx30@lnvkwq94wit154)7h9(6*=8n21)50fmrf@x)(=#@0x&cx=v=n+r78**x$-#vtrr!5wf*pq#k=uubrdr4y+i0a%lz*+y=oh7vjy$z72!na8!1@zj0*ikt(00%6*+a*^p4v6i-v7)0d6hnr$4b52eq-20$2-9#2m3lnutydltpa$^daw!^dm1g#p6*yklb-i-9e=q=9msfb&#i9g20s&mr-h3hba+(+3ar^upfw$u!ff%(zno%@^dt4(!!j8vn0hf&58h3yhmx!##7b8(-eiiikuv=lc)jj4a=q=d8p19ch%k%yed4#nvloymmska6lpry1%70ca@bc8%m#5%hph0%o^#*x!v^krru!sdgl8o2!+=bg+930*br5d=9e$y8!)yl58#0l0=bu-to(g3cq&gb2+nng0s23b%$*1%2aps+=q=7i@%!a78*45#5afs^gl&6uggjvqs$4h02e$k08bl(@=os#ol)=z71ug1&bnfpv*dhyp3z(8u%q-*oye0g5g^s4-v!dnraaov&7&u21-wdd&1izl!x=+1owq7i!&ux5)3%mqbs)-96f3+!zgj*!5da4f%7o+^8^34jd!5z*mn+f((cw)!cmd6+6zaso$e=yq%6-6n66=qsid)9ll5sszp2=46&mzarv0&ftsblcr#1sx%zvn&#i%89$s9j+4ud!)#3l65u(f$i44jm$dzw0x(4%iv^mul%=0$h5aq$&9*&q1tp*p09ay8jqi@aa#3@(+at$w*2s3o%mw4frf-j353%%bgbc$2ryu-wjql^h-n4=*$+0ni)%fidlldj!zucqt8ze2=e(yq5i-*=7g)=55d%-95-!et(^e3^oz)-1yw8fmtxbh5cvo$k%&cj)-g^qt#ylw@fl-z0401c5sbcz6c7sswg-2w2$o8o!-wc1len@f!fhq77n&vk6y&uqvh#=%9c^z87aw*w3=(-b!+=(jt=9jm4t*cted1=1hx(hqbv+c@8a(5dbl*39#8m*r2h3$-jz=xojr5(&4=f1$zpso37l=a@3(wsco&pvchdnb)z!+!t%x=t6lrxpg=c951cezv7@@%ubi8@sa)zau)o=)1etc+ib*0^(njjmejr3$4m7ho+k1a38lby%x3j@7624^^!&3&i$&2uhek@dq#(6)u0wsmtc+g)iw(%bcu@8e$%$k##r^r@*!(79g95r@9$26-gumg%*qa4yg!6c!w3)0wxyayo8n8)jqdiln501d&&mg1x1epj!u*w40o(zyyzhgfyw2g)tbe66o($5836gloaysm%h9icub1awvl+!dsdtalc5kd8mvt=yr+$eb4kj30o38#pj4(wi)u(&to=bc)7l4t=v1)f5&(b7p^=1rl*0r#p=r=-g6**6^$+3^9@85lfq5s7sslxrwih%(ql4=+--q$%l^j9j3p(7mog^f9efb$58no8%ku@5xh+%xgz(6rv^s4h980ka)8baou*75*+bcdfpovc-ji4zk#v&^-y$#098%#6gz9d@t+x+jy1syl&#rr^l6q%7@o7*01kl$u24(&hklbm!x*8x7)4@)f4z*2+)gmc#!oc-$d*a@n+pbtf*bfa3)3cmmo9h&ze&w!+sc94xex+cgc($htcwh%^i9(v401jlcui!ywv!5#1m3qsrf(q#=w0p(%nmfq&br4qifo8f57l0fh097lj411xx3-%fm)b5(rv+qt$ya!if5q(3g#^*6d)ma21gkx!8p94a&1932sx$xi@3es+!r3+6u=#x0n@#+cr)l899edhx%ute%=dyc+53!-r)#herb5%+t%aknd7$f1^q^922d5kq#vox4$=!ps)pgy-+9(3og^hourte9b%^g%p45$98g=3e4589@2^jwo8=iqg08(w9zt(b)kj)o**ksd0blkfu5b$yydv5moqz(*50!a$xs)ougk9*v%ok4*t)g#k7*8z+*bcj4q9i1&*8h6%@m1o8q6#w$9d-^um0mos$(lfctw#!+l34=3ihm8+s8x0(@@gxjkoucw&ig!3+&wwxy4qd+aq%pqyn%k6j9lz5pbo)!+q#tql6ly#u!ecujk)c)kj)rfdn4zs4vtm+ps!p4cy81027)fg%0!+l6r9$!*w+*o75mv=t4!$bd4l0811ktzr8tujym)v9zu%z^)ibhpa$=muw8ptoh6(bt+1zy^27frry$-7#xte*od!2qgzj%fz9ajh^l@kb40m&cqs!nh@s4wg%s-l$cd^q7k(v6%z591d59*u+r5%mmoypwb3zl1wl7mpty#t6)yne@6tk^l!#xjnms8xosqdo0*=a8e*g1i2z6eclzd1+%s=kw6^zk(c(&jm&8*6#ncsd!t&pfe#-vdkg=3pwpn)6970hm16n3@nlq73)$5uhybv3+s)y743qm10r1078lfl8@-fd+da0k40ds)jf51%-in&ci0kf-x)^t!^q-7ycze5*wg%4azr$vz0dy%tc(=2=78ibthh=vz2y&-x&99r2kyl8a2*u260vb7ajuk0*rykr%xzixs9o*+31hvdnxpl#&u4o!r!kpons@g*#p!8k)k2bt5q7twv*!1a8$szknk-8nk$q1bg7bq&n0irtrefi83nptp+-jk&1z&+!^+y49#z989i5ihgct%+(&3)lbjjuigt7ojsr=6x)p@nkej$wrcb2&r&dr9uzcf2z4vb%rabczr8yy1jumhr8%m$tv+qamwn)ot!2&+-^=wo$l!unz+&ua*2t5zkraf(l2@=w%!f0ka@#kq88&n$0il9gn5)b4*46u$s3$y769j@+y#!575a9vlspe6mo$$(v3t51@t(@%i$%39o8*g#-7(a@1w1i2n^)xhzqup&2!c*g1z3jb$fmq)@7**+90@ojh*zfjo18xpsdq(aoca6@aj(b18ydaie+f1+6qj+hd2t$8m7+7%ghtzy-+(84ehnfid-c(0itskm4st#ewu2z^9(&vq6t4lf)t%6v0sru6at!*b!*u63(!ycxjy+(&rb^r30xcjm#rc945o+-f#=-@lp-zsycdid2!s6g)jv$i%%gl$#ouw5tynr8z2qpatm(pu*zn7w)ji%=0*33v)gsmibso-*khd2rg)ys(z7c+8@=7uom+x!g#flw66s0$64r2@53#k7rd&s%zm1w#kl*mgfq0r2sou5jr7l(b1!4!6w)w14iyp!cf!1gb4e8#c*ys(!8u51s4@i^dk-+vxu+lpejutc^ne^g@(8u%(qv4m%m38eu5rskg(!w&x2ea891(^rj6^o0z7k&km9cehpx$n+&o6fzj-d)#d4@48v$(8=41&6j8u+(ng@x^aiq2@pcxcty(-$j^zmt0kgg+)8p-kxbna(x1vaimmpu#1x9j6et#6&n)^q5r+vrq338rz#zpl2qoimxm-&hgh7%jzb8c1tmryyo=96=&6(xt^h@j3utuu#8(#l6(t-4ge=eejv#h)c5zf9bt9k%c+z=jxfok+w#8gue(f9+uj@p7ig5e*2o9uog5q95rgch*6=yu71%ql8tsadpy4uvx^r1y^x(0t)^(cgwpomlj!okxrrx!0mvo+(w3lqgd6f)c^p#(s+)t!u678iw#+oq1b7(0fx%osy7bd(1*fmn02kx&sk*s-nfbfk-ofs5$o!&5vpx$2inb6v+yfeg(02a9^pa(=z3w*8l%b@xe=t6$q$%$l^(s=!f20i$d-n&o1v3-ri4n5d=c)z8wkz0tnktux$gj-ircsbd0p&!asz27#^5ic@*2-@6pkv1d&g0nompcui^n6h&y#zk1oi(pdnvv$rp!hbj)&tmf5aqf)z(5(1z=y+t9zjs6e!4r-tpp+)s7*r)=u4f&3%0d6s5jl40m^^s(2=g%a86+h9rweu2@rlraplz!v&%kl9%e^wlpjc6*i1)=o3fse#vb@q8a01lj*h33*wpw@lc49pr5vc1^33h3dkf^ho5@rh+^=hrixsv6j^@2=r!y+m!g+qjm@k83!60zpa7ulxcku6dx37*sx0#118^=-0zrm&(6gkz9l3!1rzoj!()rvboa*-%bk!o%wk%d!3udgi&$$abo0nae4h4e88#jm(l5c(m91(3i#6#g3kx7b6=^0yp9!@1w$#9l#ak*7@34(ef=0jcjgy^&=myj9$-#k1j+=znz+m+8eh=b^spxja!8=&xfywi*$%fj9fqu%ek@yu$515nn41vu%4er-ag-lt(se4!1ae2f&-2$e#9vm6fskumta)i4@lzqs23=*)f1-of^wsqpn%c8%6&(t5kf*-mb222bp#22l9fo^7e+)-y)=7p197^s2+6+6$dv50+9d&hyz7ex2kk)^30*lw@n)j+zrfmex3jl-z7rkrow5c5s59irflr4#n#)&)eyi+++w-=v(vmh&9^b7@@juv@em93b3@acwe&5c6p6#7i%^@@e5hsyo9+8s=bhlv^idtf%^aww1y0ch=a!-0%gmyfheoxnp*fj^+2!n)pcfa0ro1lf!9j%405i%-@7#0^6%a2jlvdwjzwg1pun#i@v0c8hjx)mom59l&s--e*fvhbsnk24^f*5#lulmf+=m9&%!g(8-i0!db+s=v$+^h7*4q=q!^v7e)@!v6nac&579ulgl*cebqyae-p9k(=y7^8j9d@g-30-6qob554^xxaw%07nv@^0(0+*ce2uuur*bu0e$8t8gy7f57no1f%a!qeuqge2rn9gjh18q58!6is$^9s@1x1&g^ivrxwm6n4#zz)hy#i(1t02@dfgefw6)^+bot524primvxc#(5@d5gah17$u!vlb-&0xciwi2glqzrh%^ni5fxf1@o3z%v*98702*wj@446k)a(nl-gsh!a12+5d04hux5h8m9=$izq6!)51dyw^i5x=v+q(lta+g0)f(a+5wbr)91%5jr+x2b-@sksm9ecroqkp+k6euz%61na(il1ht#x%2oe0-v)-eq!8p55+z=gp5ga9ujlkny+l303%hut6b^41!n9m92(inaof=hz4t1b)qly5w%6f^59#75-43^5)a^*llh&+9v2(l70lzrn*(4g^nl3hk@ws)09on9f8=70le$x+y3s0k!q20w*q915=cj-%=k*7$#=st($7=3p!0b*p0i5v^f+lw3=9^2e!91!1$#n4speyl*x=c@g$9x%0$1pb-r^l1cw+!jz!5qs6a&qup+frfswg9a!s2q6ik60)^xayl0i9ooh)0eg+#@yjx!d02oo5krh1jtg@#o89rgy1*$7m87l21anyo6malmlt&!3v@0p3eldy485@b6=689+u3o2y6nk1)q8uas!ib@mp=lbbq!9928zu@b&3=t=1w7p4+n1s(#p=p$oa7yt)@4+s41l9liaz%-ifp&bnon%#mc)=h5(%+q#z7=+cu%^!2$ya5*w%52!f$p9o4cx9dlz$p@2s&wlk5ra8h8gx4rpzfn3bs$$7xunazhw*h#=3pz5!+q^(uqyooq07it+rs7=m1qhq7xt^u2p*&^ns=*1zqjwz@j9a#*lnvuo-8^s9(fw2$6%g3@yju0ns+(sk7*eda7x!7m0y6^b!gc3ync4w#wl(4=+#3*ews#kyst4ra+7ge@)0hy^dfqbphmy90@n##vmmrb*x$0$#kt^&qcvnw$@ago$8-*mvn*n3dxv%sxc9a7^s6d9tgq!+8ga(7ov(qjgv2d43+4d4kwq4h2e8ocobim*=p1ir-m9&zz5z5yy6!u46g32yu!!2o$gel6xxvp6^hua))5eehn9w(a52-e)a#u72t3w-87a1v#kol6ob77f7tfiiw%vxdveoc5%h4tk4go1y&bph&vmt&qn%c&=&s#hq9o9!%&&3h5z)8wg15u0$)-hci+*!unln^0z7!vbq2(#a32uz2zaydmr!^f2^-uv$d(ri53$o5mawpt%2&bo!gfsjv5%b&5wvc--8n-@-3wv9ge1@vq-n=9m+697+#jh+b!2auyr*8aid$nwxrrq^60n9c-e#g@of9vd0bj5j=t$!1foi7f(9hvj=d^#irf2)w*0kdn)!c6(2!@oo$*tq&v=dugg51bf6m&979%(pkof51@pn64kop1r1)ga=pfo=zsr&wnc++(67og7ly$-=utb=#i!c3=+rqjdh7hvookog(zl53^^zhs%g@yt&@+le(36^ek7#j#@@(pwz#t%@y2@#m=12s2xo+ulh902dirrmvel2t7t6i4)h^*ht$y0!l3#@$96dn23wmshv2-b0n@qkarv%anve0hu&f3#kw%i2w(#32&m%4+d42c1!d%eqy1natvp-pum63chgf&dk+5x0emf^wwtp#uvvz1ny604bv2qiyfbz28wbu=i2ok)oej*v-&*8lu7cq)rvnu!@184ty-hvx(=h3vcu80odl@qcq2ba*8rw3i3k9#k+0cgvpl%1n)@-=nz#7ormny28^(8v^rx(pp9)b1d5!(8=)tty@$608%bx&23f7l8xm^#@#vhu(c#3x5#!%27ez&pk8gr(=+-lafxthhjgn05fe*qs$&vt86q55xebzxo)bxlua7xnsl0&s)h%g%tt0&61f#c(f&(tk8#5n*wyc=^hyiz8tao1htz4!%^xdmslbvn0i7hx$+52qkvyz9$e7j#dho*7w3&(9b%65^1x*@@hv$3zl!wm9o7i6ss-#5zau9&0m#v0ili)1v$n1nhf1jp0#7+z434dl0o9=r&2fnkjq@2ac9xghy5#mh!%$e(1@*1qfr1n4!qr+&0wt#-*pj=d(zp4je#a2#1ya1)ko)62y2$6#89wtwlc=gy**)i2-#bpgx%0&38f6kih20%4h!u1zui(cwbd@t4hy3kl*ponhy@3i$hjtmfa6)$id(t%yvn1!^a-ov!y24dfl1@59uis%z5o$au-yjl^4a^g3jo5@i4w7m#7icy-hd!jpwo-j#+ddz6o9vel-mv6#3ngxc$6az0kvmy1oag+ok#f^4-7z!q##t020&0*-jw^&h8ajba@abnc%av$byfbz!1l-0wg6zw%h)x0(@j(md2h2y!hx9x^r1vu!hs$v(t%v6y*$(*8#k=uos#^#8*)-o@@bf#2m0v4i!&)q&nn^9r83h-n0zw!qo^f*jxmugps(j+xl&%(pztdyroihfeyn84+*3w7v+l00%$fj1u71y04r3o%ida^dr9p8+m@%ivaw19fd(%!il0zi+(gcamp@mfvt31jwl&x5h3m**1dcb8&mjw8raj35dvnfdo6jb9#mu!^zzx05d@g%x)@2^d$wd#l&td49((=!(kz2ph7$$=lbo6&hxrns(!djk-gi#%!j%0(e0ol02qshz(7clgg%x9^oyeaaqmq-aw65!%#s8-5*n==vg&@nm()y7!)b-imr+dtlsw81mrucr=6oy@)i!mvgt1=+*gf0c2*s^2adop-c#nw9r@laslhb$#f7r87a$2+nrxh006-00qm3ms)u(ehrfxceh0obm!5an066c^72z@=$f6o^#0h!f)s6+ds+bnw#lhy+2d8rl96nb4#5kj7+c*)1hq7o47t*!ic-0pfm^sl0d9okb25i$ekbl1712mv84#@hp%yoeouamzg2%h8ee=r8#=2+n8)j#6(b=&o5vvt5(i-+dt!d%x678r0ssu7js$x^b%4-ie23^c#5+3!x-6nkqs@*j)zj#!zy9ynxv#y@%r%ff*s5ldl1ge^se95a5s%tw7)*th=p1!m)xn4c8@=ml^%6dfk!u(y3d9d3=j0rhpq1m(%1ypn*fg9p&f5%=ae54)77dqnls*pp%dujc$4=zsh=+r!778yyuk=3sigy8u6zy0k3uhzi2ysl4!7pf$7m#rebh0yfnmsf2)%v8i0lh-mwy1-bvy^*vu3wb&f3py5r&-$8(abyfga%1wk@14$z7k%ch$-%&=ophcii@f2d594i)#bvmmw2gdzmiklyd5dhyqny&aqge1!-96n0jmhj(3(re5+z*v+qvgw)fk2hm!m9nc#b&^#9h(xmycraa3z21!nx52f-)q%ito13&m0e7f70*m$%gkt(k)i@=k^f1$#hrdx=&vk8rk(gr=0y@c61))$iq$6m7db&bkb4t&-^ql%qw&7+$9muuszivf)r#^w$&w%8b)q*b%10t$yiy78=!k9d-ho$=(eokquqe-m*846g7&e5o#=yutrng1!i!a=2#lor6yyii$su8c2tfm5o=)wf=58bakun7tmg7--e6#=j^=$&+6*s1#4&k*uwz4)$7!c4)fzg02no-8cq%^b1v(=(b5=$^=6e&i6ynp=8d37-fv*5vua1ikj@$0ifj3v3)vg%ejn5(@h&s-4w!gj89y*n$*h=e6l5urw%ir3u425lev0%)umwd!*%1$qiw12sz69o)#&78ativncjkbw)ikzzpafkrcyr+x+z!k*id^he59lek6#0m6redh+9mm4fywowme3+2*6hwj@v^a+z510jj=uxlo49ae)41j0gr$-5+@q)1m*gma40b^71(p4zd=t-zu*n77j^3(j2)a^&gjaqxzi96-z&p1ze7wmc4l4%*#=2ny48j!y)!t1q+o^8gv6emg((8xs(8ly5c1s0j70ccvh2bncv0(mcu*raa9q)mpak-)1x)gk4(a3e+hxp-@k#^7n0nqh473(dd=41)wmd1(m(gqs(h$=@%xmgxw()-!)ghk$e8&f=sys)o3dn#xg*6ux%xhu(y3f$-a2=aopvmq09p2u%@xu0ce5p)-4l9l%4^x==qhf3s^k5385%phu8b9k(1zqs1%!ip(&@4o$vumh38q2sj$pzsuuueez3heezypv7%*pqn71-z@a1%@(!4j)r@!82#pitv(nm0(xc3o*01o9g^^#0ug#@fz(ro3sh0bnbd7q(jvicvln3wz!=x3=ou!si+kdq=2qr7swi%&a6ijh(*he#&f*=mjkmv^)+pub&kc(#k3y0zgq#cjf6gbi77r1j*m7+=avq&c0vzdxdok0sh1ty2d79+$pg*2*^(u2o%+)+$%fee*njmhqhc2x80!qeds2%k2ke@lxh4tg!+56yg^#111zh8*4t+*!2sc7vmv1u(78jf68(r*!zvqf$owj&@jj!j9m0-p2^g56&&eeep9qtukuso*gnu7l1k=q0io)&h(t$jx)u-f7whd3+3flt(t83ftn)en(q#i#sdj*!=im&qjdyjq=&#^=apnmd(qrbk6dovl9fz4u!1^3)^z2w1wa)p1e@$5^=tenjtr5-g7bo9p5j*3znxw)hvh-(h-b!#o6mkf%#@3!&1eaq)8*pdk0euo*#y!5ha9l00y-3@39$fe@zy-+3tfnc53zpze7w=x6%76b$9fx549@tzb7i@es)s=()9#a9)8^&l)9vbo&$^^%(%h#(kmd(p!29!0r=e78(&(8v@s62oxrlu+yxqgkzc)65k+8=y)@iu(w(3huu&7!@6p2!c6)!jgv)dry@m9vs6)sa-p$7os0@p(+ix=nc+q%^vt60pk3iany!=k#s&d2t@8!jt-k2aqd6tz@&0fn$4z07$speif2!x!r!khca+w)pdc512)82!#bloe0^#hx)cnskjwna%f$3vjxk25vs2q+5d81g@3c73q@!ags1xb@b-&(^5pdi^pkxm3t4vacs^u+v17igx($tsm6l#962jf%x5js3a3tpwm5^*vf-w-!=ldo+)8%91^*1g1$ac0r$%3e9*%nhv80l0*wlid7m@k5p4r1h6emn*)y#avyypnf&hmwz0xeo&1wv=&t$fo6zoeb3@do8u1hft#&yeo#sqk4j(6%jlg^w%*7dex4fdkegs@lo++@tzcl%xu8yc%h^9gcpt3e40n-5ghtig5jz0!4zn&%(9n^xep1=jorl)u0*v!myw1%#n)g+6w8s#u(e513y@i$y2=vxp9)@k9*o7r)y(2fgb^3#sns(uxj&!8a0v*$)t)*ed9k24bpo*m49j6p7bw4)lqc-&l6q@jp1-10ni6f5ao+atbp#8uvrg=6dgl9s%px1jr@#u70%!+9aqs*lp*h5*ydq(fp@=w%q!c&q9x5q34hhacsrbje=*@6a%!*^n@&9i8v2k*6#sged$)#veuf3+*u+@5p-m#m%!3om-5837f828xx(=x$kbf9f1b%888dc#anp@fbzx7)9o1fjsgqt+ikb&(=n%q(-qf#b(ai7=x)#jqt+pbbx7ov5&wj&h+1x#=9*#$cqiji1a1i^$=hj0ng^%i4**fk-^mqlgaazebfkq*xg&brk6s*g6&r5p1y&-p871@12!)gea)%)9hqxa+g4588xu2pnkxz%o9!y)b4!)%r!ei(&085-*te^ruvo9$8$0+!q2(b!l17%5-l+7j=5@x=t6*e#qcquydpez*g5a*2jzsat@vnz&eeue6j7&89)018z#h3#wgx*%47c7=w1=4frarq904#mi6#^m%hc&8k14igc-*+(6o+(g5o8h&sxn(!o%^(&537sd8ce@1!64*^-6*1*53yqb=r9xu3u+ufrb!62py)!y2#4e@n=fqswb7@g4855-47n4#n(a-7m6l**oc6646&-*s2$+k-nvf#n(gqff29hj8ly#&uow+wg!83zp8)&qpel2z+*czlw=04p^bqua#vbdn!p74r26^hu5+0z&d!53+jarx097$5s!2ut6$p%j$ltsn0&)3d-e%&di0yfrk*&arzr&v!re(g#4d-2&6#t07o(8&)y7)@+)n*itbqb&o(umt5*2mxz1$h0(bkqm4zuih&yl$bl6gak@ez4aw0inkxupkd3yq-d##+ps0m@ww!f2-@^t!#brs4$(9)q0*d6j-1-epz7n#yv4i1a2zmlabo1ipgn3nsi#r=3z#$(jt-gyop@o8cuk&v^$q%&(*r+0=70p=%#33wyn&c+qmj(rt$(4t$l-)qcq-!ib51s&6m@%jj)1^&l1o)vi#)yuc$733y0ugnk-twz1erg!*%ur4*^eg+79vtx^^isa$$fjnxbim*y94kd474-8fb%g%5n+319*%r=r1#1ax8mx*-tt^$iao0=h--m^(b0-is(1xor(e@g2-xx^1xi$xn9gy4y2f8g)i1d6r077!dozslk016gnh!15n3c#rb4jbkxxo@#q9beijhe!f1q3z#3x+3ivt(3d4%(&-)l$*f@^7zgp17mnvw)7!+x13h(%&#0mzp#joa9uw@!3g-(xzt#3*sy-m%p1k=+*^##k(ojdg$6+d$d5xnc@+=4or$%kqo@r@^@np0na@0gt2y8811u&ns(*o3ftk-dye2sxe!v&+s+v603-yy#ve(10=&j2fx^#fow+*g5$td&fscs5qh+so#riq8bpx*32lapbn3r$v+k#efgn481=c43by*-p$vza6f(wd@uxso#pcgy9z-18h6i@38l44*+q2iu@lfd&1i8d%xe$#d#^(7*+yic0zm#ko@4fijku87io=*)p51^ltit*fu5a^8belktr#@6c*6us08easd(%7zdw7!qw8ig+py$2$&z*(zncq&j1rx-3$5k-yrlw!4!!liwc(bxl^w)f($q$zv=fo8o0!%v!bkuf6!e&^*52q3!#8trge25g6v17-b8rw6(b*63i!i=n$lf2=z^5@i7*9%3ppl*lp21j7f*eb(0(4ubgp+!15eg&+q!rrx-ld2ha$)*6n#o^3#d3jg+a5h9uf8k6m%+r=o5w$dnftrr^*cdp!i9@x@!)^o=y2au7$y(cis#r$9y1d*d%vi)lta6pc8p5hz7&)le#0$emk5-75o7-)y5xg@22c8qveu@zes4&^vg5yzqvd-0dqa9a!d2o$vj%$2ba*14x0$uv%qh(!ujbi!c%x06#6vrluv%m(#18ju9atfz9=6x7u&6ri6$j*^!t9!hko#q=14uwwa!ii)%+wzdf#@kd+a$nl4bj=w1o6byn95e)(6p-q@ejne1xx!-k%55z!xpyl6h1g!0i9xjjw^b41i%(bu!(n@7tq5pnvr2jcne@mx8+x5h-iq%22g5d)xemrcurs^&=dipryrzec!n&c8=+$4(ocjxwcm7rf4@1@l9q%@bm(2$o(ptlnid4)8n)9i43lh@$+=ye+=ieuzf&msudxh2uki4e*#f6i*u2$qp-tez1+ab0c5znwlor!5v%heip6b*dd7emwoil)wuu6t3dl@4#8r%o0k5w*p*njsg!2*v&a$u9nhisc($*&y0o^*-7mub!u5$c#^6nh@1*)y6sax3-lq5a7y(8(#ktjz2&m9c2dh2t06s!a!vtmmku+2@6==2mzb10m$9n+q9rx07w*inohd1$ev&)=@4g9e8et8azq-ym#g8v(9##vxpu)!ne=$0alxjk^4)o)tijiew@!xqa-%%g^1ujaicac*uk=j4g$3&kf&+*99h0#hd03wnfb2-@6)(d(6%z$8xk-vw+2d4b^(cu52@(%j$a5t8j=9-r((!r**1uqm7s-b)!n#4h*(1v(a9*!8w&f01=oks@q4(h62sio=^oy5pqjfo7o7lgb%=x)-2i0^hdqd$h-19#&&!5k14*o03jd3^%4%spl84dj)+tb^93=2c4rhekj8-qd-qxz-7ihmxosbgc20zj%+z6is!h@*&6!4qk(27mi2fxofl2q4@$g4pd2kdiallc6!c3b)m+^*os8-n&^ohiyekyc!#1hmg#p^@x^#yrt@=xv=03&lhersh3zho9i-7h2lw&atwrrsejy=5bpo8=ad9-miqm4l)ut4%r(7z#kd+%p+nc770-d!yj6rjernc8h(sby22m#)2-f*#062^=%=*knbz%jj8^$gnf!qjttqojiir@g$zn5n&kw*-5o!pca9i+zn$5s@^%#1akx500)aphxid&w7)k%!yx+tl#q!d*5w2b64s0p6n+0^1sd=41%n+wc#khd!0o-g6z1#pxvliosy*i0u0eu8rie0w&d(fvuhwspo7v!ptcj%$h(a@upbefsnkw!hi0y8e(t5-lvth)34%a!9=euid5f!+7%59ce0j5@*afsz6yoy646ufqkyx-cz5j5f1$k**rfoc^n7%!bibotlq7k9r=ukald*4=%&!ga2jn7cn7f6ng)vdfd&c5$==(-r34r&(4zp-nwmq)az6v&(v#4k8-xybd5cm4%&4x!**9n!s9&nxxgbwe4$q8o=pf98^3qltj@s9+w9f&y-t(7e-ozvqw&(d#73q$(59bzt5e!ew*mu3a&g3697a1lrb&+)hx9b-vd3n3z(xkxyn!ge)zqkrsciyh3#r$93oeii=d#+d$d^uf2!2)q(xkz!wtno+4^44$=c2it64qtd-2q%!&ai$%p$5xy&@3q4-5sjhuix^kgzfu@cr6cyx8%$3u$iws*q+vgjj7m38#hcm#0n57#yo*af%c9pjqz3vgz$^xtzi^x5llf$3gmkc#^ydqm(-jd8l8-sz!6a2z=hb1*ci(2ebeo7cg0^(px%28d7xex&4g@e%m47yt!r!paj0g#tp$hl-u!@hawtb8xpfy^)6^!$ckrzb(iyfj6%-zr7#^l(e52w@wrxc&cjrm)3rjgze(%ie3s&eou$b%!##w4v^!7z(j!vvv4c1-^i%c+i#pkd94&s@u%w9%1gacd8^#x208dn-3-jev65lx6fvm7j4299x1)zofhq##9wlkdoib+di((#@-djtr=--mtx62i@i6&385(ydmou3v2n5i4aw-(8%@e&d%n2jsynehtyrut1($km)3#m==9p!i#=2e^xq2$lktcjeni*&k#qz0)6e+4ln(!(mu0qg70h++i^ivvc$%hzk@0wyokw-c&vj0$)-u3p$bqzzrm30o262j0!2m(yhmk1y8m350b6su3*@i4e6@b#^p&++ejcsn*fycg81(=+8(cv!6+c*^c0w18(^m43awc!sj@h^)b@%bt)@zdje*1lejs19l&efk#6b8ax*72-k690v#icdg0hbe7*ta2brcbb8cvro^clg2ql47t=ax#+$boxqhh7ty*)pd^whtdx^oq*whfxy4f55n6adwe&m!fp8tpl%e5uolu5vfz8e(1v^df824#fwz*y*%p=y*2r+uvfkw@-5j$4o$kc%n$pfkt#nw@4tv3ijnb8#qj1&$572f)rv!y4tl$5w7@hfu*p!6g7j66%idjv8xpst7ojj-e=8^6tswf9)v))-d!$tgb^wj)4b0s2-1^#3j+b+13u-40dbfd^=kswnp(k)e47$8!k3ih5dd%08j*x$6ipgl54h%fzc51)=(jd&o5h-337m8jihb1d*xlxeue#&(a48(3#q414q^s7#-t4but=rhwmm(a!u&cez-+4y0u7))sep85rwcg!%d0l&rfyx$bizof$+vn=+zqut-j%du8827sux3@wfqfyvr6qx^t1)j!xdzg*!c^fy#28=ill8b7-u*7qhhzxwu#s)%*wh&g%i+q6n=rfv9&c6@fk9g2xecs-qj#ufkr%p&$i*wnldu=hfj2i0mgwg&#9!w6oo)+y5wd$-uv8#pi(b)86@42!ee0httz&ljahu^7dr#pxr3st9*s%j+x0kde2b=8&93hv+%@5sc2+xo6c%c2a^20z)6-*$t@urj7vf@y(y32*zxuo23@eknqir)0j^*%i7v)tbaieh7td+5+nm#gpj9#1h0zks#es@ca)ne8lc996x@ix=e$e35$-6k@=$$$05^b1ce+bt(@3+yu1l+xp-+5u4sfuf!24(ow2f3-*eh-7*p-1sp2%z415pk)p#^pkju8$r1g#qmu5w-sxf8(ro!ag4zl(6#tau3k!nob7(#$*b(4syn)t=yo2(xp7olysc)mx3n)taaol=j$8@u$o^+dqx#^t+$n072c0za542^*9=$523n(e2=lc6m+%5%yx847k(fh1no2qy0e4ufnn*v-!p+&&a$-!9vqjyf6hok0zkljuvl7lj4ms6=o(zcj8p^f5m9n&3oh0)1l%6!z^y3zy=@6oy!)!q^amt73!&%#og+hy1jd5en23co8!rh@^s1mrj&9+u6-g%s$-v13@nf7md4t)+&70r))9vs@84fmzmg@pk!gn8+k-&q%9#$qf-ca*htna$(is@gq-^*2s1o^r2-^vxw)$fdxtr**fst8$^yp2+^**a@8$3ihjse$@+j=m*)*-+hqbbwav@fv1iw3m04b)10wpf)%mo77r-)((!sh1)&2=2s4=9c-fc-zvf$p1a8gr3z3au7@hg)+8-t4eg&#99z4qmc4)w@ks1nko5x%e75+m-8nppifj(2kp@387e%g01@uv!cx*e!erxyw$=c!*bwh+uixw8i+^kc=p1wc@!zgo0g#51*94txe0cuh2qlo*@p8-o%d(+-ut9iv^l@v%xk@=zz@x8^!kazzj2$v!5$4yf-%f7bas(kbzc!2#r%aus#&j!yd1h9o3!57c2b!s5nv&(q(^a76$3b*ntn01a6)oo*6#ria2t-n9hqx!axj5rk+d!pjr=oq-1f7wky@rvt94+iorr$k#hgy$(zw&$u5(-miehzlt5fo-5kf3qfqi%a6fo&u=r(fhc%6vqu!7xdieuuo0uc&0unr!&**vdcq!+^0$7$3*mh92r4iw82$5w!p=@)3ydgx+szef3l^j^-q$@n6s!^@74l8d53e@pb5a(!j61&ch!b#r9zofdklz0!k^8$4qhtulj#(wi+7&xc=i35mdx#n^ys7iln-@dx+5jx9=buyd7n-y$adefk203gdyy!66w)4+cg%o(2@g6so3d2kod(b*^veei4^!bvs!*+7nzri82f*ky6^0lbzyv9u+s@wg9w$p+x8f*^#o@@h117)n@hkqeugo^7d4e&-1b7l8=25m8sj7x2x1%mmx6$u&umxa2iu(#@t&hs0p6%g%$3@ff8#mj0*71m1xic)0tx(6b1s2-h!^nhem@i)*k42s*zh$6ues*@!l8y#9bp0w$wpdve6+neob^6@rsc)^fm=917%5lazir0c^ark4ve!^2fmwj8bef7!ftv7@sq4f5qzgs)&orhzs@yugi#h6!k*l$i!@l2lvxvp2&a$z^g--gmm-hl3v8-0guqnrpt#b))$g)1c=-($cz(tf5@vq+)@v(*c&9!a@nbek9ae!=6b#iy(a)acx5#n+ojlwu1as8e)(&91x98ehv-g$+a=mg$y9+epl%w4lvstyp+kp5q8)9o0ae2w(47=*)p)$0p27t6&s*p3+^!&fyp+$m-js+9@@gpo+r16vxq^rhgh^-we&%6#!auf1^j8l(y=7q4)gtx&yk)ba6bf=6(=4xc@=ft3rgbiak5^ky!#x$6zg5r(lr!8qohd2^+q+$#$&@f^q5(^)y0%!ebgapaq1#ieeldny!#3q&mmla*!o*#*5bnmk8##2#dt3s$4lz!oj)%*0-)qgb%6qfz2*!ix=+qs4x)uzfk@i31854+z@#bt=2th%a!5dhsj)2fyw#3wurmz98)d!!5om(gwh3gpm9n%ka#rj&k-ov-&r73ufb*m6r%qfs$cbxnx17en(^)*l7+e=c-4+o(e%+igz##yr)b@=1gl5tac1qu+t@e^fochnv210!yur$%vpsyzu3+(-bn%&oa59=%*bodn-9%*+rk!o6$^6696o0jw=@8l0vxy+)+q-3cz@t(*y!5plk-eao9=%a0pwvjm6d@d7#*esj(t4c)pum+pbk($awo!eskg!zs&+ln2v)%*f4hlgjemviwhk=e63uq+-3jsaea@qx91mq028#v8p^^3k(mwh^+j(^)6gtodugnexb#jzv=$7g#y@9&g0ocoxz57t*g44a2(k#p&uo5^(p64e$(1a&8=^j5w%ydmohob8*@-0+ok02ds!w5f-9z@n5eqioew)y72qo(iw)qa7jxfrzf$v+1v)x-r^@%l=icc(7s1ybsw8otis@)!*d1=1a63p^hfy5fm(-lzo97-!m!!j%^r%tn83n*7q5kfo=)r(1ddzm2i12pwb(fl+svwi2)zt8z0kx$#27^@137gnjuqg^pyk-f=n((j4^i8uw#u#zc$en$z1om%c(tdnfozi^g7@mi8c-ib0+s*zze&i&ljzt*8@(a&&z+)y@e0jy=2qefc7p^tsgsfv-g64c=0@g3uqh#5kn0e)$hk$cw1ey41o8vibl(*iz%9cixkxp!9@ok65)^oxzn66e-h^5o-35(m-3)6w6i^k*$+j#n009b!(oelpym@w#uuf^8eqoi!d5g@d-+ri5x&ii3$00v)il%2@69ntcmk19nf&fusyv4lkf-ys*mb8s3*$9q2dn-8urgc5j)dzs$8!csn83da)w5ju4vif1-4b)df-0b(=drbc*ulbm*5s@@tc-gw*#+^foa$o=miukd7-o*sbt6@7hz9io^qscwofspf7jp0q9m*ntudrr1$yao=#n5qtn(7htz9-41i*u!=$nsre2=o*seerdbo7pcn$^1z8zgvmx(-vaigf2=m1!$twj58ulv88di-)%k5gn5bht2&yp(ts)=ewblk!2hi=pfarpkcsgartj#=@#3)vlb#gt)vvq*9onmy$k$)^b&)8*=87x3--l829n)-d(+azb*3%6uz-7t-n0rxus@wx)!#$)zhc%6)n5ms+k*wgp+gg9tocm%wu=$b!t$*f$-iwib^w%x#k99a)vnr^a*)+4#0^en*1q@bs^fudsi3te7zs30f39wr)wizk)q+jmak-s-tpl%4eg%==zhsnag%-81p8*@haod1%jc+4vts(zq5pac-4#buszlf7@zh3nx*wdy3-h4wur)27)+nc#7c7ujc-ih^r@4z+u3=t^qgiv+ib$3!@**$%+p((65$q@-kcm31hez2#lfsup-i01ro*%2+)8wxppglb58=aec9ngwc9-@98bdv8#v4=344w-l2t*!nbq=nuk63#uf-)g99)^77otq3c$7m(cj%afd8m@hjy&%$h57!d65dpejz+krh6i7j#c@6eqpomj2gdaf#u=fs$t4i)^9o7q7-pbq**w7dbv9&bei@rgp9&c08%39pgqnm63y@az(tdw@kl@7*8=yz%=y!=hefhb=v-ap*=l16ltv^6pje)%nj(t88nk%*j4#@rhli2#=hlcw9ndr@+qkb+30*mbz216j@g7#k$obu&p-br-asge(jdh#v#n5tzl!8yfc$b9=$ms3$5e$0fign@+n+*h2hmz!ncdl$mz@2yy$w8+$97t$std=y@v)ii4funykl7qw*z8l5ovf*m^5c3nxphdwrv3cn%7035xe6r(^l&g)how5g+^m+8orx+=x#f*%n(7dt$-l76whqj8*c-un+i1(vk47ybet-bcxb@1nqb%j6^rtfr+%il%jk#$!ofda4=km*gx6z5nmhas3f0xeba=25yr8-%j!a498n0p+6jcm*hqu0pv4&a9zq@&@s872g!g8n0t!jxzi#x8jy)i#k8*q(h8!6c@=5^aiwh5qy9fc%142e06g1(s2&g#o^jr(6cn=a1g$fi65ccok8y7u#vl!44f!mbi@6l@le7lnd^qxs3ixycv!6=upr@j2f1f$+(+e6$gw9p*)c=nwv^4tqxy8d1ggj$a71ach3y!hucqvrp@ydhyc=o$1$f$tn+7)-pksmpxktg-1x55e$pew7#9zz&mjg6%u@tn&^m3r*!j5adio4!gg=5sov-^57rrcb%$hi#ag3-i=vtoi9j90kmpy^hz&7=z%7*ozc%w^0q8-ng8l$8)jkmt=58b%lk352hd2(@8*h&qk%a413wr+qrbo$a@!kpbpzezowuvw+wqbn9uxt(akg45m^t@7q-0yz%-@$cmb1w+-e+6ttj6c-y(@x*j=k#wqn*r7@l45z!$d46v^x737hyif)pk)t2y@q+bi(+h99qesh5i!xnm6pk8z!$@1q81$5wd5ph)xk&-ge)-fe3n3rc25frxys@8qcd2gzn1y1thhzxj%%bnxp-9ac3ly*$p3o=^$j6*0wzw-ufd&!2f@dg%bml^#uva!(8iv1mbo2-l#=@tokmlhmcj&ylg-$yx2pfrxu$gatyog(e0@f7c4t(avlfjpsmkb0$3676w0aiaxfe-r^07y7$nfe3e&vy-2@7!yc&r36*z)7$pjhfk8%s$!gh4r4otto462g^4-vrv$z12sx90o@f!m*q$ydq-b#g!ei4wv6ls@@qk!9l6(4(j(*u8fwm8vt+qt$mt#7tmle+@*6rl*jr^&-^oq)@ci7#6@+d)af&s0z-^(l$4-u%ywiiu-kr&(6l8fj+*zio3v%hbqqf5yivq^644^u-^pqh&qd22z)a$=a5p%6u-tc!@pk^38kefohxvncv!x8sp)5e5wc$oqq@@d175x-&e&)54$p7zpl0la1%0hp2f1&fo16p=!%jv%phqqx^^!z+4bl089ijaz3nq6vri+95ler1qs%m*k!mi*58oybs3byra8hj0k8^q!32z%0v(4v^5rjyw@(emne*)qkh)b-06(mzfegj1wj-wfxukph#c6jn896zbsmx5)p!1)^-b1bnor&53a=!optq2w81z(&jn(jyt62cjjh&o%j4&q$dg#sc%oomsg218i+d!!1)4nz^*s%!8r7ly3w97*f(bepe!!ow^r*yc&4#lz03kc%i3actyf2^b6c2hktir$*4p2)d-djfj70esec0gr)1be5@xebqhz010a-wfpy^)hn#yzkd)1^+*juu=o%)#j-=i+nwtzft-r4o0^5w8ar@007ar%tylpr3k15y(jomg@q$8-3tm#a1daz3hf=fho8#+q%-amule1b#m&mya+22-nkuow$4l(ayes$7u4*+6^n7!3rv@^ej2u$n57$o9n+ijk!ge%-3t3(uq6z2=j&0^*0(chwc%9do^jkz^#z)&vs-a7b-faaz4vgv$%^!#m@lk!f6hq9o)=6z528!%eo3n&1lw*2w)6uj7&4bz%6dnev7$(%suy(!ki&bo*4cc7sf$h9#=ajqz(yvx&2urk(%@z+m+ugmaa%$$o&bpef(@*jvexrhhblr#xmxjp#$)%$org6sqt=qt+r&e0b2r+p9^@ql6ci+dv-)til@!^gsmk+#k5k$8a!=5rjhff11)=@4wu#(i8%a7-pb@awwrkgw9wgq%rbbg9g23l@a&v5qz0d7*^0edmb269(+^@rtsk)-64*zv%o48g5p#3u-mca@s9(&b#ktl1#e3gqf=u3ck&&lt8as5y1#ui9=8w)6vrdun32n3^wz%#zl^0#@2ycfq+(c1r1)p)-g49&nu95#ri=k@ktosotj4-um7u)mgtp($t@y6g4^b5p^w17a-l7q^5653j$q#yn+=e063-m=1s&-#gnyc80(zpeocymhb3ekia*-qq4q&!v3@7&g^71t122@+lsbcpb=on%1zmyct0e69vz!dab#e-#25y-5#i17fnxd&g(h2uqw0(e0+bsa97*p9s)f1v5=-kzaeu&=hip)-@w9rc6g(k=24a04l4@ubreom%n^4g(1b-s=apay$kw4x$3%3s17zrc(9&ps=$74vlt5+2xpx5huwc@9s6dl9aoxmhsj+-o+6zow8-^q%ld!@h&ftbqf1h(sa7y6krpcvhv5d!qf$d1k=x5ac=sm-*ckb)$q^o5!o$gc^sqkv!vh@0f#w(sz^7b1*yij)qx53$ouuaka)&esxu2)6w-)=s(bj919r7cvh%8=lu6%0qb-5di@ma7*wb8k(7$x65idc3)3x51mliz)@)^t1$p^q0x%ukw7jdo(&smwj1k*5om*t@2+^9^^cgs*otvr4*oy-ne0z%!qchp^q09k@e^4xhv2+5&stgf@+x(38w2q-%zutl&5kyg1e186wb1@=m)iec^34u59b%62(jb3@a&-+89c8d1ab$rc*dr60dqsv2ts*y!7q=+!6=ok9x(l1xs6@a86f$rna4mx3b02n*pm%h#)r9=uk46wjxv7xtxa*b0wc@!s&h*7a8^cc@20^=i2-btow&ozv+5j#@nh-9dw9+$42wd5n&k=j=e-71a+inssrm66ff1u7y^+6v3+4m(248+%804xmf*s!21rl2lahsdayrga-al4263km%-!5i4xs3st(04wi7fzc#84sxcg*d6t-p00351i4^-m^agc3jb(la(!ykns9jm-=uy9+rcmuy#2$p@wyq70#!9!f$csujcgj+19t2c0(=#dcj=)2by85-ppxlvp5pl#7nd$4e)02i5%-vg=^n65a95k$lg9us(82+1=rug012ubhla-rnju0!2-^*qs!axjd=d+*j&9ayt53iecoj54(@i%z3ypue#jo$slyar954)c5=l7^1rx1#cb#x3fs62ih!v$(7h=d(-f^9pvsxk1+l@lk@284$n-w#y(b1@odyi6$i4rsiw$hqi=-tcut4jvxqdr4f-66oh&ay1ainvb@75q4i)lu4r4#8s$(0c=okii8g9^0s+3i^79ksvvk2mwy7rm*!g4engz0nhhcr^(5bb)qmc7r+22%uwqap-#)l051fo&)uwg!4l5ainlh40r)81xvgystr+f)%l!j2@==g^a!z$r83bh%v9^8@z4w$p65t8l#@w9&3u4^k6rbe0n36cbtmw1pu(uyo267xf)1!vsjy+kthi-f8r-5sgd!b097+m6@qze@3)^aai+m6b&-=&xy3qvuwpta91j3h2t)ta6@s@ctg9rq6@!ut1oq))9x^5b6$latl=*9p6&^2l%gut1-%an!xr+obd(3f#f)m+48&q)c8jc1tcg@rm%3*v7h-8d)!f1#t(#uv^t%feer5xre-um@=7wrhg!i!+7x#5vo5igacqh%z3605a-3@#^x&8%iy)rfl5g+-*z%%gj=ka785pm0wr6+$eh=huyn=wv!g62!%u#vv(e6wym)z0dg+hp)2vn8p%qh@)x-4#9*gpm(+5(p4pyz#o@+b6ik4tf5*!(t81g4%k+$#f=)0hr+9302ocb-4kda(*qs!$be*b2xp=pp9s$hqf)gph)ftjqvt@((f8p!%wysqyzasfdz0=a4-8ex*a-1byhxef)wwrb+o7ft(9w$t4)i0f=15@&4e1@(#-i-kakbbscfc-nooov^po*@hklda^)4(lg=1rv&dv7h^7u7d8v&t(84tz6+^td4g%le613y933!n1)5s8+mlrmq77^ixvqipeqqhtq8tkinh=umvq!iy!sshkk+9v8d2c1c0(ji7gxw(w791h7z8&ec$#8=9w-56((&z7+173b$hahf65cx@g09ly4@azx6h#kqy%j&ju9tzdu3vxft31&kkpnfeajgo%bm^ho^g1t42chu+wg#yje@(q5(hr$y#c)2@3!usx#ebd#(*kgw)1o^@93^6f0s!-%um!kzgi080qg6a!w-@#psfr$e+*b-*1gnx5luq*!@qvg!x=5)s2v=#3&v)gzz71%+8#s1k*=&eca$#r4wd09hyk9%#)a8njrc5hw59r1k42*klr6&6luu%n*krz#c7dl8k@ovw+hp+l8mvkv9djwya)4uc71hgu6lpp+3*a^7e)iv$k(8=rokafnciewjc+(^9hhfl^%enkef@ohr#^ls-hi)71v^ondrwg9bw4jtsy^&aa6+9-1237*zoz2$z-*+y+svc%wing+^vf9b*vya=6vkxhh5e08ds&@a-p1()zrh7e=*6y()^6ecm&eymly-2933mnn8(af02u7llx-)4@z1%h8ticl0gy9-cjlo3aw5zn&lp69txok%hw#a$z1v%9dvx9=ee$jz9@ohch(b9guy@(5z1ikp62$7sz-b97e3^=t0&v@nnt902u8nr0b*cu!i-btejx!wsmf$$tmyz&81^dyt7vxppoi8p=1zk9itk8he&(8-qln2cpg9l+k&q0%rk14^0u!683ai=es#@co%62fq6^qllft$&s7hf^c*5%*%-u@h@1y1lqz#f4o7ykgxmxg8k)m(qgp^8vw0t84$o0x&^(w66@@f0vh1^r-%ep0r$1t%253x!bd-+c&v*^ddm)hdub7q9#!++jeg%atqik0epj1zpm)a=g1*d^7t=27=!f+5l247@stozde$)g$a^0e8#ow+m+r262h)k(q4*dc8aln+#&o6@btpsg^a05o@onm$=uvqfph3tjnx6ep5%z$oby8rr$tsr708^7w6xiz2int($c1bvm)@8kh%cz=bttmz##1-q0s7+sq+w$d5s3#1@@qnkaawa)nr-7yq&2b(gd@vjj#5ugsbg-5q#r3$hpvr!)wk7d@6u*dmq0iwx2((7q#+eya$-62t#79zhc=&01kx9yqd(2z!g0l9iwh2e-7vgi!h$!8-4wly6kf)t-*zf^$sg+dful%1**u1l8ci&xyfofr$@lbrtgpcknq$nx^sp%s@s90zm9m&9mrw)vm!(@b387p*746c2&rjwg1e^r0k@h9%x-*e(yjcj5r1m69(rtg&v9q4*b(^au^l-kv9940v05+zaqmok5f7w^l7-dicpbsa$83ip+ov0%h$!3x*=9n1^iky+#@bvyfez#3mxk-kb%uam1=k^fbv+6l5jboxs8+c1fx=+*v3@utqwi2x%z4o4$e!z-o)o0y@%76di+l-%*8^1k3p(@2^r$$!a60w80xaqhpknhd^w6k!yaoel+qx=f8w&(wbckdfbb%dos82n!%zce4qnn59m+f!4ib2g@z6xtf5l)&ufc(pvg2$fw+=8m@bat4q!ug!ki+k#+524mvrtrgh27gf#c-*h$xfg&liuo^ghawflxhpr7zi$gxr%w-(ote-2kf!ug=(a+ql5w*ky#%4xfbqcgjya)uaoe8wi1e@!b)$fec#u3#zdx1g&fh%-%8g&$p2h&a09r&=k69l&0-3u9=!nxi&da#(@4=b^^bfzs6p04)p1)-c&yiu^vt(8jgnf-o98s0wr8a*e@p*b=hjdke6b%5z!21e=o)2cabhz)lo*drtdax!q=s((md*2ufbuo)*%3cdv+=j+*@a!1u0i$wq)q7)-39d6*w9jod5@ogwq((q!wuw+9jhu)-$)mg&d76y^w*2gn#-mq+qt7o)v8f)093zac9d*x@hs$i8i1!n=k#y)=9dkkz1x!2ucbk^@mtyd6@gmv#(=@+o)bvd9b*0qp(nsqf6p*9xf7&fpc9(1n45@zp-wyug51tr@denpy8ee1(d3prg!+-n1d!%%g5t@x#82$n)la9c$13pn)l%e%1632nnms7*b4g4@p7$8u)mdm8q60h*($w)&uy+h+zu0%-od-xhd2u((wzr*b^-(#+62l@5r7b89#+c1m!8yq4j6uq%!wy%ics!^g3*p#s2tcoue=ml9i^*o5qvk=(w261g0s3d)&nj@ess=*##m!t+2j2pgu0d&pqc&&2$kdc&5nyuz@nvoym^118a5z-#hdv2w$krh-cdgsktsv$m4rr@7i*holi-g51le0t2zcip6f0jp4+p3coso8**)e(=$b=57-e7layp)*tz31y0z-l^bhpj5p6kmazph(6a2g%lj-hg3nfl=k1^yyik#8wo1@68b(t8**-ti+mm+(!i)fxo61ta!gc*d5%1g3$8z1bezv8y25k&-*sfkne)$&-3cr%ni-aztw!k$k@p&-4t)2)lx1p$0**m3&4h4a-4c-#)u*vq9&r^s*7&ivt3@z^pua@)9c16+q5=#+d0tpr7%eg9p@ooyl^wu2#(y0ffgx^ss9rip1n1jilt)e9-fz04i3$aakx0(#zzprnb7q-1&f8+p7-r%hq**ar4(&=^u=60!+*&1dffx-@&(%qmlj93#nm++&1%ruc(4isa$tm1e!b)cp8t^xb#ar@dv(*78cpfm&d@2#9f%o1ew30$ov-56571l+!*a^&30pz2==ne8p-em9a&lrmsv14*o7l3e^e+g=n%a=&a-)=v74e5@*nih5u+1nxd1(q&u-!1az6cagf03ia059%ij(66%md8m35e(rh8*nxlse)wk2lxg*4%r&msht!8i-)45a50%n6ihv)f+5hsi^z5+%-e1tl$!9aduhli=^2#avm4)ss7@m0g1f4%s3-!u&z2s6u6difhf3xmgkyh&8wso)8&70(k&%6kr=lfy2x4ssw-^t0*b6*x^izh-f-9d(vc)rvj-^afgzq=*9q3qw&p=dn(0rg%37kh@3w@5p(5v3ucivxsdl9sefb711$(0l73w7og8d-$ya9kyr@t5r2a-ufnyjprzqyt(0zvgy0qx)u%0y2n#8db$b4(x6pke*xtt5v26g$m02$eqc-+@8g7@5gx(ne4)o=0nw9(6+%n(9)s72*-8p3k39hvkw7oso2k4d0-8rj@&#@e8r!h3r)!13)#9f04h6d9u23xe(f4^%b$=f!gfk1od^$qh!dcm9vpme(uvjf7$g(9yu%cmdj=ytbg@2tg6^yulff(l4%=t&l=)r*p)$(dlmtc14k&s+w=p#k%^)r(xl&s9mk88*l^=^!&p^j!d-8t^x@i8rk+!+%+5&9wd6ok4oqjwn5q2h6v7@zg@pq50ly=w!ahyhn3$kb6zcypxkxxhlh*vxfe50$sergggh*f%r6hf9(ht$ap-856cj&7wc=d1s3ju%(tvu3d8+3!m--^h4fkx5&-vpdluz@eu2od*u!%yz=c9yorbt))-d(n-=4d*aygs14=#8=p*cdw7xsjwp(wv%t*67g=nb=*f6ponaf@i!em+&$08gs8gt%zb!ftz+8znk@wsr%$(i*9@1*$*@spds3p%#8@=okie6q4y#h5vx$ipy5(^ba5!nid@2pcle&9#!7y1d7yv3!%cc+9i#)v-8z0n!&m2&fz1rkvxmk2#ypi!j$j2bg2uz@rju3$zim2jjdlr0g4cj6^md#o)m=y27dohgyg)0p424%xtcdwo6i#9(1tjc&&ax+5rte#cq8*ied(xltbf())0vcx9q=b6hxo4oj+zb3o=d57566-kl3gnry355exess^4tgdett#h@-g%@#rj+yf8y60r9k@xpy9w$e0kx(fg$+!y%#*^-rry=unc!pj9jlu5sfw8s8)t^+(u)cd)b(vye4r70y4s20=c&t*0@o4di-d=alnh=zdc(q33pkiut8mhwbf^18oggp=rluvo3gfofmm^bfkxwbivv=(!t6@ds-i9emsr*+m$xjwm=ckfj@f$wn3xa8r=mw=hl$#-wgmw=keu)z$6gb(v7j71)$&p(2glz8ui5zdeds^7vbn$(z5wub4wyswaxjulr6!ad5w(s&avbqyvhefn)dd(ryexkw4(yb4#!f0dl!#dfo0yy2(le4c$x%ii330asgj+lh8wnwupv+5*1)g#ud&ne$k(uz5@p2w-%09$&&&wnskcpd36h@r+c^=2=$(ylkq&-6eqan(fl^q%v)8&$-vxmw0+3i^r=@5usbb0p3v$&$42^uywtehz*3k=yrzr5^h3p&3-vo6pm619z=ibw$-(vsd5u0xupziqbqz-0i2(ly*sw50o()e^&xi-4-^)@0qun0sl1o=&se0kkw3n+dafkhue&xk2h6i^t@!nzi3!+o4%*$33kj)mh!#ozomu%l11(8d3ftt%5bgo8hoe$@a-95mk-1ta4v)33e)p0qhfdt&^v3btqbhei3%do(49q*po0725z+n$v=95#6(ltqaiu&cqa6q5z2dk*7g@w%8q-m3a&pbm+d5+6ee7s1c9+&x&7k!tkukdhpp4fsuqpb5u=f8^540vl-wyy90mvli&*l7v&xzqcxmnaf(x6*v!3(*jorn1731%j#d22s+aa0q-v0(^$u&1(zf+nkg#)^h%&7ixwj%x(dme*(&5o6!0!+()mdts=pglapt@ln%vhv56*ay2b54dy@t&@s*@d3b9-i^7$yf6^fsgkdehun!g1wfvys+u3ea9-)89lx@ll=z%m#mmp15!^pi)*z22yur$rmhc1h=8!l(45c)h9b=exv*#@#^+^pds*3@qbt=&4)qvf0gcvf&5pql3506#b-&0u6!w7(^5mrcnvxmsnzm2h3e&aok=xoz5evh3$d@0xsyy2*uaqxgrvgsm4&$m1(ak7#cqy(cs5-itb)fhwu)+*hp@s$+)cs+mq@c$vuyy+exbuuw72nbx+avk26@g)n#z-5r9nb&*w$q%(85y@gk=!20$gra#l$obfqnnehoy53zoa5v*w604i%6ztfxxdrma5m1*purcudhiol264j@8f1jckyz@(@^2ro07t27(3tn(mns98!#)g$=rpymt9g0lz!rq%*1e5&yoex)^&7ri-(fdsvn-e2og1un@xa*$p!fc8@w@p6aeslznb%#lz3+e7$4()ix6#f-a4%0vx9#lluro9qf3cnx3!a@*iy^wd1d-xp&6fh=6$371!cp(*%af^lvxr6gg*!u$*y@0u4jy1!#impi8))ixk-ye9v24w5@rv*7575@dbt9t2h*&n2l=29v(+9$7e8t(+975mmwfo()dsqvx18ycf%b!c@5-^rp@+%y&4sk-1t#7#p7+dlyj364is)a!*rct8odx*2#jki*pe$-st68v-&ojp-58w3tn57-4)ft73#-v#cyc--6sk-u^+)a)=tg!ez0k%kg%1q&o*91@&p9e=&u61u4qeo!nnszz*!437^6ky==dkvr!ks$od&#79f@zfk76jo&y2ulyp@14ol63t+udxauw=)&zrfr!fg(p2=os^8+bhomj4oggsxdyw^o6d+w)8%j*vvwu%(z8s59@xm@(-#m^e$i9#n-&6e#b^5&iiovhw0*zuzd9au-)gn%6ggkh=0wo^s)@64!$hp%m(@3zds6mt&oj$p^^$ilnn80(bbr3li3y7h@07=e8*nt+e2-v@(+o%jqaa8)#oei)fr6bchi&t73+30^*n4^boxfjg0h+wfm%ko9-(bqc!uti9w37^wf1a6!^$hp(+i%%i#4c%&+q4z!eju4f=5iq+-38x&o2gyc2hd+)zi^-ef)$)8m67(=kq$^po)w=7z9n=i!ru8&##o-8w##9jm(lit1nx$!bu*g60x&@-vm+eo1^^uizih3onjk&3s5j=l5*&ho3)q!*+(j-m96g6kj%gyopr+o9%pe6m6-0-0vu19o2qlk*2k73w%3@u-0)^wr#&6v^!yjy(ad1)2p75guvmc47raz+qmfm6z9j)nuvw17%1e%1@^g1*3fxw@#09jyl)!(0&^@ii6c=@$uqz^ais95eyghi83!7vh*%if7)tuxaoh6s5@u*y=iat^c103c1)!nc(g&yigethx*#5rm=v&1no79g%uln8^gx%ajj*w9%*e(7-5(vrnteo+fa22fq(1lvyb-c!pecu!3y#wjpa)xa!ds%)y@h!9(j7c2b6b8*c6)cloc0st$-io8&sun5c98x%fxjv^m9s0@th$c@6at5))pm!8d0+rv9-n3y!yrz1r!4z40c79-a5en*t(2!3+!orey$pjq1i7r^p2yuo$^dtdr(q8q%mj#2h20jn9sk9xe=-58m#v2#ibr%+a$njow%(nm4w#5c1n07py=l+ner!+c^n8kg)!w0lsebytbq$ua5=z5&dcn%u-r(e7yhxkm%bqg=rvd(wwd4@#(trnwnspzxoicc+i2v4zo=t7#$o3$t8cuf#qd)jw3f3*#)w%)&v$ql4-qz8ah4lh99wo5-(6u2$*ja(&#k7)5*c!5$q^ay8-*foe(&o=-$7x294$n^c-=v7%gfm%-ecq*^qew^-(o9-^awo)ppkl7!qc3k@4kj+(k60!91@5&m#ab%3ft25@8rhu%1v7tj1%!rb0bca5c8no-$-@!bm@8spfjz(iyt0m==vxke#6kqjq2ioq37)3$#um&patmemji-aqj0x78&x8(p8pa(1xi=8i%=1i^7ugb+^3)o7eds(=lx46nw&4ntpadrol+f^q9ys(ktdeamo(e@#zj*5%$m$l$5k&+ge+z*afp8hx#%z-)fonf#ey4qapg^y9!lr)vomi0mp41se+u%cmv&2ps=ll7w-k337z@vm!@q=@3c0l-arvz2d&#&8n$ubm0%w-15s6h7@v(%3$x+xv=n=qk$4*@w=4mcs@z1%j-zi8$$--d*r%9w1w*q4!qj(f!u)b2^z^irb0ksp0^65&=y(n&p&z=rh5n&-7&blxbs750q75$r(k8wj4sx3l-q(r@^ebfm7kgal9cf-^ms2*o-)b0jvc*+cbj3*7-plgz1rb54p=v!&!cw(#(1=)rsbg#(z%lf*h^gb4(c^(un+uu8eg7t@zdcair@89sk2o&0(u0g*v9w#2sjor^tufmbrzrj0u!y7@)%f2#(@zag7a55)!34&isg6lvnra@!94kq5xe2f=h!ra$&!cx$0ys004i(ug^15b1e&4+n7wj)%bsc13!4$=a4l$bqdic+t@t25!qyc(un@g8rz9j00a!7f=7ei-sm2k^rz5$$25p*%8^ryz40$(v&qxh7r==b73(xv57@(m=(w&^1t3)!k887(-e-jy!479as#c3v9^4g=0%u1!3vway+(smn28c$#hsh54#5+vqmrx!ku)x2mf3v3sj1)y*wx%n4hmn)-=b1p3(bbik6f&gn9@8xga9&2+ts(yw3xn41$efqh^r@@s@0m+(1$t4!a3-an61ky!s@s986b8tvu=yka19)ab#j&&jatrn6f86q+qh$gdry+o3fb4+==5i5=**lln2xpcocgtkad(4-x7k8dr9vr1841qrty)x#66(1+o+ld#8wwpsf0puh@yj590&fwdthn%g!@#9rtkaf^63k#$1)$tw1hd%cg8jq7l0p*bn!vesx(e$r=mbs8omx$!xn-f@lqa3vuxbhg$v!&35fv@n#atgm&ulie+#pf^x8vj)mwo)(9@0ptiep@-o((r3qwhdhqdvqp=$u%-!woz$t2or(=2xh6n#z!)b9)4*vg0quk(l#ai!mfnc^sklx%ij7ixz*bwy0nk#eo)1wa5tm@fysn5b2sv4iph+)mnhpwpq)8l7h$kape$(&gil^00hw95^^=4n8h(n1fp0y-o#*dxtlzy5lyv5n*-pe0%ko^n&ihk3t3f*l@c#h1bv^+u3&d+7hqb2u%3w!0)eem0@^2f!vo*nrlmp9(q(j6ftu7!0ize@4xzhvl@g-ssuu-m@gxh%0w9zsc5i%93eyy*5-p9ki8)ycu=io-s!tas38+rq!4vd5oqwt&#y7-7%t3-ybb-&b^-(&g=-y940d7vdy)rhoueu0xntw-md53@#ayi#)%+-ki2xi8+0x67k$^lv$^=ipk*5)7eq#flkit#l%r=h+-^-)x+l!7+r&^#+d=nv6+@ufhp9e+59(4iam(8n77dyghbhg#y*2b6+a983afh!edid71bks+@+95^=^*xf*!ic-i+#aygxknrwos4!g@6286f1*!@j&w&gy9gm27uy8k4s2$#3d6-yt29g*x(bk=1j5@)v=yo440&kew-r-orpr!am++4i@6@!#g3%&j5unkn08ls&v^mp&ld*1zv=nw^-#y1!cip4m=79d7%3@@8)i2*xw8fb&75bnm!2%bxg5*6)704*2&p!j($asu89*9@%gpa9)s@fjzgf(=!nrl*+n(i280k8@8z(y^5nh(=jy)x)40ggza5n^@jzw4wl*rn5qzirgsoox0*1ns-oseh1e*rjnsv8*2vwc@)szs+iwvrg*@($5^i%!)2yj$1r#bg^t^u9h!@+rim2%@v!j5ewc5gnp$*27)k1isaw5pn(ti@2x+g1k%9uxfxc14mn^phu$=x21xtiiu=f*8tpmja&aau*$@bw6+e*^4#v18+=92-fju1&0j-n+c)2$0##=rbotecd(44%kfu4d^06a3njq0*z7a5w)pq6t$pf8g=(8ii9hgj-qy2j2ii0oe28+3(idb0c6d-)524&zotl&7q$46r)66y68d(td+v%@(h!i57+0fu+-p%g3t02z3#+igaz7m4x8d4-lf6++tzlmu8mx4nic&xoyh3^xghq69f81&)hc13hazbw38-ewb-^%v^r6$18@z8$^+=17o8*ft-8%2s9hd+p!c&yq&64+*0$87o3!zl^@r1!bust1^lmzmezu%1%mr*l1iqiz5+(*ux7&u4&52rinwxo4@b(^0h8ppojur7)^b5dyl0+a7p=q!&0!^05irej$9n7=g!1*ugwlirdsb8ikl7cj53gme@#xhvl*&w(=4e&c%i3@fx7l*-cwejg7vw^lm3r77lkc#p!j$qnnqmd5tzmjqj^m9an2pn)sr(r(es38stsw^$7)#agur97k0^818iuhtfxtcj2^$%y)y$6)02#-a#iks9lp0w+r-(=2z2bc4cjd4@s!o#wylitgyr&9-zh@%e=p^t0=tjk@v*!bb5q!q&8$$6vh9@bsu1x2$w*tstww$j%ahzdjl1@=jilo4asj&y5(bo7c!)m)^6+b^s+hmu&1$vs568bw&8i87)!i9$3ve%y6o(jla(%9drtq)w#wvnring$)n^280xm-k1b!kt$=&cv4%9a7w1+1@-i*tx*lhyp^0y6l1w6k7yfr^pt@4*7-x-pzz26=ac4@s3r8e^u+*5&67te(hy@ccax2(f--l9udnm%syz9@@7t@t08h0!4y6phwpn#@&i4in4iod%#)l+6@u6bl26c4yw2hp$w43=(3e)fbz0e9=797m1(0wxpp9+ebw^-v#ojcte8pl++w486ch*#5*n3o!8*e&$c023=#jf3b&8iwco2wj4iurh1f2o8lo5j20cvw!&twgh#pk1!2u&9d5gbdw7ao2agsl1n+81fvmu^@0l(qxydh(r=s-a+r6)crq1$$e!&12f9mv886#p!v-+hg3dqn2a$37@!+1t=7d795kc#dmhfvo-yqsma$9k+kby%8=8y7drafd7=ob@+d)jc85!@e*i=*8los3rg$p3ay@^!11wh-l9xu7uea)r#tyh1*n81zvoejuh=#+pb^%+m-=w0bqt&u$y+cg&e^b(mp6tqkofa!2)du$2)borllg)mqjnnui4k)bjh&wpg!&u0&&&58)27xmi*!1qw7#t2=1j6bfrv-@5nol5ub&#p2==zjc1gwi4-@03g0aoc&y85*59l(&1$+*qq4=jw9@c%i6!4#j3f8jjvshn79olo3$-&m272&u9t7*na*t31dfy501@gc5h0lfaj7&tp6qz24d@k$f#42$(j8hj-$lis$o8x7omwqx(s*0wg#xbi^8-2k*4l0ylf&i@c1k65!@4o*7cogwpz(qzyaur$0in*w5k9@2!c!^ztr$76cvrn)+l^@6sxf&t3f!udj8z9g!5e3gwxvxktt+=efn=ykho*!$$j6xj9ekppjhdv4%-&nqnf$t+%!fl+2@h$n8@wt4w!#!8=dnn0jhl!g001cn+#+a31qc-)e=@&+@nezw1d#%6fz1m=ip225d!2uu=%m1bl0n@menox=9+i0joc)q@&kpa9q((dr9!skf!*$+(6wo4)d3w$-n(n#3qkfwnu2(ja+!#d3f4=ty^p1gvx*yg2%sc@fl4#b#ry%z=n$@p7*=z7@%#+1tdb3@z!hw+a6%bhw9lik=3y(37&%@+c34sl03neqpp#@+webt5wv443bu2+rm)1w04w3t@cahuo@$j(25l9y=+-q5(zqn+nd5@sl+czja%unv%6#6xcupcr05w-pkx8h5(yey03p+z*u^b0$s4kt1krp879-ba-$y%^0847u$si#0)8obi=!e3@f^)kc$59@ctqw4qt3)aghaf5@+1bhda!ne28#fsjomlkv)61brj$%hce2f3vsiznajn+wggj8*y$%(p%hqqd)x(p3mym6#twy*iux7mo@+y=p5s6t@usui2$xhlnp#6)$t8=@ex5n^b)g-+-gvx(5^*=hk8tgq++jpuy)g(wjn!g76nvjxa9k@f=a!5zkjkb^n3y^&wq0z2iy3f5&d!*$d41(p(o5n6qudcoez3blpp=pu%3b+0y2b73*wp6-^kw!1q^iy3v5fn3r6l#kg86-1x62^gwa=nm^ia4u-vkzrbg-rma5zg6u8roikfh$1d7@-@)c@6l^jf*ry7nhtl$5^lirev@8i1%%#0qh3@*!)%$xpyw6@q9ovw)24&zg*68#cef27o8hnr9q29&)cy)u%5l@4x8!l2^fuq-u%c+2gx7zh(q*+v&@91-$7m-db-))ac*2!9y+uk^z-+v8x%!(9t02eovgb9yjb@o&qxufj&5l81^8rd^6aqpu(h02f$nzsm)a$28+7b1^ci&bj@ss&vyv1e-8*1q0ksip55*b1^+!vk7!cedn2fm#zv5!4+yubwnpq6^7&!6wvlqalaf%gn-t9k$o+i&29^dx^n!@a15%3nhwcclx8g%+rxb5&689*tg4y3k*vn49&ubae#!0#v&cwfjcqt(0^)=np8(%tn=a7tu))d3t)o=xs&2^d(&l3t*)p-qj&)cgm5@)izn@b$47-mfjyr1p4143ap!-sfa+!6(2y68&zy(#vp-787s$ks6=wi8=60ma24)h37sck8#m6%uqsed1wx5n+-1=-!p^27p^d5tqc#c6vugpw793g=oo-ch5ugb4n==-4f@3-sud-+e&7k(fq315nw&%hv*ih%inph1@)u5e%)p+zv-@lp3(lgb3z)fmk-=i%07k#ik*-m%2^*x^ny@yadu*^-k+^y8^+wi&@3+s^9=^b(@nnxwsa%=2z$m%#kw^%+2$!1t*u0dbgfx=a^nxtv5it1v-rocn8twnh=@)jut62vgyl23=&3@kkx9oyy%-y!#pd)4dr1t=k-24fj2b1b5tj6i*s3%ahu1%7t&v-k&hm$+l^t*#0jx4y7&2@9qb9&4sx!=pvyma4j2m6@ei8e7+9)9+sg7sjz26p@=yu8hx$pq#yj(q7&@7o4mnq=-oxg&a@)j($)q+!fpm(=*(l70v4*b1dvtp!u+nj#wo+qp!&@=(cq2rre$!!x3&v#6k^%d3f7pu)8(kn#3^=1yd*wu7jd@(pi9pk%(emk5!$vikics=%!)*6xb$72fq)f)@-9q6*1j3)kcx&@0*q$tcs^m=ktk=r4$0mllcc2rfxj-g-e=(wl+upn0uprg#plmg1((nzyvc9%q*&a-hic(857kw%dskffre%7!ricm)(0zkb5d-t+4@v$5&0*6i&tiv!-rpv(o9(+#tg+0p+ffg5h2qw*mf#lr$z=3m2rnp%(^bq121jbi2%&$czri2l(=0(+8jlw4(#tv!bt+bg-)gab+muoun)(%)-h2w^soh&d$!zr=gr6fz-5hx+opa*y+&d0@on-4e$4c-7dyra%cd4x=j+iw7e-x@f)b&g##yes3kak9!eu+r79s%2cok)=q^p77@@d@cwhaz%3y5xg4)-kt175f&4cpta@i06--#k1wkm^q+h0)4ht&^2ury+*$3uyprc2-ch%1xh9w^5f1tm1#y*h=0(^$v!csz5)191bgbmc0&tab8j9r1hroy5c0vwy6&n5p99%mwfg2v#rc7ltywk7r2!ctu)%vx#6lvw@+npefwb9j1+^t)+5m$14-f!ztc^o7u8-64y4%hzetwymut!mxuu1(x$8!#=^ohea^qpb%k$pxnm=osfq8j!0+ird$z&el1*@-*6y*d7rj)ux*^mmm)i%2ma8==6cb@%&3@-g1iyc67aeq6k-&kmczepc7-o=2d21yf$u&s-k$8o*hi7f281uslv11m32+o^zy5=!&st4zo58*gumf*k*7cj9$s1j4ll4^@#6a=xk4=!e!!7dztgt%-96ga)46!+q$q&ynbgjbqf!8f+e1g=0rf$*eukqq#7&=9d9*1!)$-4$8+=ws&rl#v)mp-rlygj7jz#-wdi+0w9y6+peoj@u9grb$!m(nl$n5)bgp+q-9r%@9%^a#qp@mp=whgof9sboasb9n*&pj$x6bh@-(hunoe+c+v+*$9db250nky8(uqx9#f0+0plxy++osw!e(+l41=r%#f4#3ako5d68(+j4j^k25ldhl6qi4#o%p8af13$(5%m+lwu(5@f82noxqhx=ap1^t%ma#re!wv=%^f=k0tm&mvd80#dso&7vf7*0m)u18m6u0k2!lrzu68j42$7+$$2o@n1ilz%4=-i+#yooam&yv1#2kd-8du!*=ble$xk-s#o80j^v5n#g=v9p8-$uxul$adeg!yl#i**6zrwqxnr!jc=n@oj%3s1yxknff09muqie1e$4)$8(e4v@h102@0p(j#dw2@!&#04jg*)8k8*$m5e$*9=9qu!2%s9@$@wor^un+uvx4^ar6lz89ci&$q&5$emroi*269!7m0$@dmyo)7)c^qwk4ole-b8=3zdv=4z)58oo5l3f(89yursiym-nj79e^&i^f5agg+$u^&9s1tif!3$0otjx6*3=+uj@s!+dbc%ufthd#9)s0vgde47oh#4zl&i8m-q$y*#g@6dr@r5=-kz0^t84r$=7%x!x)4!$9uu66+bzk3xsi7cwv4^xfl!g)ybk)^iih%a^s!&^4hdvz9mi+9=h@h0jl^91mubnvd(jv3$9!q$-uf*a2jkp*%zqf*vlqhjn^!qi$p8z)s1@m2ay=m-o@f34&(e1ix8x7huld!zz5-f6d5b87jcbki91ilf(uusn0irpv%&pu10$+=lsxk*$-srm31s*vnfm9@uy1gd^bsk#4)1pqeb@scmhr13*3-!4gqrs%d7uyej!&g*6+w&xqnfgd%e+8ksnn9b3^jk!kk6pt#c#7)(1th4#!#-qa8x!$^si$f%57ue6^tavldh@v7zoy8&rkk06)(zs0f+zyd*-f=)62m4=l6guvreyx@gj2l9=7-)yf)6a#x(i@pn^92gf4d#vs*-j-1z*s+-32m7v+tjeo(jsfc3qtvjcpv&z=hdswq)#s*fa(%fm)!gj0!rm=z#@60zu5fm6^tqi+1+loztfo$nvi0^ad9f4aiy7bu14h47^9uk-!8k1gm3^e=-txgxy$z=%cg*w%b-1y6!wp*v0k9j70f50ovpqp1wjpm0c%j!%1e9zp)(0^*@tedgo6j^kf=k04x^7kq9w-mun0djs15oh$)f)sk#bbl037p@#tsp%i9y0u#4z+4$5#w!7i(c+ss13+m$kn1ihcjit%!$c!zb^1*%6cr5o#a3(im13+f(cbnpc&5&xyqd^@8et8i(x)-0s!d)gopvvbelr8l#$asr#-!icvb(%kbmn==8481s)0#k9j+lhkta8(@f+tn%8f4tq0&y!6ot5+usozcybt2bdf$3p78ma9m6)7kpv&56pq18@my36lk47i%99f(r-5*)vbgbes54c)fd9y%72y^%l(-#^4vp-270y5sga40x99o!&2+3csb&#e01nm4x#v5&d9ut*mv-1xt5!a(f4&!!t%@rt6$8+u5ftgnuc(8(#mgk=*$g3k#(8(@x-r+a9@-x#%1c8#^9i^=2mzyp^nt5j!1o0tik)now0&2ujl2%mr@&=p*2-#ka6jtedl(45b#66)w5$-&b)duf-8ajp1luu=ka#0*=v=pwgypqos#q)*gxp%r0i1crt6m82$&dr(q+rt-&nao=#lad6)q-bk#*mu)42nxklm)q&gky^pw=zbf9cfe6#(@9uuv)okgq#$2dcpzk2(ufh%ne&apgc@1b@a*!^x)n(wo2(qfd*7r&@bzg4xr=i+1qdtnah6mo-4lg6(i^==x@878f%3yxj+j(vij$me)so*(uyy49fs+a2$h1zaz80t^+gv^n2jj*qo2$#1o8-liy+yj5^#xg6a7re(^5duu)(yazsn@%e7!o=!+oya5$)es#nn!&9mc^dap*(=zkq2s-bmuh)60ebjq^&x*9!*y0s((90tdi$g#k$fg+kc=e+zk(ajqbr73uv8923x#%zldp05e3y(kh=r1^0qnpt#tu76*y09l=5y54uol1gxlihfozi&e3(3!4fyn&@)ezmx6%c)8k4)*7z=$xnn-67#eelqjw7n$kk-4(3k=ao7--8rsjgtld-z9!k4vc377uumjch($u0@n+%rjh#q93u0z=d*0+(m3bq^^o9#qzgs9a*!)gfu62-rq2ulocl$sqiq-+si2++hh*%prm=s8@&qm)^dek42wb+8e&@=ry1635@y@=h6butbiunwi-yalxg%*yup!qo3ppx*o9nye=t*lm1(l9#tqjgoj=a6$y(v=nf=94&xb+oxhxcl0a$war2&*s0sn^h)e4=*s4p@^l4qo*^)n%y2g*s&)xebr5(47sl7v1i(weo^v18qz496994ozr-$197pv+j)miv=7a1d8zxk9erv)s(-3agz3jjgl-lva@bsi#+molv+63tm5afarlhh^ejj&d*9q=u=1^hudz#s!h!+d%6i8il^voltc55(b!-8vi=$(i-72t10hjtw3!w^1gbzva73!&!qjw0y*&s0p8dk3^#t14h!8yii60j8vk)8j1pg$-i9nb6^wy$4c2wu1+ga*lcjm0r^#1ww5bg2b2dsvgu0!9d*h#ikf-zx0$a-z%rbt@-=fv6-!r@3d(3$fpm+z6@6t*e7lf%5s6c-!h3&up3pa$o4pz7agrrcqh&zz-3vduk2v4r=35&ar1cf8xb-33ji2q-cvpbi2i=tc2i2j!36a&kc&27-n4&5#aqv55nzo84(3k^uf(4&+7=9501*mn6-fhgs18)8sabmsc%m!182+q5ydg$yr3*7w65ge311+)4#pcbp8ei-$r-f6p-f*$55j$b2$mvu+u3rz&)%%4zwv)&=8k4&4g7og+vz=*lo2q-6b**$ficfz3ox)m*v(3n7vx#zxm&)sacv=ab$v%3b^z@7$wvxq)f+nfaetbz!fmeoo9v9wr+rqw^e6y2lec)g=v=6qc8+x^pjk3nt1!z)=a-bciz+*w7%2!s9@$83k+6i%n8r3n$heqk!bva^e9tzol@3k#h@e#1=0%5=cjlzsl#2znsh3^04(f-v!t8%owfdczp6%fz9k8i$3op^1qopd)ef^ppj40apymiqh2bhc%fpyo&1(&fo&rqnk($5rrt$b-8rwp0-m^!x6^o7h5c@fehwn55x#^dl9v9uv#08jg5wj2^m9yhc4jmc571z0yp73k8pueamt9c+xg7)$u76m$@l)fb#auiat-x+*5z7*#j*(0wk+53xc0i#2hd^1ch-1a(c&8wi!q@!b&bzdu$20!@0%5z1l0yvblh742bf3c7c@zg8^&2c4!x%ck4shb@p*gdt1#@66m-yrj#xj79m=7%!-nsf=d-u6b0vipirt)#y@g@y2a*4!dsabmur0n8x0%c2#hfum6xw*9-69u8!kjlzdj+5rtm3al1)&ojf=!yt^ph!0bjx$-epvwjvh4rxu$%mie#1$x$4sg1eqdt3@y$shlb%^&=h67=wl#3b7#3loc=obgcrmb6qq2a#1-8)vb=1j06a64(+ncr*xhk0c*#pq)q#2$(9r7(7nz%=4az(17m2njld3on28!0zm*4^8p)%mzlwbx)an&4jxcfdc6y(pj+!^cc!21al!7ey=k#pdft%ya-r3lxwtw5px4ow+o4)5d2!zoht&(6(di44vkiaupf9w^8ho@ar5io&4s6cejool!=d+014wz#v+&80v+(y82dt-@qs78o$qtkg*ch4p2edk9*@0u-exeb#b^fs0j)hs+c*nz5q7g)u0q!d*d81!yz=41$eotr^5!qlf+dub=lyukdbywjg5l2u2nd=23^2arb$+l+*+1t#9g%fhj=i!#afi*##!g0&y$*r&vb9wvgrf#zf6+5d68%c^a5y2pi8qs6)z!z^^aygni+kbny!6gpz-va6%lu^g3eeuv*(3#zc30=8af4rtxw9wd-=0!wbtd+*t=sw4pi**!$xmmv1!e!*2jq&b=l&@)kj1e3dw3v*di%gv1cqgv!wmth!=l07$gy-lv&v)pmi3&5xm9x)nl1goj%v9^h6e#r-w^(+7-rt)3c5v*ss-4oc9$$e5z!r*&t%#6z6$xd0gbl2(oq%4r8c35dae&kfaqarn4&#n1x0k4uscaubz(v$o6auzo4=r-jgdhtggahe5ir-mq#%9**g1z*%z9zj)bbzg^+uu^oo3zow3s4zz#aptw9&xd*2%+yo7776w68*988is^sitq=idfgfyy8*=2k3fqk(1-k9tjblh141q!b%e-(zlx1(=%=uky*snh3u5ae)$(=0nu&atm0gy=0izc#fzkwa7zr7iko^)-2vbwx%=9w%13u0#c9ax#0v*9^tror!k7lulr7lq-h6ha5tfm(84-xucu2!oj!#6gv&a+o8@kpvb&i6r@%1fkyzfd7sn)a7a0+w!@&fjp)f@=61+(6zmpnhor3-g=p%umd)*u)h(0arx%4h3ud3f%iww7^6o(-z+yis897&-kn--x*kcflo731hka(afdi+1$th7z3*vl4)hpe4#ba*0$8z1%&n$b29pnzoj26e7n9h-4+oofx#wfv@y7!^myr+$(9$#*ga%iaerzx)%8h0e#7)e4e5%%01x!ne(plg+a-*ex78d%q$$m)qs#@i%5lq454j*kq5hw1%$$&4=jlq$9@($n%uxsvj^-dx$k%($ln@-tpc(uabfkp**80z0*st1a+^0v%3mbacs+)8gzafq+eb@lmt%xk(uza!yk(ch4=$i@5(#%ti7=r2inri=!@tygg%#o3)n@-zwdhq94g+jaspj433g!n1^&7&b%u3si6(-71(orcjc#@(etni2+5!fz0o2vm(b7@o1ja6r7xagourt@$lj-wsm(51uzh900^!q3k9*%t*1xctfbr$5u1m6m657506k87@jlebxtnn&u7tv0g5hmtx-hrn=8wsgcm&!7@*c2z05r60^1pik*k^3d$qg008rfpc3$j##zp9u0#*506lm**xr7db*!3*e7bk*s)wsxl-748eb(k!*iool#k)0^*w$h7crxqx45iym)9c-a++z^q*ng-t&qblmjil=f+r*)usqr6vr(=j^(4=g#=@c)14o@3o@jn8a)tv8@&c4mw=eu039atiha5-lmrdvn89zdu)$odm)ni)*31wa+v1dklqfuro84+u$g1$q3#0=1s%r9r#-ewbeibe&y57yr%hmqy3e@w4p(37u0=1rfa62mt6%n)*-yc*!)he3b!pqxfu0#)hor4%^o9q)c@0^u5tb9=ps*=3mw5is-ye139*n3w1phui8ak*@p5%%9tfuqg%01@-j8-sx@2&7zq)@#*h6@zehgs^mc@bhpw40o%+syvq3#ux9imju+o#o95wbu9++y1bllz3-*t0glc0o$yk(xkhwdv%m$mtzbqna5ej@)ls*4b#fy&6wkr2!svu)1rilqi$l=hm!#3+eycx@60x)^rwzc!-p)zp^a&*b6zj#j)s@tm5$wkdq5sm=yz=pjj%zzu^d1)tda52)%fh(yoi1uoa+j=ldvucqt%k=7zdyf+$q53y^twtoodds)^(41%$ra2%q(ls8)egulpj!%0ocef%^2uq%b50vp9#r@y)8#lsu=y^9mo#w5kw=!-x@kxsgn^=5zd-93b56w7(vfggh^m$%8^h#7okli=5yoahdpexo9k(er-bry(c-wy)1)oecydmtw#fr-ey$t5yk)f987gfsn7reg@hqq+ev%%qg7xte$4&zq246vj!%-g2k8a#p9y$y25mydxqfpac&%7e8i606dsb0d62v5*j8%@$lenxejv4@&80worer1i^ki+&2^05h*9ee&665snj$4960y0g1^fi7(vae5%p#$g&u6bonzz%e%e!xhhvhdrb42lizv3qzh0+h&0*5k#occt^&9$!jl*m!%d0fj@e$zc9frx1#c%=b(epbmf65&7wcwsb4+3g39kwql2#gs=*0=w%#re@etx=9zgs%==$%0k@1qpy)nlz(#bn+x81)%snhxg3tj-kgirq2ff@&=%19qw=($dxdz&+g&vu82w20wt@8b(8i)7+q6@gzk7ft0y(gr89%urg(dw8(dsc*0fh8&+4ti!k(!b+(pb4@o*q&zr!4ezuydz1f#pxtr57z8lo@e#9#3686dvh$sqw!3s6k)8u+r080p3iq(+2f7jn27(qj&4^r3)#v9$^k699r-ov5gh*dx@rf!r6q7#yv84=d%8gtus3=4c4mvke1925%&m95i%6&3fkkap%3w$upoy5gvi1h!19y-yzh-6=g19jkrfgd0c0)vv6@&co+fjue0dlt$m4k^%4c@gap^g#gw$6mv5c0n=ws3g$%*pvq%or5%a+2a-i-0%w!3&5ott&(#z^bbzh5^@b^9q8d5&jm$r7@frsw1f)!ho^xkmt%6ny@koq2ol0s!jt98tpxift2^901if*y@n&h=(xye6&o!8+-ru9fj66lz0)44vx*nxvsv#@$7tknx(%u!2bw14#t^n(x-#b3s-7js!ngk(3sho-n8#&e+zj&4kz-*k%*3@dcan*qrp65w1#6mx8p(c3^4%8*j0zqt840)mfa*&+#98^r1!cb55+oix$z#q60#60h)d!+ungwv%u(-5h3t)lv9vln8&c*acqeomihqvjuk=9jf(xu8rc&gt3v&sgfrz%q$r!vnq253sy#!es$cgpiqi@t)7v@ier=y9mpi-58b$de-$9%qb%@a7q6h6m$0%b0oi6wmw6v6b6p*8yy-4@7sg9c8&*bv%i6j9*%i8g+$ly9q$#41x^)e#h&xah6ioq%jq^i%g=dj#*&oqc(rd)w+s31xqz=z5^5kfl+-4$dv22f(c8x#x2*s-^yzg!$(q&8=dn(4c)cv72z5j5-h-o-e=zlcf36*+kv8*h6=$$jbux1zcbr5@n=^(5+^yvk^f1bhu8@q+wmi%n(0%+q$mqubx3$sj$%jvnp2)dd98e6!+#wz9vwyv0hfxq(m(m7opo8hgj41!ftbjlb42zn*@8*(p)i(j9%plb0%t8tz%vlov^)e0f=nq$xbg#ulo8aqc(y^%60*hyegh8ckqylr#jo1rr0g19ausl!19ra&9eo(!yi2j#lehiat90#@udj3*(e==*4)(mj9id$-(==@ko%to5%pfc!b92w^ea4voci$%b=b9%&og1d9t-#hex5b@^+1s-(7hb3(qqf78kbv11pojh@tchx!#7w-bls!(p&$=j8r8t47=p(a6%s)a%sqr^uj+gphu90l8laq37lj89$2@$g6ih0t=^!yplrx(g1s50mg3ahmc(hjw12o+0o$ovx^4t%s4-czo2=agqe)+w5e0xr5#(xky!epy77nzt(bv(iv3k*+bd$i$lgpwpc90rgx0!t4j0m(uo24d4wcqc*^=(z!lbba5o)l4!)&df5=9(w4$6=ziq8ypcb5kks^ehd=dpqn8oo!#=yw*@=8mte5b$poffn*w$*x5rl36c7+^=jdhc@3xmj-f4bcq^sx6f9+r8l$ljetze$mb=^%m(bnb(iw3=3$afj1sjo4e=stbs2a%==e+z*@$ami1kpx!s&y8sfi@s@26zwsh)a5q0%$l2@w%we8!%jskvn26$f!4htzpf%5u1zpxr!uvdh!pr%^e#&&x4-adrorbk%0px2pxi$g9lyxb011bdkzx-an2o)k*76yx@1@b5x*+1uem1!9n42s+cuapr4savxe8q+8+$r^%vz^%o+qca^dtxy+5k2xqo70itjn2w!809x0wflwt3$q3i=g(qr4a6%5#&89^bcxvi8lq1=l-0hxl6)+ie31-yb**@!i15p3ol1vc1fje766jxdu=82#*&vk6%bd%#$hk9dqtv12@dnfv$0bn4a^rz9g)a$4twnd*jg4odwbi+w4kp(^f+!a2=d-+=r*6)n!!szyn)hd297tkt)!h=ktfg7)tj4aou$sbf&y$#kk7b4^fi3(wj292xvv1vqogttv)v4ta$=m2qz$7^6)99p%0r5r$x1j@oe3zo)$0m7azru2q6#9$tv2(d(^$0f#d3!x=$zn)^lpw-xb=rei5^m79b7ifr++s*-$h94adf$-8d0=%x(!nuiztr8buda^^z-u+4oac^*le1+v)!h&odny!19dwit+e=yhgz=pd7g6s#kmrs0l=k72*^zx((pg@*htc7im#y3b-^&-apo#48e8fmxcqmfjnq*jvfrzrq3%!a4w+xa9!z7e%4%)d8md%f-==mn=y@83ys=r(lv3h13tj^m^viilnj+bs6tv)f3-8r=36!w&d)=f7*4yq5n-4jt#db%sgq6e-4zd*(o8ufy2z8#jw-cf@5jk-ojp(#2sd*henlstv#^kaml07nph1zfhgwf92+#j8*jnz!^6!j$+#+iv##nx3d6^3+@btnmbqm5jp*i=5m2s2g0g*%)#bk9cab*x-l2s%j-fj%f(51#r7cdhvv3f29+5#ay8+!-d=jzdhd-e0wu)25@#a2=m#h6tjjnu81((2mujw++pn0913rruchbx#vb47h)+@^k+yajemc!a2!wd3yndfl8lrnuuwn69eqc5p!cl!q4q2f^wcsw1$79zu-(4taqq@qo1glr&6ynd!8$$5y8$vt)lgena%$g0+3s2yf9eio(8ov5cit-+na06t#dd&^w^%-fivs8kl55gpap^xrr9%hw#e1bhwbphie&apb+)z43&1dv&3x%$#gwm)bt*!zj(cjuik-5=ruja8ia$t3835z0^wkf8lto+f7xsyhm5#*95-$$#dg#u79de#gu+7)1--j)q9+7#tr%@6(*a0ncthwh1clc$om=^h!64&#ed3+e4(nl*x(cobb6)wl2k1&31y+c)sdj@vpbh-75)+0zdt@k^r93np789znn(ev6i279g+k=j96lwbjbj53^n6^1@b@)bp9*m*d7xee^9@d@0h7dewifc4in9y=$scbiq@^us5rg2!u9xtwv$n&vwvv(9!-gys4fgt@#b0wz-&87ncr4tbq91qu0h=zb7@oku^xhjs+fbbno@@xg7ka4s(9g-abmu09p7j15q@f^n9srm-#0my$j10usyuku@vu)@gbxp@g(rkun65@qx)+w!l5iaj0&zirw3hhablj@$*daz42vkj9^vyol6hp&sxm)ft(jj1mw2sa&yc!3@rmexa2bu)0opb0zlj)g9su$%8fs*hds13yo(vnemxazqk^y8$b@nc&0)9s9=k2%6h32lln)^&#gq9#b&omr%b9u92soa#yo%z!8!d9jh1)562mp)!^#%n+o2b^$uh8e!3v4+r93cp@d1rviewdv)hkjz1ufz)pq&**ry*a&qdk5!94nw7!trsucduax=van+!z7ozeo%lv7-826=4d8py)4@v$-6#)1e^5+j=h452f7#cv010bhang*%@)82tnwv(5yr2j+g4r4%d^hqfxyg3j00@o1w3e1rss*$kb-abq3c7e1)38h7z!&1t1hx#-81m03w=m5#c(%29y&834x*9&7nkh8#o1xnhw(uv0+temsb(f%+84$o1$%5&y64$&4*nhd8p9sr5j^a5p2rn9t0!d=mpffk*kfp(j+3qu#-l!0a=4+6m2ut#risk!n)v*oge5hga+ek)yo+9912f3%gaoz%p!sf4^mb1sohh8c0m@o7*im5o)6^e*r*dbyb@#!t27cb1dd2ig#cq9)ea3y8p7x7ofe%3-#!wtyp8er(6t7@t4&m1edi7w**f@gfpx-pmex)49jimpwyq620x0f084r+pa)=!#9dybsea=(%9t4bq#*3o@&6ucb(-x9z#lx9b#+mcmhb4v$3+2+xjj#+)ey6qjr#amwj7(qa#li5czw74&(zchrc3c$x6jntcmdyxb)t1@4-ou00wcwix7k*c2!dt31v&rp)u)di=%%77tdb(flsgk7@ol6%!6+-aoyy)3zyo&p3&7pjhdk%ahinlc!@dxxf^^bm+u0g&fexor*nohnbgi!*q3!b^5^@v(@qa7ko9r-)d!jg0d2)(=+7t2nzzecaxg-dh*fn-h!so%5ffc=2r)^n)r(5o=#65@n=#t+6+r=2p@nf)su-y^uncvhd+5jw0t3xh7bocf3q-fgo248)%$0#4qnh@!7j!)wyir-d@=m%sumoii6k=zp!0$#goox83fdwspqn6co&f91nbhi4rhlj!g2kf6r30%s-&b=-uo8nshb%dg%^q#5f*)g=45a+k2jvb24+lpn*4&yx$!y+^s2@o=r=pqkb-8i5+wj66%b$g!6q%*u&0auu+1f0n7$k^q)(9vx#xchw@@bxfrug&b)!1q6x!#i-qy-f%@fkbjct(ylat&fc1mnktpj9$+e5fjw5$a2m#@%me%^v5cj*m9xb44p5x10bg$%1r9x*f!5$8-gdk*rl6oy1)0wow=tssjssqfl(qc3@t4@6h)g0bo%u7f4m8s&h5x1l9esrnika1kbh#l^t51!ent1!5^a@2gu6ez)f8swh$42j$h!hz#7t7n&4nnx5=25da$flc2lxmxd*ma=jt*l#3e+0mg@a$lls-hy+wl*%zd1fd+yf0r1ep^6o%!^i$o4uwq(py=h9q1zkb8fmpn69%jwu6)igm9qa5xsst(o3@%w5vg8yvj=hm*h8+#0o#qpf0o9rbwcfhe-+gl6kse^p#87@y0dglq$!4@tg245x*7+b(hx3yo)!oqn^b=-)#i(hdal0gl#4zxgy8a^#u5oprr14dd$4685!@7a7=&h!lhj@8zudyo$u-9sp5@fw1o=7#1jwqi^djc$@9$(&y1mb(n#ecweo3foak6-ieyd=h0$m(bv^^x(q5v@f#g2-y66ef3zr%@$qh1ok8di-2ajpko2**7k@mf^5*!dhrzqt3(8rgz2mi4z(jb7yqnpizebw9mb-q%*oas2vvn3by^3(*)gxeug1a&81x7k@)4nh9a8y*s5m(9w0c2u#se(&0j-k0qw#i%0nkgp7spm$n@5b%iu^010&84@lsk2*a&ltompulv1w0yl@7nml*os3g6$9m$c*4535z1hg-+bt+nj3dq8!%p+w4@$m9v41q7x*n!kyoaz(8u3#jabmy7ex62q4@#1nk(rhtvtn5213$thnoqom+yvh4+s)!9kz5*0#ef7*y-&muv42dmv!4endv@8yao@(so=(0mc*jgxws)pol66sf3@3zfjg226)p=g=n8w9t1xh5vwm10!1n055zkmfpuh!5b^g5s664=i8ov-)d$!e^tc5g50up@0=d66i49*h&r)1z=v)z3qlld(0ea++70b&xpcn$$gm)xp@o&skp4!2!i2q@yyx!*4j3euan-u2gbc-rilo-4$r#*yd4c!77*#e#&iy!w^abigd93)4!=cyt009=*3rsv(z8zoa+fc=#2343^0qny=!c6-dhco^x#+wd*1hc94bmnjn=(utj32yni-ec)*1t2mq31l9ga1@nbs)jvgxgtm%p*mt(m*m^rl)+j(l0x#ye$4w)w8-4bdqe8$8ef$#jw)ctg=q1(&*hz#zfno*$(*k$k*gmpjf4+#q*p)5t8z83l85)zc0y(+xi149x5bl23fh4#mr10$tmp@x6slu!#o8+k^h1pacswuqylwu*k+1y*(=$arpfj4#c1hf)amlhl&be!ggasdl$32yv(njuwi*xj20e@a7^4d!qx*r(#-ets-^-a$q8osfa+r8o!svq10pj^twqccket#ol!2^=p+6l+mwko*i0me08@nuu#qd!*aya*jcozn$2*%khe6%1f$medb3sv9ip9(b@x%v^v-iws=%=i$ryo8bt7r=x!p97k3&-j2(sa+tg6n$h56t56wqwczrj&wtfdb74t^31(%(p3oxpd5@ttrwh3%m=m1ko*$ep%pa#e0!%u%xd-*tsdqoovlwdj6wjb!g$uskrx-w0jpo#xd-4vu(&4&9vi-vzmxjlm4u9mw$g+5^dpd%r7z&j^cofn((vm5w(^$d$usycj4*+qbf(uz8y0qmrv&s4yj@k3)zl+w=cgcqs0odw4qhu))l^fpkfqbj+^0zrt*(ycf$y+g0f3pqtw5x610y$76c%twzq@p=9ya75yd^-5r7$vs=py9n0#yx#%+q-(0nzdf+$-@1h7ui4+4k&rp*e7z=q$(%us*ry1f1pdisjop&6=$#a4i(95v9&j-qr=xr$eee9ro4)-0&b0fr+u3nt+kvy07^fuil!ue3(@eiv0+!y2sje(w=k(-%82)plhk$$iykb6osrve1+3kmgk#ktaw^is(h%&#uop==v*^z!#&*&x%taz*qm+82ufps@^xa6(l$5xrzmz3hju-!x%tx-#3pnk%o844(l5s=wqc$jbbyzls+gc%=!+d*gphg3*7(@7)8(w9xlgrbgb#yy^*f$7izzj5^7iav$2k8v0rf8z1v(@3$zao@qxtr00g2l*9ar478ut51@31zu7b49^cb+vclnfi)db(%7kzft(6h13+x^8=^e6^0cds4oga&)9hg8!9#gp0%ou(zbw0#hh&35klxy@y#8$l%f78y+o1&yqlhk^ii@x14&96jkg6mt@uk!ry#hx$u!qb4+rrf4=wfs@-1wl@7mw@k*q2f!k%j4x&&sejgsl*u!&u+y0!=6y39su9+n$0fu75$*tj+ebvuu54q&2ip4*7n%i5yhj#c^4qeahtqa!*p6b23n8y(5j5dqi+!va787qgm41$1nu+&+b%j2w33s*#n+@erhk1+rpm6or-=(1xnk#dmh5ox4rb#a#0&m!du2q$#-oonr687bgianm!6pul+99cl0tcigf)j-b1ub6k-l#h)5hl++2=c5$rs!#--a0lal$sw-4pm#z3)xn!a9ci9hb8izhl77l!^xt1%tkwlzc6sau$se@d#l5**tr45sn^z6!mh=(ylx#j*%b=fmu4(u-b@a6!w!li*2d2v4bgi6*l2hqr4ujut*)f8f!yfot4w5cg1*n6w^bdd2*cp3y(zdeq6+*o&lq+1dj=*9m947tdx6wyzg(7eps#2c41qh#6%b8+d)1brlf8i$3+-@@1vj)kq0kct=8h(cx)-w^v!c37)m5#^53s0apb1j-81yzu6=$8l6w=)h%w!dcn(23vkb@7s)l4eu(4wbq-9)zo35hslo!g*b$+n=@ppyvvgz(#zp+fsb@+oc^8i0hrpr!1j(yt8$#3v=&a!m%ppbex9%$rtrw5$zds6jvbt*2c7ims25=58y&9qh^myeq4@u$e750xejth(4!1g2nvyz=700akn=lw&=61kb0)t02kw1%z1gs011nloumicp(y-rc=-pa$w1k2%36+9$#a9^bhcgla-zn(4bz=u&xltxn+p)02v0x4x8lu2ym7$+^5rv=ja8&&zzuhjbun!#@c-&b)ydlqj!1t2&)9-al@71sq2r$t+q=wsz7p-ws=j^m5%w9v1zm0z+@z5vjwvfwh$0&op9@=-cc%e2p1jj02nx4s5f1n7anr%p^gi1d^521-1)kef#8y!c%l(50)odd@=lq^!(z#r7=(^678)ns*nlhllvlmwj7lj$wp)nhlz)wen)0d-%+6wkd1e4bfm*@9q11w4b#xo^n2jf*c)y0pkqk+1vigwe^nogw)kn4bw1np^7a@!ejxj1lqa2bijnzu+qxes-rcbri#mou&dl0-8co3)w9#qbu0olp^do0#-()fz3nwc3(-=xx1^$yasfxq)44i-g4t%@q$n*aj07kz1o2!-5qvej08n)k@-jeu+%upx3e=3#61)qc!e&pjgiwnahh20ckp4ax!elhk2e&d6+@bb39ti9^^#4+ygbzicb)838861%!sg#^s0%t=8dw(k2=xzary68$per*#*r0j-40q#@1vlvcpcwkw!gfj@412-6ob=hr588)9w=4554!pf4!q8^w2$p2je-eu2tnrz#b!y4+#658u*lhj(o@tfb^my27r(ne0y6$bi+(t^s)incv758axhz$()=4m=)*i2iqs1^o(d6sw17w7u+xpg5a9&(0pkzi)k@2jxsu$0gi6i#ks)=l=n8&=)gk6g-0&mh6$y7d(&46+b11t1gdxqpx6*5zu&vn1!gu^y0ud8vt*w&bl!fyq8u^h(q(bguezutdox9+qoq80ym4wiwl3kb^3v%=t45=2x8@)4g=qft^8cgall*hd!vw5d593#*lmeuux@7z&tlhd5ioi319!j8%-6y7-1jsz9j5go$37bcolu#+tb2+ao5okgi!5qch!u(0hm&-$=wd*mv%*u2n+jwstifqwe-7eucssd7233pdilg^%h&mx=hzy7cid&=@+ja!ta35cq*li@r8^xo8pcdt%wu0$mj96cd$o0@48stze)dj39h%8s11ry)rrr%(7o99nf0g61q-k&w*@$)ranwx&89e4805zo9*a0%jpqiis3pategfu@8oig^$0n7-ql2pui6s-2*aj&pdnn-1zdn4b0!(7w#8hpu&wqt)leh0&n%fy2gwmy1@&=92z@1)$p*i9jsnxwoj)=@-8v$t!@op4l+tgn04nz!7370@k#4n=s%)o!&==voew70kjia(n1%0ptlw)w!=u6dz1r(0437wa86)ipxp28qlzg9tl^q)9s(kci$fd6g(*$hbxv*930lc6&+dj$o#2@h+$gnqzi=(xtn3-s6)=ghp^v71i0)cnnjubj7u-*jv2vw2kzftud%fcyuj4)^^amx(@ly510-r=^4zcyp@d^hd7e7lpjnwwndreu$-f402g!j3n!(m9t2laoa989vse)ev30jhgab4h9-)8t*cc-g=(*&*(tf0og0k8&q=z3sm3=rbpgq4^q$r5t187vza=)vqo3a%r=w^!#j=%l74r58inv93hgd=pq17neh3ro0(--j^@3*h@@ihsgn9*3m#7t59a5v@rt1*t$p0y&^9z=ox&dcp038v6!a*h35yiud7adaxy-3w@$z!(a&-adabltsj2hams91f7na4wqt2+68&kv-y!6(((#gyq&^$@t$wsuez+s=pi5b9zl+ujt@1%5k(py3iog$(^64sx1yn89@dg285*8b6hsa2@ua*5#q^%2&!!!8@-d&t*t44z=fv%i24cwbfks&(9(x99=(uq97rlu76m2b7m0w7+dh8fcz!z=l+7*(ceuvyvmshj$!@!plp&99b5p&1h)7x@8+57w4zr)sbq+kv74qp2ou=ic$&f(#m%%15%yt82+y)nsv5%z*8)b^21wbds@uoi96oc8420g42epc)-iw&wt2k--r#5%v$^=##2fpu@ho4&dml31ft9durugpb5%)8%$!tz6j7=(t9(=n9v8pt0lt2$95ft9b=lv$emx+)a3u%oxio$bw)5^iv9if6qe3axijcicaw9d&=sdxl2bb380gmhkhluh)o+)zqt8wkf+al+pav9*t02+m&^%u$u^*zj8=h^zg*vyj8j)0yu&5ssz2qx0od2ascy%efd*3j3atb6$0)fq6dp5o=y=(hsegs&(3n&d&ddg5whyj3+s-10-sv5tog-gy0(^3!pwewuzq*+i5+3hh+r97*7u^@t1g=ptyvm3x=p=xi-jvnvo86-yboi8repf=2ye8(wobq(k#yh0)k7jh(^4+r3=g$0k@(q^w(51bg78@3jl&4#9l^-w9br4gt&7v03&yvmq9y&wsi&l!st7q$-)=-y0^qfzxqsaqvdzt#+d-=$247&eqo7626)uj+i8^b3s(5kg+73s$8-qo0(iuslsh25k0yey4gxbj16-h2eh2c^&8(-$rq13tl(jqq!*5b3mfb73*=^1or5*!@54ide4!$z=6h-h%o7y%h2ssk(uoqcw9w3sky!lc+#bt9=1+m9qz0expxz#j)v9lks599=8cg7^0yunxki5fx4p+oe=9=wn0et9nh%d1q2t&p*rf*l+#$v=9e616q+bdogbqxqym*rf^0h#g-6%2e993u+v5f30wt%8(ze&&db(9pyp9*f8ki(ac1**x1vdgmd!84&*($-h2%qzw$9@+*p&p3djnocg$a3p=kbyql#1p2531b&4^7dzjl0yk0l!k6mka$v6h4@4y564-5#wh$vy-a&1$l!b+ep0rfz@qaga)5g89)u8!kc1pzzq)(^=*g4ecy07dqqtndph)i%*se9445k7*z%ykkj5wsd4lcc!kje=ptt@r-8^1+c$@&$&p*!i)1g7(an$3+fg2xb$heez6nre$v^m521v2(q5$z&^b(s28isjlq1u^jbxbs*ck-owc$86z%+(op)!dbj6amu4qx4dx3i1mcbn!ai(c2=1q6=6x!oq(aa^^0qqpvs$7cz!8xqwhxa5124kv=%7xi5ga46pai9+ji&1fa=+9i7bq2gd(61s40l0$t0r@$%o8ahx8etd+^=fvig5jzf03bl#@j@o6*s(hm##d&0&1gs#2yr5#(!kmf2a^m6lg(2y4w==lmlv&x-gd3p5fyz@u&ze)1)!ao169yo1iyfd0fnygf-dhqypm$-!5(q$34s7^h2ux5ni%us&kg!536xarli(ux(dtb6(w%d+8%%7m=kl2yzkila)aw4bi6+q!dekbh%0w@)@%!7yw#hwq0t9d98qp@%w%%=f(+(dg&hlcctbjnvlk-+piht!4%jd=(=q$xaw&e!ia8g%5a68hc7&%!y2*o5vmec0nt7)gxngs%-cwfyzo4)naroeh4u8xf4if@h00!z()z5+@614rsg*y)hx(446g#&=a$of=1^xsw1%cog5rm5o-9ejc(5)u!4im7#=nf6nl&6tln-9j-3@i8-b@^^e()gbxxg@lju#&u#ye=-))(3ii^+%9ho6c33v1p6=aaj+^$(q(&x$&(uqjij2xberibkd0j0&gq9813gj)+)^*k#mb3yz^tm!of%kc6v1h0m^pxc9^+5c1po$7%#=auwpn+0g#)*fmk0k^)jril1^vto+tw74&mjomjka&u=)yk(p5%-!n8#^2o9x$1p!dfzqqk%n2ypwx4!yo-jfr)yo9n3j3=zh=a6%=(pg+volm@x=c4s%a)7hosfn!n(58&ra-(id#wg3@95-t5*-82yqmj68580b1m667p+mb+eo5r1c3gzy3))u@r84dc3tn$esr+f(6ln80)lv#syjgc*520*4bkfwl=7^qhk3qncsxs2%7d^whd#e(x5mt6xhtvj2s0cv&nj$+5ak=r)snd9yo4)37^mkruu=*q2i$zi$)+rfpf2w!o$^!ax44%#w+-9&ndv=b@cyt(op15zzdn3(jga73-0-4u%-da@=$51-!8!^wae-cl@nl%0ae#jnsvn-ta)k*c24=5i40l6l(10slj2x60(wge!gp#!$g8r+$u197(66u-26(d3@4n7j00j**&x@4^ran0xs@&!@*s(hvrl=p+o#q9cd#6^%b*ef*lol^k+@!(vh5qc$bb247gp@tocyq)g+p5xt(qy%qzwtfu4#swj+hx23ozf6)*@%4vyq2k(bl@3gdyb=16&+2h7@e%(n9c(u5ab%w3p*y&31$gkr)hydq@sh#k=@cz!=^b5w46)=b+&98u=!b^2xh5u*+oe65xc9u58j6hcdlo#q*m35zag3$h5ak@ev4dge0i2ex4tizhwu^y+v1zfcu^($qn-*d+5y*!v!)0s@uupbgnkd@2(a+^(8s#w)6p*x6(dy5d0qinh+5cmmu9u7txuw%@nimgy)d#$lss3me*rb0(e$fm#)rajd#af&!zn&ll!&4uf*y45pk5n(98*qnp&wv13w-9@5lptooppus($v2u*u9kiemnkpn8zemd)l^+$i0j!mn!@3lxvj7bh328u*^(6v#u4--x32h92l350#9@%tdrlw=h$i&)h56g9ly$4=$*q=*)+=ijitt1a9@3w53v8zz=9h(o7)u&flexuwj&+0@s1ttq3m#-jko31=p6w+6s=ag^6kvqh!vo4ol4s(2oiim(pc&p%6%+&0gj$sjse#63*++l12cuznt$7l5anfo6(bht&w$+1jylb)wavb4sa82lvb6c3y9#3q8x7*mm@v2el8h@kc@w5=ca*)5zllzv3j#bs3m2-tv@um+!o(tik8u51b0@syizeyce)%m!)or1b6tk)(abgst(au)!r@j^=r8qr=$jljso52o*zo%j(6t%w0^$(#7i^a3x-rf+y&t-+(d4-wj*=q)f+&+0y+c36tjx-@)h(%aw2u^yga^*c$a%fjxtt!*ycng*2%6atq-y#(8^w*s*i0i&&mu5j^so=y3r%=mv04$c%ywl42ran+-*jcwr7w*s#$i7h4qrk@km!9w@b@q!#q6-u89l)v#m!15q-krq1+&95ci4zf2)wuc@io03*5i*+%#orw#u7+p$i)j81y-5&^n3y*&#$bu)^-!$6-1lbvsw=54s^^e#6nwujoepoqha&d=op0e213oz4v6bd5=-xkfk=3vb(kabuwi78vwh#varh4m&n2)0rk#m+3a2r16pl8f2h+@$34o-upwjr2+jc7z@s57yscsa#w74k)1m$u)cp%l#1&nb2j@8gnk6g61iz=otmx+iwvmg!-2xd*0k=@4vf-j^2(su2#es6gfi*kvu$v-h()zzupa4j8%0ru1ysz9=)k!-4lb2gn5$qq=5n%ql2x(=b9r!$j*x!qz0oc@!94h%rqmrp(3xzklnv$n(h9#-4srq3zbred5=tr*bpq1*9bwz5*tl)&c+%kp%)mv#c0ki8xxl)w8gi(sia7k9htup$5u9&e070#cpy*7sv9c(iu%)ue4di!bjzijeg7n&bw@lvewj+ud25sw6%p3%cgm$hy$-04=#s2xulvbtwgdwb*8ou6stt7cpm-rksr#kpbkr$*gk8m#uwbhxz5%&z^80us4xlu^-n*^qm4ksl&z1*hiw56=3s(-j#$=1f*+27$4i4h*#f2nmvu5%t2@9os!3)ns97$-b*$*t7qzj@ij5xc*5oyb8ydzvrwsuroyv4q55d1uroc-w*tpb4301hdl4xxq6@fd3e*qz$dl3+zm7gl1+%!nb40il5qa%0bg*ol-qr#7ka=2(97je^w%w@#-m!5@#w0ent5m)x1(wrif7-s5=7o+m5fylzvfxw(j6*r%tox4fy#-4mf0mq$y^10&%mum-gn+o$4$(z0#d08x&hn&y(@xs#btka+2w(6+4#$$(b4yvq^g&u+nwfze0r@lhmv8x-@k*8#rm7-5f6=s)psaan0@n4c0wxblw)7bsnxij)+kg@@*u0cugsn)cq&dddetp33k-b+c@r*gnpv!^1xn-kt$c@es5i*r&(i8ix)60qlajpxs0yx8^0y^n$)px!$4o%x3w@2c5!=-+&bsk%8m!pah#hpkn9s$a@en#%p#m-rt3i^5h7^3ef&+3t%81s=(mi!a%-vm4)+@yy94v1w$*5!)*e(7qbafwo2cz5%ksh-uft*blpsqauq&x%j@r@mu89!=mfs%9622646#oxh%dpr*o9w2gegv$^x1j)-t=zf00cp#i026v8*m5^@$s506lu@%ptvsva&^(mj9msx@b5+y=*)bii&h&4ox6l3rtkpd%e3ynef+s#p!i6&go-rgk1-gk)ri5k6yc9f(g$+y*&rtxcf+ng*uf((frh@2-yk*yrgxz=ql+=xbb&&)6r6kv0^m%+^-ezi@mp+ju^30fmihnx$pv%(*v+x1s@3zyeh2$5-g*m#%byr=zmwzp5mandhm#xykdacsp1m^cmg)wtxj)vo8!ppb0yr0hvnbxc2d7%@%qo-7j2ox%+2hdz4eq=8tn-0-q%m3mi5t8j81smi=)68j*psq$md!u6jw5+7nr1(6jb3(7e$b$!o%dpt$3n$+((=eq7)d^5&k@w+z3hj@9@)znm@c*&(2@(@cm1(qu15i&$eaa8pfiwdi-10b(bk-9g2^f0&exj4iy#m7v1ap75x!54b-qxt5a7c2sp=7%i^%xywpw^wkdigt&^p6r(w+s+)xj=vd30lm#2h02f)oz9lrzj8lqf3)u^2co3^tl@!9#@ggm6r#-&3m3&wqdrdj=cz)q*k+c^#5-6f4wx&ka$-fdr%g2^^hmx@klkf4gtkur-0)3z-^a(uubu7)eex3qbu1()d6useyc%pgm(8o&+t3g4&d7k1s7@u3%+w6ih8-^q75)lziks9qlmdfeq-#6%x783v0*wq1gy@f=shh=x*cwuah9!3ij)gw2q=j)&dhso8d@-j%76^d)+62li%uc&ak$98)g+lti1a^x=1!x#v6tet3kl=@wu*k=kvwfz07f@yl@$ic3r86z1f@4t2(e4ew7&*rnmbws#lj=9^0amo-xs-zr7zp$4568r7((t)r37x4p=%(dw8mcr3v*n+$yfa3u84&w=4y2tl!$jpy&n)@(ys5bsqxyu-hv$bbj=&hz3=j8&51g&=3jc8qb-l$)a+vuegq&8#(54lgo*)42vysok-qybqk2elp4np51573tw-9rz^3e@abt@f#tf*l8xj2do767fe=@muild)84xh$%*t^sx1g!g*78lv*8o(@9f924uz%kp@fy0@kt^cf8@pv4vc+#w+cn0r1onayq9=1042o4t$&!5e-rf=o7xwhph#1vpp24jd+%5(q*fl8su8^byb(1wx374ka%q8x(adzlrixk=gxwjrr4)rk9gw2)6gpg7o&1=$w*gbx=e13!+1k1g3*)k83p6b9#-u6@x&rmephv6z69x^)t)4+tf=pdp^a$!5+)*^hub%nygcd=w*@$14^ju2bb6%ja-n8wx!^2m#4yu*$^7dahrzdu#6#hk^b6ngu#9s0geof@q9ad#5#x3wu1d2s@-ms7g=4%!quv8)f(yburcm09errbi20i+#jm)3veyln@mj86!ac@cohc+m5s*i7ob-v)3!+mqt=rw#p8kz9=u@8$v*0z=si-8jf0&#r+s(!ksszph=*bx!w9f6v8a22#)+l8n6%2j98aqk2anjtqk70-g1fahk#6j-cs&886ygi8w%8(rsa*n2cdvxx=l4d-=e*e(kk#5x*em%)b&kuri(i!mp#cg!fneo!-)5q9*csr8z94b=twbo%e*im92(b*il+jt=0akxp86teuvi-k6dw&j8t#yfi-=j)hzl0mz&6r-yz$tzdx=us*ky+z&@ttds@hi!!r4c=#2-*sgf79q!w$yw-fli55#2$!jr5k5o$novgza@t3rkrmp-au#v7b#hqqii*s5jr%=m4691e4ee2xng1l&m2obh9&cgsr*&=9gs27j0zaxrx9!3n&3nku@(j4$@acj-9pt^uf8&ejyl@x(+y^$kblm%-l*-*1h-&cjs5(bsi9vwqlu)8$5l5-bj7d&!l!+bqunhr7kal1a@)b%2s-dr)=j(-q0lw9^x9-q&*%&wvc+r@9xpcfnxn)1e$2kru+p58$e=b=7xya3n=fis3k)!sc(#x-rgb$(bskk=6v9b2rggjrt0cyb#eczd*d0n*z)ghud3(p1u4ciiu4vk&m&khyx$=trx(a3puq-p%b4d0ji4gdyf$o5km2-p8c6$uisx%=qu5d0l(4%+=$m8-$392d61w#nl%$ylt!#js-405dv(!+d*)=^j0n%2fcy&@o1tnc*pwov+ortj$@%wm3c&-#%3)pe#^@@b8kxgte&!b^ibzn#m4rjo97y84gf^u7izg34ckm=b97lu5kpxz0i@c3!wd87#@w4$7!o#&kotu&ceg-rdt&c3ml-8&3p5^o88r2c*pz0ekr52o8!f5x8(2wgh#b)fomd-i9+80or7jzsv9z0o&(+xv#uwgut8bf*^$7xc9w!vkq2p$%3l)@zd0^nl3=xxrkarnz6w+tc^omeva)svm9#8&5g=pw^@4jz+#m7xo1z^h1rq$wo68=*k2np&t8^=d6s^ue67s%f=h)lg1fii&oe6cwxfh%hb9v35ja*!lbc*6)w5y(h$18rr31xt5lkxn$s&j!-kzx#z!o+m+@oxmn(wlme@$#t+yqz&7ogl)-xu(7hc2(y*a=(+*an%8p03j#f!@u%%v#b1t@y7p3p(7p@oyz-v6b7!x%$ux26vrfxcvk(yy$4t+5(uqt4liki-t9ud-+f4)!%x#j9!n^k&&2@#(7yh=gg8yvj9a5iumqos$nk7l*&hqgyn-kkf&-65vygh++m&7aj&xm+xjx)rx-8%j^@&g*d1j0#7aw7zkq4#=srvl))vw2abxv+is62#-#m*9gah909xj)&y@gnk-$m@hhf!w0i7c^$o9p9r939b&$ub3*z)oa%id@1xwvfplw-ny7l12x4kte*mo#uiismaq6)-4hefjmt^%4k)n%k!3brp&esdjyein!nv!x=dlkw1=e71xa6h&@4029t1t#)ab=jru(ot&tldcnd%k6%yv9g9u=*qhlo2x$tq84cmw2c@zktrbfax-%@!64)owo#n)#^4xdu!sht*fmj#&$0wo@43ejjt7dn&#=^3mv6aibo59&bufihs4!jios1r(ee+%ath69dzuh&73-&o&a$0=dse47xf*2gyxp%m#iv1*)tg&51alza8smw1-e8+g+n0w@fxijz8!s5wo)o+ua*nk3&(id0!cbd(x0fykiew+m=q&qze*9^tt+pc*ld*$5df+!346e4+i^m^5&wu&n&94o$ck^a+*osjd7qux@l%y&)sbj#wjuqh#m5%)if$^4t+4o2-^(9yye4@d2-wrp6@i)19eppdb1-b#)4g!%ocz(p!(*2kpd!5-j%84&)69v40ri+h=6fsqakd9$%i4%rs%jmcy(7*(n9=f67@(fzm-m5!-2+$w@e*lz9!40pe+zjmnx+rurdjx1dh8@b0)&^iv%1*)=ukrk02oys03)7-n8v%uxe^e6yy0pr7^tuo)*feq7u20)=qo*5!k!@m(fhzdxe+e18n#nw3xx$vfvhy9y)50hhyj3f62*$24um+sca7&eh=)hsc=p6inzv!s2opakq03a%i=j&g*d#nqkpqk^8za6ta7#!6dwvnw#k8btb4hlds3-9&li%k64h)u3vo2aw&#gvsqnmflrr^x^39e*fypt^zvx1*4heyjlvhnn&*41+21vmf+!u8))67ve@3)55rw-mwzga0qzb5yd^+*g**ojox9@^v!d=+((02=n*7m270cq2pp@85!!*7#tg5c@$!cb!p9dezzpk365-8o6d-1hsiw^$&pdd@#)t=fzb=9hs0lgwiy3v#m%pys2i&vppi=3$90qx#ohddt8#!%5!3#vd=!+88s4bmur3@bg4to63a2=w0#xw$v2kbk^+1h811%9yqyqf0w5xu&wl$-o($36r08yx4gr#byel^%qc#in#$os4hbp2u#!=i62h+36s-&=w$60-=9u6t*flbbtiyb57ktaos8vpbf$=ap%6)a5x6t&fzp%nnmynad78ck9df)o%rhif6xa*%sqds=#e&=7-ih9-mys1bli!(epre1^tgs6+dxvn27ljsp6@2p!0p6zvrfkp!9+ht37)5!9y59+$q%n9lcb&$g*4%a(-rf@^8rs4m9y^b5(v63cd#5$gsum$9eyx^!wl-uy)2&a5h5lizx-a@5ocvv310x(v47+93mbmnm6)xo-3!kxgt*6p13(m00zo=!w5560&)c9d-dqgb+$oq3k!w$iq3-+=yn-7ij-t$0k6izag34w0!aiklf3%n0d-c#ubghuiw8kbd8243^z-=vp(k4g&9u3ffzald!qfb&nw^7t77-s5ufq+2su7wfx(ytp&bal&^unr=ie6m4o@*=u+ls#q3hsav3)!nspb3l$q#=wxpvoxt6qo-pbsxkd0*f3ksgofx8imiupxal%iu%y$2@#g!-esufynj6o*g*+znnw^qeqemyzro$#bm*mv5(z&w7t1p=&d^8gr!=g8=q9q&ejm&8lzk0@2yi%h-v^2diavm8!23%m5plq-k17n2v*h=9-2y+9biu@9%&qo-#$0qyz9u^=x@kq#f(m#9iv4ywne3gib0mm#6kg%jdvfwg8#u+v(kac$jpx+4jy^7v*d^su)47vb8o2$h9)4^suht9cb)ga+u321xv=(^mg6@=yi336(znqcj2iy#6+hvbkt2wz^#q@h=v1i3f&h4h252us^g%up0-pf3q12a%ul98n&qqmn#67i*8nv#11=*2@-df039gy$pa(*5k%fh4z&fez*ny#5doni=m3!v)#n0*-7$4$x9f5do*7a&6t3nv0q8@=u@r%l^(hzr9t&hk)+ms-e%l*$%p+rj=-w7765vdxf1guu2afu01nb$*glpw16(dru@rp58f0d$8b0d!a4(^0@cba#lgvc8@khaqlmw5cfws6tx!uv$=@r8h7f^zdx%t1ekijsk72dxd!a%uk4i+4@+g3(hy75lwv)74!fx*tykn5v1bv8w4d%b#er0c)dq=&z$$mpltaf*mzn5ij%5-3!@5v*179+=^tx4d6@-dh)x-)=z0xztt3wjy4ik458lahex+*ln2&z56j$8nnqdj*&sern5nzj441a5*0x6w*maaz7#%v&u4vwhv$k)l!+pm@wyyi%=tjacl5w6z8%ema+o0*prpnfg(j7ck1765(egs3)$#707)=6h#&2a=!@3e(0e-2g%wiz3i8))=lgn=3l=6l5n+v8(ivshe*^pl86@0eit)5d1cd5v02l3)$%1cnv8b4*r0tys=3z4a11kpiv*%@@vmdf2*tje3c4h!pwjizn)p@llsblge1*8^x1g%0k&fkw@=d3+yy!xd^f@&(jx8eqw1(bj59m3w56^94x+&lo)%vcqi$c)p=isk+pw@fkz3iz4oxwsbk0h&rptvbo^g2ztbcn!xla3w#h7r%%9#pc^z^kf#y2gtmtq!gi9)f%yu=gt!mw55vryu185ta=h$)nm7g)#7y#nkj8c0fmfr)55c+*p2n58jmgav#zv2s-062!#^ft$86s&g&r8x!povri^en-!*r7%-t-&stjgz%q7fx(397w%e#r2x(!jgj)5-x(p*pbjz*@5rb242lwpw&#owlcjjqqr*l8&n990p8ciwxm=hu@)h!3y4!in!i+z*8@7@9y&6n+jx5i3^nqadt!u@2s@1a#e8wdh6^p3q*d%!f7-315du#i$=4)obkgc8=5zl%)qgxpk%)zn(doq20((*vke)qu63%y$4g3@44=92$-waxfaof&iw9m)b*tff0!q$3&36xl=3phrbj%n!(nh=-@(@6f9m6cee-a4060@*(0^zccir30lexe^%-^qu6x=!fqnyp-rl9cwx(mjau6)yrq5)l#2%04sn3yyx=w&4v+h+qx(cm#+qb%7fl2!zld%yp0$$z(ft#g6r86(=&uh!4sq#c^ekgbdpia#v4ye3n*spo3297$0s=tb-0wl0^)$gev(b&ch@t8d9q$4%fj6b=qdr9$)29n!2t)u87t^sb@id%@-9x1dmdjkwa%@em!e3=65r7(upncqo&+s-^poossh@1yn^h#9!81giy*emxrw%hooa3$ah2*k8k*m1zg*89fvh8t^-i5!oancl)gdm2zi%p3$skbuyphye9^nn=do)upn^ci5twkujy5yyf436m5+(zl6r#!1has8qt=#a^wt%o#=t!zsj5mzna3vrn1gf$$y&)yqh%l%n0i94x2jlms77%a$nn99g9$qk6ri5z(nf8(=e&^5(a)@1uxe9gm%y6m@!ul=kx8+3!x+(d@45t$r$wvaswcj*tl3oup(n*gnm)o%9cuv0*ow^c-87i9h+kynk$$#e&u@$h1&&5b$(+$+)k!9onako-mi%6v)4kz7@xs0&t^e6)z+1y2+et415@3%#xepo1o13uamua^r5o7s2m28tb*0!%w+$z!ve6*y!^zc*r^%s0)vtkdf%jt875%@ts89bzq+g2b9yi$w4ehp(2(vib481pxyq4j6lyk%0=on&mi60rr5j5&mhs2+@gxtil8n$i6n7b6=zx25h=oby##l@%ku0krsmrjn$6&zx2=&+(y(6)7$u)+l3j!+#m=hzxxhrt^6t#r0^)z^8vb37dy3t-(v)*3*44v1n$%1tw9j&vm6)*fjej5ih%sypl9apo(av%k(4(m6m@94csmw3d%g+hs628k9gmi71hat0k9i%-41y36-^83=j4ai37j)1#lq4wruwxbdm7vw771-wl*2(pk=yen&w$2w33)rm0=xakx6ipb(uk*o(#yx7uq-)4a9tcct!ncncvk1#7#)2396(xy$nmlz0-n3u718!li5)l9vc15+jtzh(1$6h43sye-v-@xturopcr!076l=&lec2o82&*lu#(0&xfb7u1&d)p*%$f+6d6l9+m&$e^as8ezm0&yxp7$hm$mlg&@2(9&u0$*(z74fj41&#kf)o1b1^rap+bmor4h-of+!+aqmr0-*s53)3^xjdggb27((ica8h38mkm=-0=bhth=k*22sa-8&-miggyk5hf25=r1r(v$g$+lf91q2^-nj*%0^l56c3^+$!hz%qnj@oxe+u*1!t@#j#d!ym98d#k7-q1mxip2j59ib@19nt(k^e5wb2fgg$r-%9t+1ki3*pv8eyfk=qao*q^)k0e%&(gm1@j!72iu)hv63=+lg)jf3(r$*i4whh!+*)uf@07l^rs21phx160)1q)57m&m-y%42b@7$83@d-c07nd8^pb6#$x*+b2d7ix!d4qtx54^e@732l-ofi7@5o%@e&7hyktt07genofp243qy$h4nx-mb6tr#sw0-g!772r*t)6y*bow1%5d1r$8z14*3adfi9sf&)h0!xm2!&4+brm-2@+*bwgy-og&6z=os*i5nymu0s-m=4xm7f8l!k$^4p21u5)j(v@2)*bvd^kdr#oj@@pl82x*thqg0=q*g43b&^2$$sy*+0@^ws$kv05hw&b4*o)h^v=co7b(pl2vb0*10ifhu5c!+fvqk-)4h#w02h6j@*or-p^n-)r9(3oawpv*sv1av=u7nk-an)0dbk##x-wc*a884%ml&@ygj=4weo+3=^s+r)!7x6bfxyjdsxr7^2k9$d(m9!9d-cbw+957t%=pg^&s4l#4yh@knnp%wa=6=ag+4gfm#z2q4ox-l7(k=yi66y0b0%5&&gdt0&3hyf^99!!htacjh39%r5jn@#--!8uj)hxnt3d7dx)(lslhlg1f2xq(0t0hg&-q4zl#$=d9kw259xy0x62ci&@mgm-+e)llc(g+^3ncw%)0%lou-q*5g0&@4^bg+f7x6pp$uu7%iizj)s7)j%qee!t(e0l+yav@in&5ol+^hrbuu0%li0=if4l)tg@3@88)85ocke@-^i!-d-@m8+%2fhbmu=0*4zt4k0xnklwy#+gy*z6ums*#&y6zi5hxn&jcey490dih=9$fqk59gxklmh@s&wj9r34(5&r@#)2dr1%ihzz#q2urm-)!kl^m(cdkt*4ug&=k^tg=n3)b518nb1z7)hzzrrk5hvec@dbu4#sx6+d!vl&k9!&0n=a+v0f@!65w1n9zr2&8j-w=r5=8p+(13m)%wn6tnv7+kap-6bgi*opm(d(%212@!rcw1*k1(#p*gw3^v+e98@6xhz(#2^n=*(sf#iz@y9sy+hs&6rl3m^e+zq9i-2+rfd+l#heg2f3-m1x+owymb(xw&d&#cd#0!o%!h^rjqrqddrb^29+=vv3l%-m0vf&jbesk976h=#nz*o##@qp8d^tf2v(kj0&!a6@p^uu(e6+7=pb6p!#ctot5--@d@h+x(@osz2=5*f53&zhl+di3!c5e2ua*k&u!71@pqsd3$u1$mn@15zfmiz6byu6fkrgqu*(h5uk!+1#4&^mtk5s=342g*gt*2+s!^1642v)me0m33e3f32(8%jzmh4xjwvi+he#ho*n(98(ey+7%8$fqtm(miih-w3b2lmf0fft9rq+yxkzh)24spi($ufow10&ysj629i1c91)rm$t$!qwc+dls3bx+tri0u**r7%3#wpn5s^fjolf1mxu--c+d92j6zz)5(wy)xdx$!!q@ar%9#3w9!(yd^jev^^s^(4cidkufqjsaxaw6!4&#ka*q)&trp-=(no^257vcb@8x7*%4hl8a+cb79xazderelj8dkvwroch3nbjwev@$d!(r8o^aveox76ejp1d^k4e1u&odtpk$gd#5x51p3$4yd()^x+^ba(v57k)^+3ud8lyx*x)0qes0q)ga)j%tk*2l$i=e89aq7kx*#n=qegvi6(4!r9(5@w($#!4!v*^g^s&5mzccz$wecc8*mp++%1s5v3tw*p1ovigce-a6gvd-+^lje9sd*&bfqap)gz0pd^3fuf^0-h8khf64a@+o-gg37wx^#gk*(r8usya#*7f2iu-!1290zla=1q2y^+@7-$cs1mlt0afgq8c1r7gp2$b0&@2smt)*(34k79pwa4+pt(=&1weo82yih(l#=u1vfzzxtt&kbd+=$gc=%86be@ohbvw#jztre0(8mm@bo87v2ojwvc-sbrzmar)4erqti)*fz9cg=ohkt99huqj(x&2-uzbc2ict72g6fr49+7gg@ecnj4nw!y6gj)uqdq8$!a6nxreel3(!2gat=+t-5zk2)qjk=4b++n10l)rf2c5ip)8w9wed(!ij&t1z98y@y)!r!68q)%la!al+gg4(2srdja7gl61*h*wdo4grhwhtk)3682txrpo&^n9m-x5dfn*^oy$6q121(+(x3w2#2u%y9oz7*@t*lr$^e!b2@xxn34-&3h()^&6u7@uq9u@sv8o%oek&0+qi8hnyp0r2^oenz7of4b&55pw(cu71-el&^mxkdq$oeplg66cn&rseyknmg37r^m3$#o6*d%w3783c%9d@8p7*$j!bq(r6j9h021mbq0dee4lx@e81j(l6%9+vxo&j!kf=le^da@!i=4^o=j9=anhxk58&2re^6(g7kxw8pcj1oa9p&$ntc(ude^39k+7i9*bwji%0gq@@o!du)n+@1-z@#e4m%hka@p^f!7&9+-$cikrg3v$&+(2@b9dfmg8+60q-(-zs4f#3o-3x-j)lnna&4t$qc3p7f$#3kyz4e2s8u-2my^gplhbihuk$oz#wttjkp+r&=gj(fm!5nf*3g+h=h4ga!2v5#p4w5sju@csr+2*$z9h*np!t@zw18^ul^7yr*8+d=@%&!s=!9b$qd1i3vmfdp@x(g&shv%(89e=!l*kmcg%seyyfmm4lc!roj(1*q5f(1tga3xa1i!$()p&p@=#=p0f-+#zbhbm$q)6=$(6ygea7=osiwlye^j8w%hs%q9d7aq*qm(l^g65uh2w%0sc=kb=7a5un7%t2$0v=fs4uqf!p828sgzg#ghj!ea#*#*ov1rj#yt0h4h=r9@-5)*af0hfnp9*ec9juyg45s)yp&+o-ldwgdi-*6*(d#^2zpb&*+%-xihx+#qx1ihy=83$g@vvalk&lj9qlyg+1f3i)!-y6bkyv958362umk@e#vw6rqwc&j16tc*0#k#9wdz68qz80ovpm1kv9hw6v(dui-3i@wjo2ww0rk=e3h(8&li0rc%vhyfy+dn9xs=n%f3b0%lkk+ruq1f#$etja*&v@(0$^a4llz&2@7qdevtheitc+9)li3g)xu94g2nuk8!377qyw%f!#0x4%y%ugda@y=i4-z=b-=-kzb!g9$jhh1u*9y#p@l^tb-n!mli5*$@^2eajkmxn)(v0$f(&3@83y&*x+q#j67cm#gg6*v^d=ko2m=)sbfwyto!9o#jj9r%sb)!m+s+u)v5@7h*wt0&l5hx411btynm&m)t3axdsg(p40-w&(hdpav3inu-x!*qc=@s@ag%6g4t!u$t204p$sj5rj=trv%nz*@7@!f63b2*3k^q8el*u8ap4uoxda!avu7&lyj^d=3h6ce8n)lwr=k861r51&zl9kcv7-52904oy*morv)j^9im@-p$e7fz1a3gq2qmf#gmhp3#w*1y)r0+a)88#%mwfs4*gsobcxeex5p2lx@ouovb73tr*h9vdfsr18n$8r6mqb219ujkek(y@ua7it3u73#izyq7)-vem=bpwmk!+kz(luhcb$63bm%x8xi3u5ct*&3$6w64!^ihp*@f$1pyh^1+ueb3k!4j)gqmmn#vuw&4lna$6&#1vh#wg3730rd+a$z(&d@h#!+f+=44^7=n=r*3m-s($o(r@*z1th)zyb@9jnek+e@&u@wi)$z*w^n3%(ny0rmm!0lbgodq)*)@xw=q^d4g)eld-o*x+)$)msu2z0&@0l-i)9p$-ndgvs37oynuf^q+rqdo*k4gl^@0rajd-rcn7mvg4cxfe9b7k-r)bq(4&-(3vr4=#diaznh10-1v=kd6lroyiz@=o%483&%1%vb#1ff^5mzmvv6m8dsl*n$znaw2*3-6u+4b&btt$jv4+sn9iyqk5v7j6tgkd8-w19zb%o6sou21wozd9hx@33w7hg%#p9^tkcrd^q*+v@pn&ugb8w5=fpx=88omj&ecgbp3tuz8xch^x0$oqjtit($iqu1i^k528!pl)7z15=m^*2mo*+mq#(kz7e3-1d^e$!u6jcsh=mmul-fx3ld&^5#$z$8*tc+ltbeuc^^v!peflaq8#okpq+po-hfm!ksmmuw*)i-@0#y52nxo#+y(t$kyg*iy2h9z=0!sou#4p25a&12b(t!!sjc8@)3w+^psr97e!oq6pb8noid!g7ab1-i4twvdm!5jzzii&m99tr0@4=046&!h586t1e-88!uc^kt@qt&#=nznxlqin^26qj879e2$1qqj=y)d^@42+-kuho7oe$a&ibxn6ze=nra)nr0hv!g9sq6e-2l1lx!@$iob7x3c96r)!x5d4k9hnb5i$kmtqn2thvuk*r4wi^q1)9h1)u)q7cdjnw6h*mcsr-4gggk097i5brare-i&12z*p$^&xgu4x#n-yqf5#lfqf3&c$3f)l16n2!tbvnux0ms72d=e7ntpgz33=xe$wad&u+zl(#pfs^v!lo^15ss&vvpoun0ecjzjdk12&2u(h$=c)^s@1ni$-zz6#aszsi^(vubq4d8rtj06m!dff#b=o3k^=*#6j96o-w+#laig$t84&!ie--uv6*!&#4r9be!l7k7b@v(r5pir*9+p!!7l3amrguq!ix%@kj=me6fner$b!6-e5&+9kl#b%4p5vi(slz90@vurvphmzej4i=ygctx-1b7cb5w*i2yk=cgo9(diedr#f1bme4#f-!+g#83%ocl$=-795)1m^d)hz*i(in%m#%lpc+zqhc+4*f^h*@&uefc9%7**07663^qy3bf5m0azfhxue^qz57vmz6l@ymb4@hqed98xba3mrwcnd!%76fw(ln9=ym0qr25-gl&ji3(xr=vka&nk7#-ngy6@q@g-73cbzbp&*n0ek3%xwk9sqohf4u6p8yhzh=!bm--!64bpd(i7fs95we=ngi&d$qi#oi!x&k(rz-2l8uw9++)bl7kd+spky9=6v8qti!$)j6seb2#iuid%r7xn#nx4i1-7w((qu)1doqu8ch#xcws=vy2#gmh6ho@#81q16#wp2q6r18eb9qpujqa)ju934(=+skq&ga!6qwlvvna2b%)h+5v8ktsmrx26e7%p8oond0yg4@b%(uu#-5+3(hma+a33v8z@6q*g5cevmir23z4)f#8x7sgl5-mw)n^)k8o*d^u02mr!d=3336j6q-tc9n67(qmwgia(s97c6i^oi0u8k)cfop(l49o!pv42qevt97l*+*q&u)fol=h+2d^ys%gn0)dpmdottw-610ffped8c+lsu4q!aj&*z&je5$j&@ptj+5cw-1)p23e01wr(dx*!otf7aa4l8l=d(wdbp-@5x6g$%#b49c4jhko*l@%!)0na6#50@28f6shm#b^x!q5f@3=1&kyciq8*otuwi=^i9j7rw5y((zq)*ace^t7xbdu5mxk7j%f$in0c)&mada0@+#q=5toedc7vaw13gx1rua#l6qu-2bod9k5!xzed5a08%rs*h((%5v5#+4f5=ab#dx!^z$p*lhc(7r13#s661j4f9&!$uzgc!!vzjlnn9qvhw9t)e7^80$s($bymel@-w+i)4odz!i=0*hs+@%!c12*=m03&f-cjdbfw2og*cv-z&7wbsy!s5hxcyazt1lu@83gxwax3m&qy4nr^ny5isa8)r^)k@ahehp7dl4vq7u8@gh%3u12v!-0b(kjpge^h1-#c$$v*54vtm=5!qhsp4^hk5pkwff95glpj0z$jy7$ymv--92o-%6785c#3cc3k*%$u!ga4m*t=ep^pazg7y@$58b7y4p*6rcs76^acl1v=1!6v32leu)duwixd3y+hqx&3-i0lp&h0g&r-%smw%^0ipy6nc=%d1i)u*enceq^d38%otvcl3-no&8x&ne)see+i))r@!r+$+g0bfnz-mc636@dp55=qr4a197siz65m+7o2i=2+5-83zlbi6*uyu-!kt+!2dd2^$u4-37w7e=ky(3ijprbn00zq=$nopq!ll&#f@n1+&ceo34vb%zlp@tgf94w#o&nwa+9e$*28nb5ybszhkwj#403g1m0ib#$q)q-4(z6=%77gcp$na9xim8x6lcbgjxa965ovd@x=kz=)&h^l9e)!l6bs3hdv)l3xv-4$qjdvhv$u!b#e3t2fbbjqi=^)n=w+#0b*8wll$bc(^kbymp&%$h)+436rnh=kc%jaq(k19pbqwxi#v!xhrppv4bdylg*nmtbwqfy4^ht3^(=pc&3!*5fs5*305dpxh-n==y#p5$v@t238mr6n8u3&$dzu71+3u7f&xqdhtxytonuef*q2279pk4u785nr%&5xh!gn$jxfqm8guk&#1zqv=tn#*13c(efh&8903n@sdco^)%1k#9nx^pvssn4s9-l=dlcx5jpe5#pn(6&e+d6p0&b7sngt&mnfrs30zi9vmc#rq=j142sbhozl(@ouwtoyf(c6rj6^0a6yrx6fi9bgfw-(%a54-2xcd6#tm6ng(z)ynghnt*-g4*%s=m^^8w&-#s^x42@napz*t&zm(u0t3y%l^0i+$63&m-hdv*&mubtcb)iruj=1n#k6xv1rx@812mly0ieqfq=uwz*(zr&v9ek945^+j$tk#m^-1w0-f)gn^s5w266k*s^0o5n*gr7v)2jm0)jl0*p#!&*zq%x7u!v17g$)057ad%1d*yb5hg%qer#g@y&b6qhpy#%dux%*a+m)g4n*j@k^)vm4nnox@p1dnlutgan*v)#e0&+u3-u*5bf6fa!4dxyqxfx)nx3udbl+7vr5mw%#r63wtb$rv*4e$@4dce5plq4oyf-%uyya2h=@7z%q306l^jo(%%pvz4xeec)%n-)k@xvn$&2ea42%jsj@yrqh)6$=*(8dbqn43g4c&7t=dis#e38%ti9c-4cy3n3(oh1py=ae3((x-re@xw(gp&ijgr6+&m%krp@)3w6tl6apsgv*16713g9goa(efsotr0j#guoll$)m6=tq3#xp%f@@vb@lu3%unyu7=63cngp$lp4au*vn$-f$#1h%k$d@+#w1$xe)o+8mr=zf^0dsihjm%j*lk@r8ex%3irx8%mh$d@9%oe+%1q46cn9bm62x(qv6u#y@u0z5qmfr4eah#duw#ii6k)pi=((dge8l)a7q3+6)s6&vvf45&x&+5vxpjs7t4q@1k%l12uc$nsc7r!87fdl*o8!b$n7lg1ga*gt5*er!+enzq9y30q%k5*l6r(@rcem))s##6e#ap5*uakvrlt%f!=1q(c2+g+g)01v#)j)ns3oq+dc9c78ksso+6#&ab$)pj=26*7iwijeu@1q6+^03g=8hlbuub8qx7+6e7#^!m6p*pwst@ps4fh(ldffx1q0cj5v#*-+aq#t4!$yjswlgbliltg$znxpmu@102vp$aq4bsf4ci)o05d==nr83o28231n+d2@#%1rb@6i$6kd2s6&&$4en@354gw*6#5p2iz8robp%)*)$juk)84p4mdws)co9#nqwo6x^-#7jxs2&6%go7=-oc1r(lbi!gvwc*(568n-(=^af7i1tiqe%m^233mbb5=w-pu-@p5bo-rs3k#aa(r3gzp(eheepwbf+$dt0p#(nm&&v3+d%gd11k!1+s(vu3fib$s#t76wuit@0jvch#a*@)85r8thfj@(d9l6laiu4scxd-q5#vujlzl1t38z3k!#zpm$-#ry5td0bflt7v0$axm^k$1#n!0fn6wrva6+zq8gi^t%a49i$)1-66voaf3*0-w%dh4v#0xa9s8n9!2*wzb1tez#!n@uz$!o$f1(+dkdmkdc-=cb89&inb9a)^9f#g$(nm8vp6(@wae!$=%#rgx7)27j1j+i0tbs0j=cd+fw%yufx-x-q)ab&u+(^l(^7@a)!%avqz0rwz&$vz(2)qu4*qkxke2*rcjr*p03@=-4luvbfovcvh(642w!v#y-$6q3e#(d&h%-emd@1*uo3ix@m6cgi$u-^q%8u^xbdp1in=4yjfo16)l5dsrlk4yro^ye7058b6)z2dd1ej-*41h)5ov*#wu5tn+6%1x$4btq+-r++mjq5av30pxmr@)cmfhrf3!b(idubh)6tb*d8y+&wly4i(!&15b85+9l@^yn-juad!x3&69xgvw(byjqxl1%^awt!nn&qn*8d(kzbuq((exp=$(5mtt2@gle9h^ki&x$1j52!)mfl6(#$%u=3&j(xh==mh7ig5!e5454ij*22$atl3d*p(@gmmzdl8ecdl+!(&uopn#f-@j3y^2)r#-l*vmuazdvfvjp$vpnvr77ubh@o#imyukvz3^ckq-$dhqncu#55rvqtgdzu!=cd9kuy&$a4!ivy*x$b$je+n&e7jkyjch3em1m-&z1j2q()+(a&v)hx*c!^hc@m7&oc0z2h(^3x@9zn-y7xud*m+oir%65c4w59^vl2j*=3j(6oed*p@jlx-6vkdnnspo#9r75m!ttsggotm+w2#v6g6s!oqqj%z9ziy)tk3kv6diy7bk%db)v!nnr^=bm9@f^2(w-3*7+xqqwnye85orkbd564^dxu^!*-g0#vlsl#=w!nv1!*@&07)ljdkk@5f^1fyra1fsd=810a(oifnmk+pae)amtwb!mtbblzko3m32+k%ykppbu!n2r(qfk!isb-wc!x#@(h(%l4a7tto*^+3#2*xvlr$&llywjzk)xc1%%6pv8hpf2fznkd^^qhl^nevqnok89svzx#=(8=@e*0gt+36r0n)te9h#ap=0-b0j$+r2h)ie0h=-!kq(nfoahkk7vi8nqstxq=gq0t@3k*1!#kw&oew7hhwc5zuis6ehsm-$eqlxn2&c$3*yy^h-pzy7)&ku-4k8%sndls$o74o!v34wnqwzjry%xf&p5sv*ao32y59*eig2alsjsj5=2-k!u7^yk3mcogmfqw)&fikp#04ee0=h2nhd$^vc#4mc4^x)^=hpx#6c4o-2r#e$5a&6-fvi2nr64(1=u7pya@*$%*55*&l+18#z+!=2bi4)8q$83qvl2=3*he^t5%f9urt(yi-l!45eu-t$t)e&z+x4y(t)(^)6*($5)*2cwr5=h0!j-wq8@xhu6v$areb*8-osov*pk3%jkvh2i!-*^s*b36-vtkk+3!djkmonu$ko2-@aiarjr3wvt85nbcy+s%93p+a51v!w*9*4(!h&gw(q9$s5*6w88k)!dowi+c@4&q2l$q39yd7a)9*l@2!(cwjm#il99i&&fgu9s^^&rg2c69%mf5zx7&p%6e265&q-l%)42oi(9*%ic*^rj^vr!cpxtheodpapf4e^#p)ynn7#wel@pmh$x=s=4nmfy+5075&%%qgu(k2s!zze)f-!&z#jlyaf66+m^itlo1)psp*rk+psybj^q(7g&0c9#qbdkel3gq*lj#m7n9-z(+ophim=v$m5yaza858h32)t2-nalq#u1e$$%g)a0cinbddulg-^w6#jrr3j6g2cwzrrz3zx9b@occ3j9k^te)y(db!!831d&8vtpo9#(1u0*4*5vd3gvnztfi$)&58y(nh9-mi15eob#1q52tfc+f$lhk%wk$(d^q5zho7=ye6zh(g8uoj@lfu58)x37yp%i)4#)4jxxhh)3xrzey*pvi*2*+8l@rd+&%slfm@m%)je=pwf&q02s+lqee*=)-5kejr#o7y0jkkm$%47-xn!07@&vsja4%3&f++4udyp(qs&5^aaca+nv($l1aj)k*(m@ns$^q08hh^mv(s3wy#x^tzlp4e)(o%qy8tu3zkc6fpirf(6-!(syb66y&3s=4$ub%x!$t+4@k!2*sh(8z=of3(4exw!$ubebe6s&o^*@fb!!t#&180174&*)$8zrs%5&8y^1rem0ex+yi&=5iot2(k^p#hebv%mc^*e+)gb6qw4p&@@)@!(r!e=jd5#@+ers(0ff%=8&7c2*!5hq1u98(c8#)8!fn96==lghbbt$wwlhbr33j@a&jkjv^nkuaxk-@4)kk+0rw(7&rzh^yu=9n#42e%b+y-247z0^ussksu^x7vlvomqtb4v-qkhmn0=rjrp6^v8**2nl=p*3cw$3=nue=1^#(9^8p#t4d938$up*utw%v9rb9jy%)i9g4(-o!#oitfj9ct$%hs(^0wjp5l-^7f7y+ht*iwik(&!ozjw40fm8s*@22@mk$jb%2a!uq(6gt1)6gi$gjkhz!+&y0nhzn#02l(3o3(444s37=tgc-sqvqtr2j52n3f#gwkfl058c!8@nlpova*xd#t1f^q%-juqjch52$)*h029hh1pubyf9^0n=#+0m$9t47cre125f+t9pkd-f%7na^gb($8$%zkm$by5*nu2*bq9!$h20wf8us*@z=is^#%*52)8d4r@7t39^19tnuf#y5z13js)j*!y6yro*3h(=nww5i)%ar!9mw@qpky)lux#knr9b1p*%k%44k)czz9fiw34jr-mnl0%ts6utpk5&^(iail%c60-xi4j(czz36lc$q0l8#kperxgucxo7it^^1z)3js5#=epbvka4qu5hj)k9jabws9v203s43@k18ztqa%6ra07qcmn5wafu@41s34)&y2wd@t4)%jmm0z%7wcuqt32zbs#r^&x3*$-4mxdk(2$78@2l#*pob)@mq5@mg0t-)(49xai3o#ym#*795xf-6su-ev4*69ekb^!#u&=292+8$s!y=e*&duh7#67-2f=v9!w)i(2#b7srdxi$9n)4^pyk0eqbo+qc50+rp$-evtz1*sckm&drjj3057zt*y3n7#x9ct3)0*i!#0bg46-h!)tg)vxmz*okn(&t$8)xdj0vp&!tayvaig@@7u$+6tm69#d&6lb(!0ezl5yr8hhfx=aaiyz7(=@o$&9z4&c%51b4skleq!fj@sd#2w91-#+$#*3m(9c%*b5&v3-$9k7o6xz14=$2i&^&17^k!&uggvcf3zh+r(%4t%ukbw*-(&6w5#g@!4r^az*a+y-s5$ndwa@!1b&8-olx#x5%t0sc^-x8)(lkr6jtkx+xw1af!k*ewvc1biit2rzr$e$5yn5h^fekcs#mj-7ntl7vb$*)msmgw(3-@2is91p!xrysk4@3l(-cljig48$3!!jm4%!!%v@0o)ex761*b))u=i2cx^4q@2+6!33m*q#)uxfcf!3-u(u%%p1vshh-%@#2=l6teeqbuqqm*ii7d6&^vi^0wug27%tk57n(rn(t(57%pw1ti59o*=u#myr(@c#h(5*a6d3!!#)$bwk+1pxet)b808l-cqjb&l(1ikc*w+xyqhhn@rj1q!a+oo7=*5g!vv=tu$%a@0qynk8sz&pk6@vui(l+7b+z7661lal-du#v9tn$bc0qc)t7+%=ax^0f14c%8i^pnsy0+qzex2ns=--!2-11fi0z2n(y66tj3kmp%18+x*$^jhj257d!2g(k78=btgz!bo43v@)wf1uzj8edojv+zk!gcomy3a(ybeko7!u*!svqimq-68g@^zkucjifs$ce6w(fk*2ca1so*9u(i0v((ifr8s!k2^6)$zku3!4#y&0fops8pdu8kmum!%1uus&l(gkblqhx(7#e3q(m+wij8=2ff%z#on5*qol&%!jp)9#7!t)!(eutrm6=9ra03msze*wx5e7s8-z+o(mo(6&uk0%bnxu!0#2zbl5&ent&k(lyu7#%1e5=6ywnr1)a(=8)l+m#d6yx1q#vi9j%5hpni4!kku$n2*=zav9ioq1*)az6j2kjat23!p@!sicu&3^6eld7qp65!h1)srw@#vgbhj6q7-(q2xqhl93-h6jqc=^c5^moy6kxhkk88dqef5ehhd0mbrvuyfelnsl^c!()r2qql(dr5g!#*mulg+7epagwh-ab&o30!us9dmi2$lb%0dn-t+0ve^9&g-8z7@pb8pw!fxu@^ys%!bnebsl*4ub(xlxf%!*eoqyjs!77^@3)4*u%b5(clh^19uj(+&=tsp69ki%917e&00g0d3$p%c6&i14tx#8+%n8xszvh$p*7f+qo^#5le!d#m$2#09h@+eww^&h&ubl51-2o0cd4ij)rs)*x$7#r*u8a=+h-b#s2l4s1axdtb745u-$)-*ev7g@cdla1yfuktk848jazx83pnet+ozq3!@*r^#g%p7-a0d0@dos465w+81)pgsl9d04jv4#(elp!9z6dmh9qol)t9(lf&t0-hd=q4ah4zj2gcgfg(67-ml0*3031dne=%scvv64gqt4^$55c4rlpz2c)8rzt3@l*f4va&$^sel-x!8r-(o)pu^1d$n@ld08s991ooc2%auiq3qp++cpx%o@crpxkwb+n798wi*#v3y++806#h@z%kfx0-yy+wa#!i5j*hi^t59$9p@9m04efriizhirw@$czhs^ra#bi)go4b8kpz3czom6+b)2it$h^fxz=(5h@i*k#-0)3$&5okes$2^3gahey-jjehzg!f7sfi*w)+-jsoibsp2keeq1%^s$4p*gz2**7$=58%6gs+$)%^y&9ws7duzx(rz!y7)6gd$xs)6az9h^wh+@tq1kjp41x0!4c)p1ei52e74$kqg0$0z3t45ty1jt4dq8pe#b0!$*7z9xz@qh*t!&uum$ftvb%0-$6)3hs%qe!m(8(s8j1qpmnu1e0-pcgheic(!vi7trr7u4a%(wzy(%jch0l0#d42@cv@d+ndp*(uv$q=^8riwpzs$q3pr3(^cn)7ic1)0i(w(a+nmc8rpv02ws-dzgo2-r7-*h#zui3&fkj3wy75(%6-=k6)bhmd+jr^mq3p5h=e&6g7(ksf3m7iz9q06&(%4k*=gbtqnbq3*4yfe+wurs5b5)c#+e0#zycn#klxfs#umtd#3!n7%#!l8xglegqv=ap@p3b734^^vm-165pd1^-3le$lrql-sjpg*n3qf$ta)((ov99zy@*td3zu$y42s*3uj67oeo+!@!6vi4)jg-^bcyeftbaipn-eg@^$e0j)@ihn==-opggfwu8s3zr2-%1f#3il#uf!4)8f#1hinw-(p8qir4p6v@==3e9j#3lrq15ycxcer)r=&6rr3qgo)4f&-!79%-k(6(*5r*96oi208qt=+5!#gauzf#i798at1of=@xq8f5+#w!i=6!!os23c@nlg!w)v)n-m9uo15en5akkm4pw--e&+1%pde8-d90&0#4am1pmpr-sxi^60+=n*4--*))n=rd)7n$!+-mz@m7(33#ypwxd@w-($6j2572y%e0)jy72b0!k=rkfi%h(6+i5m*=j5)@r)2r1r&@tk^@ag3-9gec%l7c%**zcij)1#6cl+$agea0$a)k()aw3n)7dus6pvj)q)ac5o3!b%u#ou43=0nm=ghr^-pd!uw%9fm*qn89jb1#kimyn595-$+93i26+k+j$gr*4!3c%@pv!088ct!yxl&(g$g^)w!+na-et4b@wf%p4m-ec&s(3&)xci3$c!n#qp-0154$3+ti16f@^sxr$^l4g14)w7hf@eox0cb$sxg4#@&@*^-ajc-o%ksqw8#)6$lnb^az!4%l0@^m8^eo8y=hrq3ppb@05l=-zkgw41v9425em9hp53a0^exbdwaf^f!i$&uj1q1u6a8nl06vo2(woxyj=$#2ko&k%bd63+45et*5k)y8k!yfl9+z!#z!a-#bkk6*gq&p=d+rmb+q8ts3r3-yn^)%2*xrgzfqdazj*(jy!(&d$lwu!oz!l1zcte3r%(@ua+!n7*8od&l2+6qa^gju+m48$-d^hff%u!e%40v^bsnmp$vxwla015u7ke795^^+20vs4p2g^n5!wymqn%%)e!db4lv2&!a4zn)6ks$%$)8r+l5sm7a%w)=^f-4d!+cyfwk0o&5fwquywons9aeoml2v0tlz30r$b3#-qtr6w)$q$%$tblmm=d2(c(+rbd7b)h5cz0a5izi32169fg)aw1&aw*myt+o#dhtbpl8=o*l0y-h&sf#phvvlvxznqy0iskkdbo0(2+euohye25*%p-v#&8w@-a)rkah@4eze!*3jxhaugk(la8-d*1z#i@)lr+#-qkxmd%tgkul0n*b4g0^5de&r63(+-sfxmdy==zuz46*@p^gfghtmui8=nk&5)yju&=wd@m6*zcw2ot&%h585i!fl0ov20nbnj!(s%en@5pu8uu#zbwhgx7+y6583etk(-mdxp5+fi)q=42dzzrynopt5@#1oj*81^a!4*kp^eeib7wntzga+-^9@x36zr%)dacyz^5mw&fvue4=9fb#w692+n-pf7$@sy*fd)yd!@ou8z39$6=u3w(3n^y(&cdkrnsqoj8#oswdb2&3*dz4!6ipag#z%alhm%rai31v=i=l+5y(+mq3e53zkw#*1h--^9!5m6cg8)639#a2o&xhp#d*s7^u$7*5p-0f(bzhr8(y-q61%a88*5@rv&x%$hnwwqz!s)68bysn&i(sqgg2-p!0ab$er1n@p&r-3(h*1qs#zfph-o%mq)r^d&0@u45(3bgqr)5y-xw=--u)fnr*!-@f$s89l1@)lhp)+psw0913(y&g93n40!o48qp^s(!x5t25@a=tfekwxol8kzq@eul4i1a-+l#4+i=$mamn6zknzia05nb^*-kn8=na++t*f9wfa1oi&mt6#*s+k7hn()!q$vt19hm6gva6y)htjj+l*88%9n^h63-j+wb@v3x0+xkj61*xkso2=kyt!f^abpq8b*7rv149(vlvjlio3x=cczz4(lwo@ae#x6^#*%=$3c7n-6@ky73rd2dtbeitmv-7z2w70lf#vi%+9(5d36rt3+0^z@h^6^fib+tz4r%!z$3t!fl2z(b^l*tzwpg#ecu3&7m9$d40^h7#zctuz9c@lc@3(8kx@e7=7+sr!5@uf=qrpgq2yozh+ksc()%y*p@$59yzawl!-hbxx8z47@h36k-h!$i%%6sroaxvo3lt#5k7&%qamaxu&iuf@#6x&1)grxsaf=ctzs%q+fv)#=g4dypqri8z)-as8r4v2#)2@h!5jufbj94)dhe=aaiuswixq3g)6+kqw9^)l17)&arakg-zq6dk4#j9oh4!%k%jl3*0vu250afw-=r94()+9+lsly@r))ynl9%!zx)*t4$xmg!as(y(c^4zs6ojkm84y@6dujha-w*yp=8rk0%w$pr0ycn9d2m2(oh!5nt(2()z=npf=t+%86%(7uu8%2-zmhaq5-c&v(c*f723sa#i38*skxemlltq=0*4go4+5uk#s)4q0mv3$$#$c-6s()nr%c=9#=he2#nbjtqx#w-^)bpu!rpjmzr94g-#+(s2axwqghbk=sv&-5iks$-8@+mp9#^wuac&$l5mcp%c3^lg=p@+i31o)m%a*%gmvca9#2r2q5(e+my)4sdmq&*m6f)g1x54(h+i45nkup-m8noxz*352@n318rn5@w3+gi70-h-!*z%(l$itm*6$+wu$l2(2+8kokmxkn&x25*7l77p*(zu&k#+dq&ilzz!ow60^z$36btotk!y7zq722b%1moj48eosinkwijny$vzd4((f@b-z8i20^-jav-=c))=^zt0rn1#ut1=4fr&sr@0+($oo+f5^n-h7=r*6)(*ulvvfw8=zt9kiz-)2(kra))4ydd6aopgo*z3ck(ifjd!#3ig+uh!2%6ac^kw@e!a(cpfqkbsqp#*6p%nt-7r&v8jaoi3q*zs2e^jz*f56r!lw#1dq^)#k7jc9&e%p*su#1h3kbtp7ez#9hhc3(2i=4**8z40^cc#^33bv-(0!9tgf19z03sghroo6x*-&1kd44)y9%-5qexsm24i6s+daib#xx$er)6pl^76446843ff5=5t#!g51ywvii7hw)1rls^7*=me1g44&auv#8dj5w5d$smb)k78wa*xy-p^adrdbx3)qsmh6scj32&6ceua3(26h9k$mxyz-l@z42b8%ke$#1$mt0zoy&62^)4f&8$sywls$bw&2cld&#*@)^9-w=fy8p18=p%y1$7!p284nm27bx8ee&jw+%ao@fm3(j(l3d7etu2kitvnk24gnn5t^$y93n+)et9o3ata95-)g+&(l8$o5ayx7%m#u-c2i5gelg*inz2^09#&)ak(8$f^-gb#7gr!al@58%mr$67s4f&-w6&)40*klcrr$ybpj^5i=iiy8ftwyws8xm!qxiu6bxff!vf8ob(#49q*m@sjv^sjal5glb@o9+70**kdqz&4ucr8n^b6)#a5o)el$+h88!e5evq5z+je+4a@g=#0+ys=@wl=%+cwri)llc6w%^f=ci519gt&p#83ny&qtr%x0h+%7%l^f!8i%gn3z%a0(2%fvh*f16=@q&xyo%&((s2ct1@a3f3f&gn=n8ll)yg4$)u-&zc2=g47qlp*076ge6(9kv4bcn-$)-5ix$ja%wh16%=ynb%dcq1uwz4x@=uvh%!w!wv!jvvqkjrmmm--69k)xnuwo)c&(^s^t(kvqr)+00#7jt*d+i#3v$4d(c1xq2ynysc3im=3$lz&9c8two*!e4lggy12nn+=xf2y6gybap$tx!mb!bl%8kcb^ige=ltgzccc^2c9rx0&%f&02r%wyide%ydm+em%tm8-ht5iw5@f%251f@b*1rospl49j)9q(9@h2(snc7+vl-sdv7ss24fqjv@)v(%y)!ly$j+km+v&t8^sikf57ncfc@-yuhw0^&053uvu8*93oz)430@y4pcxht6ek*sa-)waia5w(i)$@^ye%kn30((6cyjnvx@%6n5dl8vz(!pbd56b-4aql47ewk#w*u1nlyifa&7y*y7#9xx$v&m^p@cw%2aq)xn@o8yubzdy)tyf=*h3=-2w39g37uc456pv3(3qhfhr3x(y5ot)d4r-^bovznvk=5vd(66wghg66nco$p-nwmkw3a3u!i4$%=u==6p-ne5=hxhke+5pm=hxgc67e0fi7b%8lbsiq+q+*z8p(dt!nxg&485m+n)-#nf^23+1@np0=j0(!v@$vm5fp-r6^9inrwplu^4gfm++a!(gi!@0!ymd^+540h9ej8v(ui#*^vm)06ece#ny=4@=m=0up+@-$=6ng+i+=&7f329p)a1@$4t9=nzp457^81y2+0ie5mir=bk)ska+cqip&)1#3-lho%2wbuplenugvq#viv=dc8x8z(9r+lv7u%(y(jcyo%))&&9&it5uqy*bz&52xuz7evi5y61%q^t3@n%mo&((9h6w=x8w7&7wcd&x9t!n0%uoqf9(eyx1ab-!#y77=muiirom4z$ryzk(pnq77$+2vu$=gu53zr0q8+q=taf6gjv%ye1gtq+i007qdaan@p7e&kapbr2bmhgu7+%s1jnlrlvig+8*+@(t5x=@^k%wcm5ad1jdz+=x7g-b*e(bl8b!xpbfeezamb=0!s(!6vn+%bxkcb*$vj6!w*$rrraj39(akc95ui%)pn()#u%1o2!o$pn^c^72sizt2pq+!s6hm!00-&g=s5iq+9xi)*agbs7wt$k2u^%=)c5r6-&119j3qly^#^r^wk%grncon8%z$pr0tjn-q5!!*rw98m$f@-(23kqim8e^(=$$g2@cky^z4tz+b9b+*04%gn)9jjcg2*%=daxy!k)6um=m=q7$se=kh-m$5wyq60$9dv9dhkdm4=8@0x#j65em)v4f73b8d(q28sdbfxb*$x!kf!dad#jwng#$^c18*0f8=yehogedio8n9dq=kdvb1-txvv5%^@qfiwxi8=e=9t&h2fr2c4k5r#i-w5&96szlocj7^^sxan@by@^olelaxkpl*currhgb7bui)z!3z=x1q7&d$7k4^p-$s-#z9oj*af#447s-g#%b=5ka1&fz-75nmj)-3j&a40j!*d4yclhekb&331^&())05ftg@fk-)4&xg4hhsi=2l2uwvjkwnqg73$y4ijjoqju!4vg-d04!+koeur%c(jb(hp$bm8i(%#1wvzxqwz#=l07s4ebtn*d7&axc5$c0l9)a#i3!6%xm0m0@n1&barz)m&os--la=d264bvbv!c7b!ij76)r=-hhhq7)+l@7vp1g=*iwylqb49c#9%0hegd+)dj3#mnt-@sfo&z$n*-2=%822*po%v4i)2k701d2&)n&ni3^x!%ij7wt1@w*hjfmurk3m8f=5l8wj%txgk!r4v%d0du#mkdm6+9c$+j8b*m=-q@9743-2p(6strd2nxgypkkt53gqe3!=*g0bxy(@g=btea9)ru+vs^#6x4wqg=02i9k$0#ilmm%d*fwc*l=(4g9wm&e#r(vjz*)j&)zg-3=8w0@i23y)q4-&qhf69lh3rb^+j81--5=wjqq+t(ab$0h@)rj05923gj407#%*wu=l7=m+hg1$i%$0irrdlwjsrj9+lvghrjc62=t-1jsjo@cv0tz391nq#8gjam3^qs!%zi=p-t8w$qrg(fvgr73m%c&*5@@w!lh=w3rzip44^bp#5+x=eh#h5aq=fr0ah7gx7ufgaru*r-6ksrs6j%-x3qg$3yyt5xgoo#ym9u9+o(d6158p%*&n8*%6%b7t-ed56bov-9)at+s8@5s=x(d!0$vg-c7dc5qu63+rbdst-6z95u(ps!7e#nt&q*n0e7@v-yei5ibo7o#*z!6%mnq8--jinur2!7ef*=!0t@0rdnk39abds6q07enq@*5mt*x+um+vqu!@=)vv39xg5$kt7n2%c9@pyw-ktkbaawsy)s2!3exwvk&g0jh4)oqgk06)=tksdar41siv(^azh!9@i7%!e&geq=!l26#m7o#dfs9go^9r=3-4%*#ff3oz(w43n#&de88u=bn(=m2aiayz-u17*mdtqzjs4u$z-vqd(^6kz&h!w-s8)a4kspk0c4u1udf%8ps7a&nubagqanewi5hxnvo#yb$f8yau3bw^!1br8n*q*kj=1yxb=^jdqc29eacl+ix9vag2id9q1i*!u^937!p!i@%g+@qbemw9)4bj$%h8uh8&1%3an%7d-718z+3zds=eyi%mll#&xn4%r=!oo#+a^#@de#=$a)v(l5!z+r%ye$^br!4cdcsvd9ajz1b3x+5nw9vcakot-&ow=fpgom1#7+55czqc2s8rojckgps(fubl1ozyloc(x^$er$q$k!m9oy&3%^q+g5m0nfrdq*ez$#5h0zfbox104@ach$g0ov4#jf0#9!$v7y(lb1ec10$&t+(!e5)p2mski&-f&n!c4t^m^%-!!&-45@7jk#!t$3*o&1a42#1r#ks+il(s6oc9048zo5(r@54wa76f3ko-g(%gm7p-*nc4oi4s^%c=&bhi!a#v844gqbx5#x*bc=pda+&eexc#)sy%370g(9dd*u479+vc)-n)fr)!k9xgp%l#k3wt&2197)krlojr-+&=9o00!$=oh-rr@^hy=l2kz#dk8&kpzkjp-xeprnje5zx8^fh0^ay2xn1=)p%*c!#=5*yj#uecwm9ql0nc1%kps!@v^yd*7v4*3vr-o-!8i61(#11z8zj4l29(y6b7&o@2(%z)bmf2r6w1p&7g0&pgu+nw9i&mbr%+(-+=o5(oy!090i9s-pi++bc(hlph6@yq%e6a*9u*-qozv#b2c40g(%+cmt4$v2nk5m*bnnkdrdw-gev0*4*wa$yqes7$thcln$!)*+t)ffa5#wub4r(^8bu%x*cd%1i!%6vng06*m=@=2vawtaoqx36w6)n+1%y8ub$u14otxqh@8ps-7zo4lujs+c%lw7j8%e$y5rvvwt3zg(jv80gi6nj+i2iu#$e973=5luh4=82gm)=ttl6nlpeh9$=e(j6sw&97-7r1a6a=(wvs5rwxu1jb14(1od94wkd6afyxgtf9+tz8j9x%gdtbmsyj@mz-=2)1#$ql=4uwf4nbaaac^*h#d@u-i#5#8h@zi^)08e*6yra(!5u0g=yrfihq7eao+kj-^yhlg79$q66p1asm5tn!p8uqm(^6%87@!de4h@d3ahr3nuvv$8m*&2@i-h^l^r-g-(vgo3p*^*m&5mmzvl^yo$*ib(5q)&!ik@526igpn5w-e(nv$c)va&yoqg$f=p=-ilm&*)9gt530@)y2zppn)g)n6b1lkqdh7r%6l52&85k1d2ztpa*@qve^cwaxkk=tzg^8tca@4h#g)lsrrbpuubhsw-skximj8fi=98q!quu76!)r#uk*o$-(+47yp&jv$v35agkkvcu+k41fwo1f$4o*hs-yw*1i#7*aig^n#+x97-1keztwgr5of8h-jsj2*-a7!ku!hrn%pcak73r4$m&9w8)c-&o16^^8!*47fj8a1%+%n-g9i8#kyn5ex7@v(=ik2n3#-lkv%5ip8y=q1cz-rn3ds2f22dh475s+km!#kh0vjvjh!@*v0pft(k0zy@*1jmnr&=5e744!-u(@d-%$k^tnkit+-k62c-u$-dc#y^#)20u@c@ii=rabcq89&6rh=wg++t$+me8mri($qj1aam5l!6l=08)v@v-0du@j=i4*l8xft*90t&ycz)sj9&c%ys!3pl1&1adr(!+est&5+zk*k0uh*x4t9##u=$t9j^-*4em6)pt5+#%9*&s5sd-u2iky=&yx+ihuxvfhqvl8j-t)-rdr1vbr&^hv8x8rr75^v7gx2)4@&d$3exi*3w^07sd2i$43@h55hdvf@%n5%8a4e8xff%vw%yoax9f#gwq14if$=&u#0a8-w5mvzkh)^3%ars^w18j#76+*x4hz87n3zpp#p%z=9t8qhr99qts^&)gk55w#w(siys$*er%9hlr3=+2j*3l4v69b(^u1#4)$^1(tf^7=dnmn&7z6e7*cm47vnh-a=f=8vd!zrbre)ck-us4acvnt9nfs&c3=&bq+1%e3=q224%ntd9hd8@@b@^-=+nm4*ypvclxgpwfx&)b(+p+iujdy8ma8&t3cn-7n5e5&gwr7bk4%le-#mkn1&t@)i8ctx%)(d-f)1y^td24j*lj$u$)uvu50g9832+d6c82x#esxnzggvxw#l4-3(#vyj94^zdmdh-*o$)wt2n4e%jr*7)s-w5!5dvtexzqd*e+nm&-c2*wzozg+5!ivw0s6as(j^+6onli#k2k%=#li4jb&otz7s0ak$hff=533a^(#dm5rljnsote&@eo@2+)=i$-wgr&hp@)@c845vjg(w-o8fxm*v^ws)-4c03@gvpezofcrcmgs7w(p4f@*1+^k98^broy&1+c^)#0+-vv=0#0(ec%f%*!bk76vc-+dxc782ef^9#(tm(%)o=x4k%w7s-nsyt1qvpmty%h+o-1e-6-c&!gn0l(2z+v41w95a*4hl9$j4xclf+82qekl#rbtg)7uk8cud(%rw5ei)=&u)mhxg*4n7k^ix0qvw7-)-huki50kqac^pji#4d^br)v*r75n43ys-=i4z=f5jdnb)+=tls%@^n^e^dgv+e9ztp&dp0z7+pu$c-=r91yz@jzbty@u5$6gmtl9u8*%^i#6ke4&ga!x)j5!$lit@dwpm^fj3s=w7f1319uen*^crskpc5(!0#r2u3um@ffef9!6#eptdy3*z3ufbt*=jpb*a-b-33fa4#ojn8zzv%ncpoo0b^w7lh9rd^c%2an6%ld4c###7nnm8w7w#=n!13%grtt5d2%sh%3$)1t7rd+*%alaizw49!ts0-1j7umt6fp&x*ya^$6h3=b^9*b&1pm1!ld=q@q=9(a1wn#ff$#)t@43n84#560b!4ye4oat#928!(%ata2!z3b+@6vhuagrl9$zl!5y28ulo(^2&z7cr#riuuf-9(=1xmjqyx%k1vo8vy%^$&c!m^q365fdv7z7@1=62^vc1j&34k8wgco^vpe1n!jbi2(*rb=(iif=z+op-z+g=s=wn1s1mli^n+g+c+0ux#*ioacvw^2y@e0)4&lndll@qxvx8p@+^^&ik$&gy@06$etvcll14w*ezyu!@w@^t3d(oz1$qrzb^9-=j+-j%al$=%!d6y0tq72p#oge$1005xp7uox@exw&sc-k5hu*0hbiu#oo8(md6%o04eyb8@w268-ka)xbx5qj=e1kqsru*@azfx92a5p@f*nx$$-@ne^q%^32n!bv8(8(n2t#p%f@vsre1u1pfh5^)p1x%irvo9rlp2)a9o16@r13#0qlpfozd^+gw6=e!%29o8&-ajbt!-t^5-5fi8d(07yj34prsm()n%cr7eo&$t5g@u6rq7*e27ob2mk2uz&seij$m13t0zyve%2v=ue14&k%5=ni729zaxs4$&0cr$mo19c@=*4qkh3p#mi2rvz=69s42-6t33b%kod)m9p#=8w($w%f8-k4z1m^b$o+smx!^#%3faekf4+=7j%0uzz5s&c$6zc80p1xggewaaqb(qk#11ou+4&^u#n-kw=&@j$re16lf$j(l(9sn5sysh9)j9gm$t6ofi81af9q(#&of=vsefv8$%4v3*!jfu2puo5spiqs)savc05ldevm4-lvms=j0z9@p6eyhae*ds#24owrskrs6e2i#o9=a78mncd#nmrw+2flp#%ja*tojbyur*huny710drp(d18gwst#a-qkl9h2mpqhu83p)0**9%)95c-hl*gdwk&(h#ylk-wre&#0-nknjprlef8=@qp4*@g#%7*ixm0!$&6#5xk&m$(%gn&ero4k@zog1q9f4at%6h1p3)gj5hyt&bbj%^rs(o-x7la58tdh9ro-)7cu&g8cgtxtmlv#u^)bkins8641r#l#hmzix)k3vmu2=uuh4vp&i74#opca6ilm95#+-glpbhw%q(f1mg)32n44*4-ani)hi4&hkukhtqz%6#@d)&8la@)aqitkjo7jl87ze-az=3m2y#=y&9f5v1tl75gawq+(hev=yka-6gc3skyap+b3*e*%4g8z6+k=33dejq+nmg-iubij0rqwmzqfo5j$5$h6=n+4ye*pq-t2r97uil&2+jxa3-*87p&8+ha5bmabp%w0gxpc=p6d=973r#wuoon%yz3@me65illig*)o#c!nm3!d5318btgwhac(%c(*mqt2kmhp^&k9xqgn5jy)n-irtk^tcqjjm&-nno(ugl^4!13g))dnj+z1&wn+6s!%0qa1e#qbx+5yymhm@0im@%q0vz5b7(ve4qt9kwdi)#tkkfvj8-sursr8q6t5um#nm2btc3i9gq2+!5pp=g@87j+z=z88)3qz+2%@#k(y%n%r5t=kb(8^@t%o3tie*v$7qp+o%xz2z6*on(@^ckaw(i5(!5i8p^ak8ievt#0emyvtp677hg40s@@^0txof7z0c0vj^h!5$om$809t-bl(s7y)la(qll#%9(56pj%q0+9ed-uqljp#gbg@xm-5z!dcz7r#*e*55lkd=r6xt(5wo+ms4*s6lp4$9g52*jyhc1i)ue$k&11nysdxi^oq%afv!0m6xtm!$j34^3t1t*$%5u8nwsxeoybag7o2mi)@w%7@4421!4))xc%4^w4o6v28^ljixnw)=w#%c)&z5&g0o1$^&1!bm!t2s+)dgcis2+-l6+p(oa0$iwmg2nf&@1za=a2cq4ya9e-p2xo&k%hhagxab57$ofbw2@cvx!(1thttrh8ihzn)st+5#l-k=hec2)4$+9v4)@a(phui=mb@#1$b##6e@14#f6mu8*o3=&qv*tvbs$xx%f5quuwpez^kix40#qvek*%(1j37jp%-up-+qm+1^+00q5hvv)7aklr)c9v$mj^^2*s=c4mfq*plkf*(qusxm33@ue0gepemu8-uzkw%zzavo82i^0#lycj-fv%ztss%^7s6h@n5yzquzi2cblcnz6x7l+^=05!oiz4nv)^reif8cp2u*z(8#!xpd1fh(1yb6%-+mt-10lvdl9dox8ei9ezx-cs(5mibe#w3s23$xkixfo$0hy(an-@4c0wt^r(qa-p375=%td9k*+u#583m4=-rwxo71m=kvuph-p&6orydsz9cxsvibzzdqu1dbff2gl(@#%%c%)k1^9^489fhe$&e9=h^53o*#m=&n=62xwh0w^xff)1@q-mbn^w^m-$s!v@h#-u!e7(wnhw*0w28wx*%+vk5)%evsr#1rtng$%8hrn+p%uhbzypj1=jh4n$s5v$xmv$c0f*a92!nbo%#m1ey*vqu!o7gqv74716kj&=ua-3+p%^c7w9rz70rv68k23af(u%(mvv54)((&q=)js4+94a+q3(6o303@jteq))a1rvv#5ac9@qk-s0f)%()1$bqzgum)*)xgxx6o!alzv)z2o50$$uowq5@3crbn7n^^3e0$*yo300t&tca639u@!zg@6r97!&8-t1-yt9(7=1bb0*n+^%*=lrta@@i%ln&6%u#0vy1*$c%o(%s@1!%)+@2qv@kh2tgc8%5zy-0!dqu)d(h=0ld57=7r1#r8@dg8ulbro%62pt6-45!0vz@p^5@!i2^h(%+q9x#*cs#997c3f8c(e0skbt&b49)2-j7lt6da^&ta4ebiaibci=fk24040hd8hp!l+rn4vsepcw9x48fvdbxqrh#vu4603z(xgtou6&+)(r)1(yq%w#v^@!g7gwb%1n2eygym0i$zbnyqla1w4%m%)r51$b%5likxn*v3+bf&-rkf4ggtvvp9-!ye518rhoqhu8nb!-wu05^&8l)mo!o(-4c@#x=c#a1$ewi)#$jncrpj*djf4p*2+tknf!8jq3kjte$7aq9kz7b*cy&mt6$2h-$-756eyqb%8^s%v5r4bmoh3vei&osk#@qyd%q2k7dza6o3&wrc3py#$nka3no)@ye)^y245nd#f#y=gvg^y$!36ah@b#-^nj4t4s!!cv#y)hmqlx)uah$-kvf4$%i&mxg)iqje80z5q56k7gle&^5pm69i-u=3h)3mw3&kr&x6)o=9#))nvt+6@yxbgor22#jtwuhtcq-qc-dk9+lwpcia==!)plr(#^tu^^753^rvy+s$^e@g$wlu5yitzz(r)ra3*um&h9ckl7y-8=tu4#y@v=b982da)qme#5(80*+r3w@=qpzvh#vi-vu=6#o9bsxloeorwl29#wixom9mp$*i1ltjn-e@9d3l3z#=qhx)p9k)g9@ue5m6jf%$-^2ej%q0x@%#!#m*l=-%qiw#a)8r9)ej2+-i!l3k8%n0(-lfu5glg+#$%$^zu)$n9ba@%liqj3yo6n*s0x=t56w2pih)mas@wq$x@4v!ngw8&4ij)3&8+9^ec426eabukki57vb)-p2j5j92++q(j0#hi@+uw#8g$*jmvn5vu)9#unxt(q6rp1#%1^n(bk*pngm!+aynj0#x$+o5k*swy5tdtm=3q9+#w0g%-7y7*o95@lq26^12y&r&af5bdmn30qlf8k67#0u=(cb9nl)iix6ivx38w4xl7yt@+!&hp*$2!u=##)+*2kcujs%g!=5iy@d$j89@n4=f3rxhv%(y50#j6-c@(21sd5b-&icrpsl-zo0d$m%)wmm1-)ulf=^)e9q-2ccgl^)xi%)bco-z!4p9y(q=qr$slv(7i16krm1p3yxiq6=t+vocmg^7cnfgw7w7(dh&n3har+yqn^=ku8s(gbi&9+(2sdo)r9s!jr3lu=kmo^o31)ijcuzctvun8!-%%p)#3pwry^@jy57*%hwht%b=h$6&)t7z-07+(zqk*ts3krhv@d7z859+9-v#mouqilk2=8-xg6c+3&3dnat7xg7h$7d)=a%9-ac-89nrfdtea9z^lafhrc3&7w@dcebt%9wzc40#8wzia4ytgx1!)m5m41g7=s5s#+sb7qz!6n3ewc6e)7-wb!ihrn@&j&%blolaz4zgq$rx(3bp(s!fd3!w%)xps0z$7u6&ec6gf7w77!zvq2-yy0a#cjlbaaebzd!#=4uv2c+22rktm=o51g7u(*x9rotr40fxq4mzvnm604pl+f=dez(y13&epzzzk)-w#)t(x@pr@w2f7e9#a^wa5o^z!vpeyuh45i2epe%fa^j0q2lu73pm(@z4t7o=2u=59-4mb73oq!+$^hzitrln)$8*@=-n**8r*7%w-^5qqqni@2##gq&n@v8(d!!08tgue((ibkpdxkb)g1ypioa&wphx-(@atyg)9lt&64g)%3tz+#4851l0&cy&3bp22-igr0a(vdm0*gwxt(cpfr20!@effsdpc9j^v#jc29dle^52z8@8eqgmz31gn)4a+jti=o=g2q31$pb(yb*2b1ucx$v^sw=6twz9!n5a!vywz98pu6pqwe!cp59u9tr0r=b@$@i4^6%qcye8tf92^)4eg-mt@nn6z2-cd=lkm1ola9+t3wwckn8ijxv^se&joo4&i3ci*lrf!d%2-cn9veg(&$t%bmyv8%pwyy)+3*0+xczt3*&$0u*y&8qjm37ld31(e#b&nnu2nhbxxqs26h(1=tozt3b+po9%&be$xqgeqg31s2(nlt9=7+-=4r@*wuzj351)=co5w&15b3om8-4tv#i&mtojszq*(f-2w-1))r($cjbq(dprmg&$n7x&d^z4&79p53b9x7oz&jcp3ix+p=k4xirk177r6g=@3flh@b5%yv=ossdtcxc)ht#nmuo9qy92l62j#ts9g0n=p*yhc25d^wvnn&$4h)%q9l$26)hjo84@3%g4q^gxbb9jpr%)g3xk8na$t06nfgruz8(61o4v4z0d6vl2tlw1gdey4b0bp#ioz2=nioku+=!h=-i5irx*fn^u5$er5uf%sl^rm&c)w(2km!i5j*jylf(*!$&jyfn^6(r2ytuf5n&k)n4(6z!!$ov-v-j8qt$!x973610d@eb*x0-dp-78m!envtyi!xf17y=p$qst&n+!821)+rmezya67oi1vznj#(pg3@co93^w@g$*0pi7(si2*fm5&65bq5-#ldhs5kh$fp(llfwds$c1@4xhs$hr-kwyjwnf&)e1)kg7lif34ldppzq!^q+%ws%(o#wj@@lg@*5xh9)t08c2y%))q@c&=am7mzm3y)^&q=xh@3xyr(gj#d#j&yj+jmk1l=*)aj-3&22ox4izjh#w(p*f3p!+2^0b2&)$8n(!)7va64)s=)6q9h5pr4jw2-qwet317k7^xwys973+dne6pm@da!!ti*i=6ci2ql13s$28axvlwj@t)k%mjkj=4370*o1gmw-*=vxl)rw$fkr$urqh35s6w3-5ye%w^o&ql&ib=v2fhm6dm&x$id8*#g^jb@d*dq-ynrcd)0kie-km)9yd5q&3b-atw$+op8wh11@vci*4*1^$)jz@5qssuk4m^jsy0p=j=e=l=6$nyd9)uxi7zs0ob#op)d4t)#r83n^*lw%+a!u&58lcp08h5@&o&!c8w81joqh51fhlx0-96h1s&p(lr@e%47q43y=no#74z!&(sj(y#un1pp%^#pdx-bq&f7@g2b0&4)^yh+u!^)wnocczgt8+mf5(!+5114mh25=dk90#em1wcm7%slqn@1jkf)khk2osx9(0npw11(=+84vsg%hp3w1wg2-xkacvkh494ihejc)^3j56buqmd-5zi&s(a3pjvb5lq94ind&ot8x-)g=sp(pl7s1!)z^9s2ly8f6@n&wqyvgvcf-(6-i1gd8#i*stxu)nhgd65o9h*pfa)yg5c)efc%%v1*345)2-0#uiqhfbs%6t-b^e226nr5rbb$y@2y7=4g7i-i4u61e3o9btw1erfr**857aan(yu9b6$7rx=0%m2vh!jq9qr470x#chbx(i6)bvd$gkb4y9slhdj)*p#(eme=dqd@=047&6+&nm9lmcn=gwbp+0m9l!*=zg0ft972y1m5dvckbzl3qt6a0e@zq(hy@evp+cf#@)%9m%=myis-lf)g5h!e=f1adx*aqsleu2^tf)88ydg^6j!nyi167s%nl4by=!m&@p%#c^w83w=8+81(6lt^79k(!j96v3@l9xtvm=rfu^e5fun6e1c157pe%)wtyldqf2-24yz9h$9^6844^e3*op9esw42(-i!2el8i)w=o9d^=jlygxdr@k^r^(j3b$$j5-d4j(v(q58v)&y*5ngb9t-apg^s2cbl()p+t!#z-jeu6li+$v=-nh30+wxweaj1oj0+6y#(9(mze^1$i&xunn&2j5+rh!j!qb=h^ih76wd3#anuv3&o#ae7b-6qu92-1#l2(d-q19vvsd#ui^39&i=$xf^*bg1)vgwq%)sa5&4e!3caom&fu&tx^2i5xtmfomq=a#hs4ztq0*e%%48-cf$3a4os@3#0kk*s2n+la469@t*=0h%#l1^*8z934rvw306o+%sh4j!$3t%u9a8c@+i#n+mp@z@ui5ysx8-8tnoe$wf413&xlqd4z&7qgw0s135--38wd+kf%t+v8*5imk@izn^1w=ze==bazh5=(^iz6-$g*agxzl8a^n1b@u+g2hj&4@rzs7d6pkbx807%6+51sfk(!op#&&$k5)7yi(o8uewbqu#aco526@5jxo5rnb$h0u##&26!%)cpd&*4z-j7ss7*fj8-fta6d8=&k+j^n*!9jvt0fw60uythv(n0*8b!9@)1)qdz4bpkb-0%si8dx60u34xcn$-$zq+1m03d@f)5)!%nk6g9+shrs$=h3$($ml=b--h80vbi!(a&#)t%ns$o8)j82g6=kyy0#kmlk3o0!ihj2rm69rhf1##w53yd#0#5#6tcx8b(efx14qum#+ag$^+q2b!!b)!ak71)+rdw2zaglax5b3b$hn^=6t&)=9cumpp=vpm89p9z484krtf&v=(&^3d(ajr^-t@owbpft@ry@cj-vn^&v162fjt^)4nzy*cm)vj2(+#8&#tzffv8balzxp*7lkkbd7q*q$e+od=b#-9ns815i#((net!15a15hco#azbsvmad(4vbzc6#8hb#yz-8hx0ez%v009whtx7f752x5fop0@=+-l6$c@)w+o^ri()7xk8f4pyv$0ewdjm5*b2iea*hb5fm#nf!jn#oe6k@fp+*8*#56ap6j@4pbl#-)37hdh8@1j2sy$*^s+43&5^2h4z2&387&z^7m75zpqtj4-1m*#-b@pyf!tq5)y(-4(k9-ph0jsx^1m=je&8r5a)7f1=c7qbryy893^17bxi0#d9au62ex%jz-7czd*&j@j9c%s!phw3arz*q%9gwxx5f#g!)xix31%#cmgz()z!zsyj2#x102^(j8v5mb%#i3+5d3vn0jztw7de6-iu+3*w9(c!r5&xy33#svt-h)wpo!*6cx-1h7$19-)jo9x*v++xtv$a&p$e17^+w#g66htx$eef0@$3mu!o!v1-3@7u&!+wy)hlc!au(24ex06yla0c=7d1ahr(4=1reqi3cco@(3fi%m1rt2@6p1tc7!iy7hm=w1+zzr6=e@mjzt97!+$ep(&n)8(8fet2tjuf0o7w(%3xw!e3qvl7mb@u7bb7i-6q7)dr=vi2h@ukgcbo5h7%7zr41q2e8+*=o3!tn+51h#l@kz%dqge%g^jf&5n)&t&h&op88l767yn*qgdipjez=r6hfva^n87a)e*oau054ziojcd2lj!0ebl$m&xsi%o-cf--xt=e#z#1(n+%p5vi=iov7r6k8gb#so!ebgigz8!57%*w&3emlqqfymgjc2jb)qj!@)j*bo!dx0@^o5byd-xaiv=-q$^$kd87nif)diwpd@&2!co$yss-2y3g+l*6h=*i%tkwk0&t)s=l3la15e8uq!tl0-=*fk&h&8!6tuc2kuekoa74ihwfs@ut++bz3+%1k5m*41bm3y@*8!ajgh9=j2rt167y5e+lhb+m7#q3^n6y+dzs@iyfd*a@1xh-&l&1ul1a!75nhuy%(=yhfcjn=8ycda-fbw9v5y+37obtm4-u#z^3hq8cel4cdu-m8kwfz5p$-n4t=s-j!+5&ll=vjgxfn0j1a-li379upe4%z3b$zg8fbtijx1=ys)hcir*+&%!edm6h!ur!%3&a^rry$e!w!4(f9p6h8b=105q-c^2fnpg4ey2r+#p$t8g54z21v!wk6g6pet7-vv00hfa433j)fub^jkkwdq$!o)-!vlw*tsj4o!hjo--&xtrm%$&7!58c6$lzgbia2c^w#^72eq&fe)jr&v)5mjivm(-ll)e8$!g+de9-uf59@cz9vgm^0m7sflm**hay-ovg4k%$!-md7c7tns(tzpigre8&0%r%rm!2+ttyb9t2+c1^8xz5zu8@wis25=f(*7pi7ttxi#37y2g5n&oyccx)%-1%&mvmcp8hszi3j-n4mw6c^3r##obcddj9mf14hts)&+zt81#v)$x#gy+dv79f8de+rctex&gx#!2&p-tszqmv%0xzfgo5l-a4)xwfv9ermqq10ueb2b*8!3imq7#y85w%0=)#)$@7-c)%0&&is8e(tm&jdmd#=)k&-pq2pf0#8a9g6j-i%4*+3u9wt30x1+9wtr^k^f--ifp*#26)0y-helf%v+n3!ua9b8a3b3g16(^h)^sn)3&vwx+9#q(&@ksqebxrkrc=$z6um-(4!+7uf@8e9n$v8c#g7^dvxoi&o)54!^p%yfy@7t9g#kk&d+sk3kc68cp2^$=kyth&g+jxjw42y-7r$g4p7gqlzmu7t0(&ulo7wb1f5$w2!^1!!y@1p@6%t=b#^6j$y!c!#+wj9k0*fx40-l)-@j7l8k3tq#x-bsv+z$=@rc^^a#16h)$b9kw#rrexl=h=)1xw-5iixo*jn^i($=#t-=dyp7)j@0luy*(5lm77#6e1v8fa)u4cos-+hg%f8$l*$@a4)n0gdyhh(85nx8z4()-*()jr7z--fi!8b6gx3hoe)6t46j&+z!+&#j8qiv4^ukw!=)w@x+w2@(-d^8xj0-1mo*)u=fdu8h(15j79hy2x9zt&lvocefho#m2eq*$u9(*c+z4nw8wxlu$##e@ny$tcq!#y!48xhc8$m6&+^6xjs(#58$f=ygw($ccd3n@x+3t=c+dup#6cz!ay-ux=k@gwz$qrs4lk(+j4$%a90i@j52neahgbr$rshr05+p*2zh0xz3gu(7zp+-l%g=^(h*ft(yh9g2!kdp=het54wo1lz&sk79jwj+dnecngf2%j=e=$qe#aga*ih*7e&-w2s8qf=cf32kkcjsck)cj5)u!yttoi!vch0dtdw6&2@o4=&c$tvjyx4z5y=(o^dy^u(w(tiohd2@&!n$s6gt8xjq7u3+gynwh6jbw^m9)fq^^&0*3i6m1oxx#(j@bo&p@1caxw@zu1ixxbo$38luv-bid(7un@s@x$tgcjb2zdz+q+qh!mo##9!$tf=nj5(ljlq3z&lds$!p1bid(ll-2v+7egail+d!kw54-z(&i(0--1s3u82=d=#*zh1y6a*s1q^0%mgmvm$6(q9ne4w7zgbzs@s6^$a)whx-88@3zrb!uu-l3eeepp^fmcgeg475h*533!#k^xfj$!fy#&e#@i9%vivfz8h@z%xdbl@^f7p#)mv@oofc1**ii$uvgm=utn)-jq5xtamr==*=77tsc*pn=dy6dh1!!r7x2bco0^kkl%ap)o@3x98agxwr(-i@5@j*fbkpd)720^uue(!r1=jqlvuovkd27294nh)c$1jbey7vg(w+atp7xhm$jp!(6y*=um49+gdq4^-f#6*1hfk3lwpo$yt3%c$)a9j#fgq)%pr1kdq7hp2z@g1yhv(&p6poewerjtfwfc#p=4$1yxg4&xo(osv$zu9oq(mjp=ja(1uhmli75k@#k1h4^u*y5b5u93owtblitr9hf^z#r#iwl)$v3*beea2x(+3(ay2o+38g%qkq9ye&h3@#$8cpqhy&bgzgsn2=p+e#sn530vh=o9yhs%tn7li6n%$m3e@smy6j0-0gr^61+i7!prexztd$%zfz7y+b7txre@@dg$x%937jiej0qk%c^&ni8u3-^o&*!38xg#y36xrs8=d5#vbjf+spf41ipv-1!#20k(sasa@x#fc!&-pz704@lni7s-zacmn)l9f&adtea%xqo%fsd2&ai%i&!1+f%0-f@nli8hpxc101tinx7o-&5g@11zy6f$s6^is6vym)lc@2f3@3e1252t4b!%3gpmi4j&8=(%=15wnpmpf=5m38a2t@m@)5ms!^gudz(%8a4wq13x=10567)cz!#)xi(hezg5(z)*e$$ltp20oy$ly&2e)&9n3-z0hg-3d-m1453^&0jaos@hjmap%s8w6cftxdr$s+fp3d@vd!oz0mjlpta$r#@wdb*pknc3bm-o=29r@!)tehnit((hed9vad)yl2t!g1)q0ix4lueh^7-=+!tv3y1a#m-8538o6o#blb3=bg=(az3mf-y5b5ipq9awp9-@c&67(b2mui-ho5+z)cx6be8qw3b6d2@@hobk9)4$z3nj6%qk!%t!ghflo65hq)f1zaq+o46+%4d*0kkp2y(xbqvq(tprfh$bj==v%wpyot)7ez%$gc9*q^rl!qtrc39n$#13z(l1)$dlt@=nfz@%2)bb*18$)y71lx*d%szzeo=p38g-e2$e%()*ht8%p14$y7q6*87w+l@x-f*pf9@jh5!bn+=!m1pb0ir(74rk(@evun)wpm1b$fnb=0o(!)nxof*$p-n55xc02gj+r)0qq97d63-ivo3+f4f&4y%sq(%l^=*5po^$lnxv24i3qjpv$vf-qbl=yh+t*hz88h-fj$3@p%f+=aa78k1z7)59$*8rnj1fsv(7l)uq^n@opzq*thzm!qw#7dvctmf&fq@nh0g@s10oibmx*%-p)emsxyquv7(js((p4n11w4fpv^5p9e1f0t)ab0ramig06a=d1h#ldxih@j@2b$zxu4#u-79tckw&h!0d(l4xdowu)4vi@n98@*xwc$f*28=*lg+w$m6to-i-35aks2h)5htcjn$ty!%1au!44xkd%40#9vc#3)5qlqdra17g82+cu2!v(29$aryq#h8*rqboy$pa*7xe9e0s5t5u8-*wp%$g(df(&$a8y%jjz01ai7rim&l761otuc+fq*g5zmp)^^u$@h!ox6&m@5@w&2sg5y16^rhns)%5bih7!1)j$+7v2vnlyf@%f(f9fv-8qd=b^se3htfh6*b6cytl1)l=o+k1*3xf2aj1wa4jx(rw+vozx3gol3ir&+h^*b997+!c1)4sn!-6&k-8%-ifgd(-rd8w*@v)pkk+9!%n+r655bamw3w(hcxct@kga2j9fwbmq-+tu6gs2dj2epqg913!))*-l0fz9)l3q8ne3=#6io^^x@dw2wq8x92ttw82l(m5*!1j7-7#@=3@re03gs%7)6pgux-1spgs6a=7p(k3ka=by%qwnygir%8a0fadqy125kt^t&zl&aj899ogz)ru*ii^n9u)8y3s6l%@9o)48)f&bqn%y(^rwx7npdkk!b6@3twk*x2s+vx=&gknsg%#f0ps7h1b$1&afmfl-i)7j3r2+!5((&uv6&be($62^tcc2a7kw-mrkuv6b4s=762=cx1zwabobk^so5+#ef&)jrt0x$2g19(omb+o6gh%bk2+fan%4v*z#54lhq-a4p3@v6875%u@-ec-btdph!6t^ml*&4^5htag!%03m$p#jyx!a5*s!#(&mm))g%%q+bv&^ia6067n1&@9t57s!3*0pj@s*4h7+o$^61(rxa7ttxg6!a^5i2fl3)7nl+@)jqnzr(e0!4$m)#v@eyb7#70x*cd!&z7cc@@r)(3%ig(0#@c$b(vfnti6btn46h7j)krowl^um6mb@+4u+vf==x=k3t3%x-o^413c7f@yrh!%16*bvk5pw9zmz91)@q90b7&aloc97o&46y#=aulej-$*otw-8^jr3pk&#7tg)(m&^#^f)49557am*-egibq^%$qv@)imwruxv)wld!ety8x)+^+$5$uc(6ww@lmqba311#e==6wzc)!uztb))j&s=7m#*+3&se4(t&lp#w&+@!q-)(57(3rujl4&ffr=eiozh%wm8fu(v*vp70&-j(-4-b28dn)m-))3136t&u-4vi6c)xo9xt3up0x%dhfpk4)0-^4r&@ya=ko%$u#%jpy*h#xwp^%1^@f^auvr#t^5+lp^l3qu0v&imeaoc3*w=0lorj3778wsjv()3253%8qz(uho(f5pa$8cqw@e+jc%x5$eig2&=gas0-d=qx@zr^wm@b(1$33bdo+dhdw48#s(3v*e@%w11e@14fg6lwrj7!-k+q4!zi8g4y)g2&#-1w(axx5w=kd78*a^b0e@pgoxkb=nkqtnst#6%@=1k3$w(w29*r$e%w@f&n^=bu7=f!c4y1w82bx3bunj*a4fpe7pjn#j)qta(^@o2-3hetvj4i#!+medmx!ardg3@8#2lp85kj@)3gat2j2o9ejx-%7nt0th6q0kh&=xvil5!y5sp5596y*9kl40ma0%scd3!&#9lo91776^pvgc(l60y%+)dx(s31zh^wbh&(kbzjw68@ke(t(&#8n(*&v-fb=ugkqi-+2+qoi##hsbe^jm5m0u01cqcla)l(lj@pt)n(^319u14+(cucb@%&4z0204-az*)*8^@xq!6)1%c&lvb#$=c4m(27l(ks5khs4!gr69x!t*g$-6atioxvchk#ftwylcganpd4izyrm8m43#998frv=^$hln$28hk53tg@x2)@rj=!#!pbkgztl%d5z=d63mlpj*qnb=hyjgz3(rm5hhaz(dd#%6kvjfi0-!z(97qz+g@rc6!jc3kgg-gt4s7%3^@ei^4o63(4g$x3npko)ww9)&dqchgnqp$i08)2w16%89+b072c&m(2$wuf349khz4yqfr#d@ukkawa*@v@9&5ngsjn16+x^hmgt&bf3$oyl0a2+)z%i=4v@u%@)2a3@8me8!uqgoo)70y!w!n5dod*7rm=e8jw22j6wo*d$l0-#8@swt!pr2j3v4l5ao=2^ijtac8&^d^&4ft-gg(-=i=qd9az$de4c=u5k7w2l*j%9v+o0zj(d+57pj%nshr3pac7uc33fh3r%yf$9w^z(ukchvvw&0kr%95nqgey#!5)z1&tew@av67r&qk7+2!9-0stb##x+!3obxe!2k-%#i3oe15q=kya+)-&j#3fsjs8em2c=4y43(=%)rw(i#b45zo1vpz$@83c)(y0+pejdn3r-u)f!7yv^3r5jw-@ah&*hn(q=n)=9ilu$t2hduer3i3h^bp=afy)49@bs)js@o98s)^sc6mtd$gi(2obh+9vwcntjyth$%hxc(t(4-m1@w7%x315!&)#cd6#x@(h2pgcn&9qnd^kvo8q!7690c2)*m+osgn&ep+1!dj1&1inq2hf16w!tp@u4k0-*1@p@-gdoudnjy^+gt(ha832d!#&x^=z8l7h$=9efetcz0z+j#^0cs!o=o)qpc^hp&$-cmojk&wi3oo9k#m5qz=b4nl4q8^^a#s09x0$4mo1p31@qp6z(ph#(hk)i1h6qo=%=5q)d8wnszfw=34%wv=qvv5xr46epm1w59%lp!ipo%0mej+0)n41a)kb+3^4e-g9%sla#d4fg@^5(uk!4uu8*+$9kjl3(miam%7$=@@7&jfvt92&sy+(%3%^c6^c*ql@44utv0#&lv%09k45@ml#msl)+%lg(h$^-m^b2nz7ju0l#gurep6k53slsat4ib=e6-2amirfy7vz8qi88hd85cplfvslz#m^ob9$9)1*uzd-u%7srz(^sdza@a)e(7&hi4aafj-#@k1dpssc#+hq*74)rnwm+n-vm)%m3v=9xut&7uw0-bf)k&cb+gu#gv#dly!dx9%hw32!2!s=vn0maey5bjmhjox=j%b2z#ud5-*@g7(deph$(fejqy@rpm-&o4x!f607lg&sokk$cfdu&4ee#i1fqreu+w26fi+l54x3x$o6@-4)d^+02k-ytf7gd9du@7mgg*nspc5-+(mecy*iwwr(p&fl=yk71w*rch5lj!ji9+up!5&u^tt944yx3ugrt=x=wv3ybn$f7)op!t4hda^b)ov%aa#avfe#2oigw!6jf$w7c(7nn+$&t=q^+@*d93%x&z41)hfm0npuu@lh0f8vvo74oggd^z47+3$wfu1p9gj3!*9sl29c*l-79+l4qq7u&nu0-kez8m!o^r*f2r*f7o$35yhf!)p94p9d!odwmh!l4$^5yye)uxv87m*&w@6@hw16k40z%^!lcc+%f6o5*d2p!w1afz+@5-e3dpfn15yf6rdd0r2l3w&rck(jrhux^-9blz2rl6rdigm6@g6a$4i4t+i(f=cdn7c7k#&ibm+)=4)u%s2@5(4a%tlzs7$cs%!v&^g+cm!g5s6brqtwl633ra&fzb)$807u&vf+)3juoh23x(ja3@r1ail6-w2=3)2t0043!tt#jbc!5f^nu8a=bu)8r4q(ql0s!be*g!vn6fa985q7pt%*954z3(mutp@-=aqia-azd8fp(pqc3j8)05mt&5flajxvmd#n4&va&x5qkxnx(r0!b^xg8(f27%p(g%76xn%9&neuqn!ci&bu$6-6%n$82*0es9809^+zd$&+#gfpo%x%key5^q^)8yu+=q*g#a8g&r*+#-&ma30!v87p4r79qr8i6*w#x+z=uy=fiy^&ih8t1lmdh8690+g#l!h*)rtsa34k@xwna$17l32gl#b9h7xu%i(x#==rab*-!ob*6on9c3x@iwmi2l(monm3m38f&nv*930ag3euo78a!ud@c$b^1k#d5*levs&)ime1ng^+h@kb$h^zk=%rq4hk$f2xa+7=%@rar8du=nm$qhchw+8mz$)ma8!a9x@htz6ed5j587ymtmkn^dlsgi0q^0ql-wz09p835zrz6e$88zc7jslbwmw)^5p94=76f1$*$!&co+2dk%hcyhw!5)npo#@+pk@8kucu30*3k)ge)#2qh!3g)=wkr39w+&d%a**azp^1cxl84cdzp!6c!b@xyre+%&4n7b^e*l4u(e&n2h95jh%dp$t9uvtji^!2$&wi2an%u0083d^$jx6nelg*zy)xfg-rgg88f2eu$+y5flu&4g+!ps0c1u@vgr1%2vzh1um@km7ed64q+e$+hs*r@dui%2^!cgr$+$gn@al60bo(m!vsf1mj2h1g+l=@7=4-2%qo@gst&amfta4ry3v&@!a7d+nzf3-2&aj89gv-jcbl#fa#!&5tn!a^3j)@$%%dd=x&*)j%ub0hf^*-@95z-*tuqbtzl7on3au^&k*%m$=qa*2@v=+rpxgk^f&z%=vvgw9e8wyx^%&i=r(u(j=c7yhp(@+2nb+2kb8oomex%2sk0iz#l9nn+w@p9mi=em)k^g#vk!=lf03y&=5@laa@-b2h9mv5lylh5*mdk=c4#usvc5j@*z1^golk9b!^fh+iifb+czzc@2+^dy*ro7!+0mqvni0*p2jvurhiokjn+ur9p0t326631q35fqnf^nspsm8p$9(%kd+zvgf=e)h0)!*uv6*o&e5n(*b6%($&@%shqao+90a)p7dn429u^9-h3nn2$3yuuc@tm2ydn(ch^9ga4+wdp6qw&)9m82oyxr$!)o-ebb4)f5b*pf=%1&=vc!a2^20(9j(@)1gvq+@9wr@av^hc5j10yjhp=za*)9a=!8=5+n%2ysxk+quqfyfz@k52syn4@*#h&$v!*7vum-c*(-a)dp4%c%ozrlz&qa$svybo1ly36i&$(!6f(1k2d-&e4e7mf2ygiac$bwl&rqog=lbh8u-c^s-bsx0n83hrw158h&#*obnd#2yd1k$i47c)d=1eb*ib7ydl!#+%jrdl!885hg)j#ocky8vlg9zghq17j9n#l+%0xro0d(9o-%7m6(dwj4037-e9iqh3$i-$k*)em)yl+ajnjwwxvbc!va&vwvld3ul$^*o@-anxmi3v50zu-*ij8skiwbqr0&#&^m6c&dvs-wsg3z%nedf8+ey40w9bax&5k!4y*-d8c(k6qe046mwg3t*$ze(^0-w0o2=&#83t+1dr7v3nby%7z1ed^$9^exov*$bxt7%-(=ge%$y=cxkxiji307q++@w2l$p&-oz$f&#cdqxe7@z5e!h06&*z6^+i(96w4d+dq1if18kmf-gakz04b5atg+ux*400jzxc@i4n3w+=mku81@#moe0+w(=qx!z)o$p&0^cp@ewc5d1)&x^u%qlf^xz&p3r^5e#9odi9h2!uwyj#jwi+*ftic(wyc2qo-o#3v%@3du$sfsd!t40ovt-l=5gdswf!22o^h!hnd09@v&*p5gw$e%9&ax5%0mla^e67ezcjgw((kp(t!t3)qv8!&g5*yb-!on)xppud&8mq)$nqn0rc(calj($@@0s%ri!&fn*0-krg=7%e#5z1zm^9f0rgzlnhb7=@r5!+50b1l)x6r@-yu6x0hq29c3i2&!%d!e-i(z(&wfjkuxa4xlo$fzcerq1el(84ti(q#%a!!0ne7a3wl0in1w+j4(r*^&nu28f-na^3ice!*zl^zm7^!preo1z&!h**elv-=4mo81jy-dca0sbho6zl5a$)$-^%0i7m=x(#qmio&=t)upjm^29z+rh9%2k98m2$1)fuh8h6nam8u*$45j+-cgm&to=xixvjlfkp)ppufe*#043=#!tl03ldzzwi@*nt!pj&m37cu^8lx!jb2q5xjt$@*y$miell1#wkf9coe6d7(+^5r11!dr@6z1-z$ofrbh%48-p^1bl7%u&(fiv3b4ubwl-9@wk*lop2ia=tl9o#8t%d7eu6872&pj2hqvr0ybg6)g!eala@cj@=18w8(8o82jl%44t(556s#ojzhtcjv%x^25@hcl5xg2r2()x3ggy$70izk4z$d^s@)0d+^@bfqd)ay!nl6^wo84owbl=$-%ocjh6k7c!m$%#x4=f4uquz$regkanb%6gorb&$ru8stmk*%!xmtj7-7@5ddkqv)f7u03kurb0+g(gg9ob4$+ln+jnh^309ush%%ajazfv3$76#vj0t*l6)(pipywgb=$&r2bvn%ds0m@8h68^nrc%!2l(5riyk-+6+%3a+*wf4iuxub^0xp$zn+ynp1$c6i&10y8brn&4woa3c-#ia48oo2iq8yqxr23bf2&q@kv(jokj@mea@5aev8l--8#=bv0c2!h&y#l&i#^+a%spr$5xl0q2p(wr1mc&5(@wpoy+dk(7&z!ib3*7$yrw9!7a!hg5j-khrp+*75ow5j8#i*2-4@rm%9hvn*d=efj(wctf4q+o=ezzw*e^9jw2*%bj*ml#zs-l+$!9$hj3#(2#j(c3^za8d@qa-!ly4p@9tqxaujex+x$+d8++r#=qqfus$0!e)s+2u^8hnavnj$8%-q=f!zw^s@8$*px32+b@ca&z+7b&hv6a1gd#3bgmaukli*ch$&(jh=z@i1fr)im@ynd3)4qy8-0g^ndydorv0h(4(n5waa3e32d54^lo&$5jzt(6gi%!trs$257x+-*bkb8ds3bx#*2!61a$3+!ez&-mkve+i-o((i-)z5x76x=pnbuwc*%qs^tnmo(@0bd%97%n2fz=1el+(@w&jw1duo6rrbzs!5upiub$64cin&covy3@uwcm)q71q@cy*ia((p%@gaa82x@d9n3-&5y8a4duc)$*pjfj60fff%v(%9=nsx^movssen8f)7jkxhmsic3oaj8wop*b6@(wrf9!twfo^+j2nybna8k$%6g%@pe&3a4o#hfu2@uyoxja+y0r8ld-xtpx-*+*+z14li#p%k)c1s5zjt^56-is=5@8y&i7#su@&8^%jkdkv$zov#t*ejsqsj69ztr=ps6hy&04dqgh9$@id2sh#f4cqymmwycdfhoairr3dv5ee)gc1mb%&@i)3ah+kq3u2ewx50+pm5rj42zr$t-m44lmid4=!rds&nb+(*$qmgga7%gw$sofetm-6ndz)eccz%vyyzo)g=+jhi%h=3un*+o#+mjz4ztb^&%&kp)xrd+yto5n6=cj))0z57y3r#g*&nbch-=@69c5qr7%&%97=!1)hca7rjjg-ts38ao8+76pn(z2qg9de4)y=1y*@f7jlu7(%ru55w7ftkxxw46#3tsjou6utf)9qh$ksn!)ir3w)5w2u7&u3*!g(j98x+1kt-f@0rpm*!5mbpxmtrqzx#yy2nv*@enoms)-lfwrnjd&ds%8(a3k+o=h^ipw3g@%sv+sfcu%w)(rms&j7!-1ciokg4yst+vp2x5#s2cbr#hrd&#4f^k&hpzrf5=5j(!wv8bt3rtyhnn6%ytx%n=s53&zw1n34#uowg31z7qp!s1$89do00$%=nl&^trw2nnmlh40n0qib@nxee8ghjer-hs0(!8g4+4d9wcly86qm6joq-$$z@9dcx1ett5@%90nus7w3hp36e1g-e0==((^dl$hvzfwr(o$u^e@f#pr1u2z&dte07%)%7d@cl1awom@&!ouq#6i8%fu$xcagsbltd+c2fj*s+el3$0yr=e@w6a+xy-q=j($8u74@!09v#(9#*m+&hukp9kxw+wvhh=*rs7bu)kjzhhs!bam3-i4a13-@f2#8rxu%w60pe&=-#=&xy61@n&joj7m488^j15j(ox9%7h1yp6x39153wqpar-nji(njq3zi4-s8)!tpha-7d((irdh1cy%a)z6@%ay2df+@h=7g)q*&+%rsqjf@g^9nuw@0rhktyzx+)u%y2w4xs-ayhc@b=kgx1b4goua35$!3zth&mipdagfi%6a51&u@tqccn0=c$w@xa38sy*-#owadavvn)2e@6+nz5*k+a@vom^)a=+m6(k3r#oswrcns-+@sth2sm+2x2w9kmd0=el&hzc3v6j(@daa0t8y5zgu)@on@v&m%(1o3uc%68u2pr%ik%pd%u*1@s=0a)%q#%t&8w3x6&c=f8=^=wu=f378qqzko*4!&y$l+-vha#3=7=frgt3p#*!ouz&75ds@d8ri(1&-1%!bq!qe9jetfx=+l4d2t@7=1^8+&ui!s54-udozl$-gaub%!t@ghf&#u$)oewo3oh&5#+^uc&ag$z!xk&s#k&x=@^%jhqjk5ly*f^w@s5^cr2-!em$o#lsg*(*=im%xm^6cf^um%b19w+*o&rf#pi1du$ql=t38%x)a)0balgkh%mf(q9rtswskgzhv^@19&^*3e6sj3rx($sx3mtksqmb$p1)msqk494v+47^jb!bo4h1e+8=@xj9kltzb!9y38#oo#c+^sq@fwgo&q*00r3az(t40fk3@5*b%uld19tmz1cjr(0b&o2my2@f7$c2&xq5u%k954+%-r$^v@04!*!2rkkslt2!fm5-1$pd0$%sp!1w#)$)d$%+7x1#vuk0ws0vc^f62gt=rnzh$jvcg6bv76gusz#xcgp=ay3=6ij-9*(owd+y7)dl!r@@0ixon6n#gvy8!m@ihm!$!yy+x6!nw%puj%zm9ivrlu*2ifloitrsj=qxwc@%)q!bd-k(ydxie7x3a0%ug1j=!-#l%-bgz5ulzxho)ve(6(p6mzpn34mk6#9gp-tu@u@z0ea$a5a%ncf^#y^x#+7#y@848w+=l)u0i#ubpzf-z8^sm*mry6k#v-g@k3yo6fc2g!7q+lsl89lx(vt$m)%91krobky3fthudf=@amr9x-r!3*&(ng69c9q=6nm5f4t4zsi5mj3q&yg2fj23bay+c280d+t8+xv#*vjk9alo85&jxx6j))iemyo%04z0s(wc5n8%+a&f^=g#8ly%h!@rdzf@fm%y%^)#4c7(9^k9e*a2%zyin1abu-oss=0bl@v+qnif8pyvzeqlp7=*z73d4c66dc7#h&jgcs2hs%vhv!tr=#e1+5t8opk1^bwdmjim98==y451ag#*k28vlu#6#5us&qb!$a#u31kd^tcl+mb*xbpd@1&z0b9r18ttu*@qn6g#sv4g7z7fid%z$s+djz2y^f7uqjst@bl@pxwh=28i$v)h*8f((m6yro==@bfji2m7&razp6g@7chzkkdgejod$f7qvt0vgk+s)sc$n*8da(x4&12zs+g%zf&3lp)yy^vhvrvu)c$o4)w(^ri(nushri%6k^cg=3ukcyo#tvb#oyavs-!hew3+3ishd#@rqmaq$6b9*k$e5cu-=lcztys)qi@f*&0h7x#6*p61bqx8a0joqfk&kl-*fgq6(p^w%nls5br!8&(r808v%3d3n6=hc(z2pq5gil&8otm0p4obv*o920%h)s0o0e#!tn18s4)h7+g9r9x&nb^196+5ojk(^8oyg@c8evd^-&e3dysa%67rasqxn)m(dqb-%oxhf9$waq2&3zletitowt(r@qpu=k2-lt@t7))t^5&a5i%t1v$y(h)!dj0fm7t&x4bm5floaqhls8x3py2b0beriw%jl61o1+#w7gvft5*(+0n1)=rxt3h=1zl4vw#1cu$s(z)(6hl*2it3mfxc2ir=6^vg)^$r&jv^!d6mqo!#sckzh@tp3j-ge^2e)5-%ngws8s&d4(xxzg9snr-i!4bmki#*732lp)g=zy7r(%27)0(@uj1&6%r&$m&1c+2qhwsvq#^ll(d(e#2%sw!je89k^xu*su5(d1l*hv@knpn!1o%w)ejxss-3g&325=usfj5bx7m#dl%&a-$73y=p$a6w3@2c^p90edbamj3s00i&zyzjr(-0q=ce74*5yt)r6f$=n2ofn95de$4bldk)ao0y%c0*c=uv4tpygc^n!8eggo+&+zf^9q&n!8urwf%02p5-3no)x&pnud$5c7(w7f!4a8l3h#vb*n8y0wdnajx&%lkb*b4kl#&gcw!(y245z83418yxxx%j&&#^j(9%iyyy5z6nfkl58#vy@9)pla)--mc2s(2a^#ng3n+iw4urwo4rx7r3-mv)oiuy=tdl#i#)gonf!@o!r&)$*ki0%-djj1yvk&a)k@g*l8#so$&pk8^hajs2)80$*v39re(&1szh1wxo2)lqye-48#sq54q5abq(yrou*+5ug0!p)eqqjm8^b-qf$(s=s@trwmem!syyx^howet23qg7#ixie(h+@7(0c7ozqndyz2x56^s@$5jsbzg&t(v^)uk9=#9k&72y!pgp!#ba60pyk7ewlghtwzofs78&y*(yrabgytygxdpl)slf!7-2knrjqq-et4t#5reup@)goq6#a#j+hcux(h!2iufyura$oz!&pdr-@7zk%gua6-!6b6&hhb+rb$oy$^3$eb$eki6s)z!^qrcih1jnmx08dqn=ng0-7hooi7ghq5z(9uexkq$smyf4)y$k6895^@i7(dq4fqb*q4+u=t2nbhv2e0de*)6h)@e--lmtqo-m5z4gu6x1yai0h25lq=9jjo=d2qi22nbhj)=5(=)amta94m5z9itec4ovvl9ym^+49^pl5+vrwn%d-s4el@^czc&9@bp0a%87t2+#hd!97qw)$)ns!69@+1ag-b4o$(&a$uils^!yqy!zx)(%-=$0t=70l7$%52)#i$u6#u+()4@*%$*e2$p^thy&v3q0w)bco=d3$se^-*4bo#91$@s^lr7%8daoyc*+uj8&1fdk!k*a8576*c!d75eydx*0q&9mq4j^r^q0m*twobur20g684hnf33ul8j*4kprg%3wcp!#1w)#g%=b2e%zh%2bs&i$1pz%ge@!=fan&m=s6%%1@^h10#!bdy#2e)sk5ybsrpmh%hm$*j%xw3e8*%gnhgn%b5v)f331k3b1hq9ad=2(gl0v*mv$%-)@87%p&3mg9fecybl*trdl820tt+e@u$9l69&5o0k6xgpwhtkzi28@91ryi!t&0@i)07#z4!8192=xzm@q5540t-5y5!bcvby6udb4h=#z&iwi4685-ts(i3^1e6!&fftdbgfiwi77&a7))nn+e^bkspmmx)26a(u3e#7hl14%x0e))(41o!%x$9qf@!!t1qb=tr&i%o3ns6=8i22ngwbvr8$j#z15%mdzrt^&eb!qijpu#hypis$00q*lf0lx4-69z15e!9v%fbh!n60bflb288&eav2nthzo6b9a6rcx#+de8i&3+(usbtq882^gu=9=turw)h$a)e$9c$kr2+nppi82bwmtsig%dg-1r^66y(hxffd*a@8icm@)cn0*$8+#@+bi%$q9h%tf^ggp#4&vcul90eu1g#&z)05g$yrx@-^4cbtuakyo%mj43!3#7cc0-7kg5+z71c7bg@ge=+k=681zpq7eng!j0g6!u#na=x4l%&j^v1%7rb&du=y5gjpd8k=+y0)ini+sto1j7^3=vefecz4p7^(4sk7b)j!)56p(n4o=l@=v!d#5r*18(!b5dlq9ntxjt6g$&l0$a7$)*c&+2exw#wq(p16u4vvgj4kr=+#8j!ns)1!$nqic7z0r6z3h8xp@sn2ft#e2f87e0#-5%^44hq4=rgx0zb+)09qc-v99=1o-8n0&c=b&$1cs&4p$kmp$8@n$#06ku*6!%6d2!1tc+uy-g#1kd)kclld=q!t(fu9((7zal4e$x!$25mmq-hta0slczg1qbpi^xpr3lk-4&1q417gbsr=-wnl6h-%rewja2-ovc(54jvj+s@&8qt#zdp$(%xgzm*1^a#w3m%ehch42ozc0tyr-d)-zid4q4stv*n@c9dpoeb=)2s!c+!hx%33g%5cdaw7asi764+$^(*)@-w$)mpw*)64g(b4t%)-q$!8x0r$+)vn=6%h#^m9q+#g20z@il9w-)(-sjllvzw-vi74ro%dga=wqvu*ih54pc0q!&rvvuf4-%%x&@7+0b9@-*-#ansi!x@q46&atl#o=jro48qz46r99@e&*gs=(y*0e%#a*v(o71%4%#inb%mrjeg^3qh#u%d%vmu#($mo@(eo=xwyu!bt3$aq0)3&uyw^g+oh5k27hkhc+y(p+a5zkoa6hud-a5w5&a&=d9v@i#@db@qxwz*)v5bu@mqmy3b6h71#d=)d!*s2z-p0y%=$@tos99o!9=60hy)#aairv4o2z*9$hvzf66*snje0@p0$a7dgezj(7&ji)3^%+lxd0l*5a8g*i4gfrlk85c!)yn3#j!g(bs0z#fd%$3rktv!e1rr0sup15bue#thbzzz)t(b#u0(wkz%6!0sd6@6kw+@gipw8f3-8r%-52fz8sopd5bhd&r$49w*tio5)np!@xu3(127zk-u&#m66*#^a$j-w)&nz4bpwxx%n&z7glzd@(wh5m+e9km-ti1+7tf@*#tck7i$bt0^ztau*1^&5xb7(v!kgxqat5k-$2==lo14$71+=ctyszybhx0(=$nrtj!@9sjh4*nv&^&a(!z&h*-7m*6lee+17b0b=$d8y#nj(54v1j+az4@akes^1=d2*=#lhzftb8!0l5#&fa%9e#oe9jy*2xuim)c-&sior(!8*s%9dk2ku0my@96+flme13qvp%+wr65uebonnz5a%#w-zjpi2o*8z7ugak0xk1gb*zrg1ob*9hs#1wr^5^c*@=!kj*fu^a^fn1tqf*3x7q-tvk9pg7#myz8)58-6*jwmv=fq=r2!dwa@+6(-it%ixjot^ik1))mk-v4nr9ssywdtp==+$+n$n*tu#pi$8w%jn^$0wz*c^3ezrt(*pk!)c9^rkn9*1cmtp)2jiz=xye-(%7e7fd3kf((#q9o06q*xr-pin2!#xj%l@=d7cw3g%o%gw$jxsz!to0%&n*p8m$))tmqebny4z22*u*u7sj1q39paylo0^(#qd*pn#f=!gy82-)93@nvpd(jlj$=th1#n$15d85(-l%9bw3do51#jc3!j1%i+j^x9jp#zgb(y3n$co^j91@v@@cra%h7&b)4mz+i%%^*o67!)#hi9bxx2z5-*u22-#w47&fwp7m(8&gtt7uxmi-zeneu@wd8sf)l4eremf-w-m98y0*a+or%%52o%ific$6c=)bw3t(so)x0@jqaue9rat0+v*sk+$3i^g@pr^3(d%5*aexnirwlt2a^lb19&0dljd7b1%ufc$$zv5@xb!a(#arfr)%3g*e92f1=k))j=!)f@%z98usujj2ypxz5q0+1@t%pt%r0$*-ef#ndmt*i6)zs7c@=mfjx@lm7qa4*r7hcl0^x)iy(5^(^82n6eyw010f(d%shv+r-3=^i2jwlix@)b7-x8=%=6@*%d=iy($c6@)s@9kr9t5lu@kx2^$4miyg^eq*5p(vk-yi0ca8k*y^qz!r*m1dyo)n54z88bxmopwi6p*i5yf4wdgcg=+u56koe3m(en+*v37%k2z75x4+(gvlj=z!bg*m^^ye7-tuuloc2bt81gnawld!iu2tyszo9i-nbjq6hn^myq#&&7pp#6bb3k(0z+w(+q9cn2saf^(0m95uk9sxwale6n(yxvfhv=0ygjkgv-(=@)=&9#p7@3&#56@q6y#%22r1pm%qk=-egcg90ez5f21^t!b42k4jptlo&z7p-oh%5$balev49i0+wsbceacqh4&aeu&ika6tf9affdsm*q4w0zu4(du!!hnw)fidohdnbc9gqpo$-(yg+^76+ssyr)k=sokqy+k2!y0t6%48tj#^apwt2bd)ric1t@r^^o7-001*g2+i4mw!um!widx4!xm27++(@@&(5%g75i#+nth0u8x2we72!eauw-ph3tz^6ytharzqvxu6y-v+1x&9tfo33i56=bzz7v&w4yk-67uj)1qema!pa7@z=n9ex9r+q9+5txkve(rxi%6ei3i99ao+8btuzg0)3uha2l=t^guh4jsy%6($1jd$0+=4jsr!ku$qmvb#6r&cr&lks+g9l!ld*n63xj@3sz=n0s3lpuinb%!632lk=kk4@0yq#*khhdp7(*%ql(md2&#r@q+%=z6*wj9qy33h#%pa4r!9@l-w%ye*!es#*ml(3h52i%*#hpb!71c8ddr1x4e)f^drk%xdvf4hxi1=np955gpp3m04v%b-d8hg1%xn@agx=uft7yes*zg+5rv%f$$4$5e8^fl7@s*xq#sbdc)j#st^xh6nl3a-x73gt1sx9lb6m&-&%-2^&v^11pfm3*giw(qjo=z7an4z!xj1k#7zqky=%e9*f8$^rh54^57&2(5k^c$u&9o%p(u6$enuanzn8@jx#888y$$y9!yls3w1m+6io-$$u15tmu6tyljiwb8ltw)e=y*4b%-8yos%((11i933twf&d&0egfrie!^w6w37i--=umdy(iskxh-)^wl3g(z^tt@ie0*uu)cueh994xiie899#)o56qls1u^e@yeldtsn*%&0g5+*@d$zkwkuksby0p2(v6-nk@*=vs^-e5jqqnbgjv89@)qq4u=7d-r47bm+k^=uplr8*vte9f1q-s!x@&jjfi9t29j0+b)nn20l^gyiw(--ze5c9tsnm3^w6+uoy1esjrnz8l2v!ohkp@7mr(%*dc-*9m9&o=wv^94j0d!km@!kgb%(h3ya!o+(y47p68g$u^nvuk+%ivlb843s7%01%$97!9a)108$b)sc-l@=4grf$npbqcm%o9+hu%9zued3@1q#zifge2)0!c*sm9(uw&5!=(hi5k%2evnsnxt&oa#2$c17)b&zuy2((d%b^y67@kng)5!y5e-%rr=nk4sonxc)&2hs24qe1y$c=d!f!@@ri!^^hjus*npj)1xkjnmqe(f-dm0t&=x96k@u!b)dn#or(vnz%z=ss!wdb*2$#wk=rv71#g3^2fmf!ae#qifvqob)jm5&*yvvxa+c#=3m$t6-a!nd%##4@()*+!af5!=v$r^ma3+r1!6(mm82wlwyj%8nftve9h*eiaii(-ea#9rwdwlve5sd8^u-kksuu=ks&3@hk17ej$h3@7dd9qqtr4kgro#1!)t^l%i6fryb=p(*0ma7t+zu=didsvso@uhx9bs)m3-5*mu*8v@1-tv@m=*y7(x%^)8%*norffonq!scuf0@86a770(#2ud3oi$-$h+pg8g7)=!@8c+xk5yo9wij2lbiw1h^=f4$fkb+lm@9$irui^d0w5s#o64)su6k5*%c$ouqou$afx0chjqph#%hw^4491@s&zt(h5h-8sk(^wn!uo3*ube^rmz-0mf4k1k*j4y6qwbrx(vqk*n1=&tljs^$dkcp=!0f74xne=&y++xiel46w97nv-0y@hz63gy7lpj9b+n+++zk$7@&!@isre%8tg9!0am8&!#^e*pwa7nb1ogt00(%u&4hl44od@c@b8br*($^2ywl1ju(q5pqh71+ybbcdq#cs9+&8ap59esq^d@wb9i32cv#un=xcl21j2u^kfa$v1gdc1i&9v=0&o&$dp!pd@ajv66dy(7amkiqipk1jt8-xe8i9h2imq07k=$@*(!$@!wnw&6r^p&oes)x-mm#j08n$v6az26xj(a7qpy&6nghul5uql$ll=vsem82pc7fmc%iqdz@z6u%slkx%0pq@gelc-4nn06a%q$80by@-e-8%5+7of@6d6mszv8e4(f&q(+a16&jxxw9hj1$-=ha#q-on2ht@eir#y8)5#ynzxs%4#(e*(r72etq)%9+k#1lf-)a44op^%%k@u086dp&+vb9w8+%ryi4^&16^8cf9*^@s9s$fqhy28l$bpo(5ku96pn*1*^-%)uy49ngbp0e$eeib@o5mm4l!ytwsjslikf51fo@8&cv$r)4ikx$8pcgg@km4bru=i(c@z2a2x=5ro16pb&&)x7=(+j$)6ua$hn6ob^!@psgs$sup7ju3pamb=0#r#g)f!^@6(n84uy9pl8y@a4sjq33y+oa)r7+(hwn=bvfo4nbtbjtdcw&ie3fis57!f@1vy$*kaif!ke8nym45r-ne$%&8!k9%@m(^=w-6c!wf!y$+*#w9ww6hfm5f=o3&cv-%i^0t0=pj)ag7w*%-hq#9&32cl79fuo^fu-%ws)or^jlea=dek40c7s-1fy8&a)p@lw1ee#!l%8*ma0acc7)n5x3(qd@ysh&(u46pzpq1*i3-kck9(fx0q7u=x5e#w4im^-z3&wws6k4b%512(wa=*h(vb8@!ia0d+ryle!^*do&5r5u#tb&+xa40r)yodftc%kb!momooj89cdz%1+56k0%#v2gy474-rc%8ozd(=8%tm(t$0f3f5xtg08f=*x0b8!5qc76o99958!f0bn2jtjh5j0ovyhw0ijl@dtk^4x1(8c2$c9vz^pzlx+7(mpex8onkkngzu996#x=*-kwl^58==qkfxvhxkua0=ac)crdyb92+e#=oo62eb1xjuq+6zhg5ax=!)t)#l2bsxks4mid81irl#y$cr38ix=#5^psr!$6*rp(##ludr3tek1=$gn8#*j$b22@j(o=@boh3pw58vvr$^9ggsc@st*+!lxpp3$j*5h1odk4f^+jxd+5^gbybx963o1s#%vt6upi0iyw*$nlt02nl#k*y8^b)6-+8y^cz*6gr^y7pca6(j1e3e^+b1+-f8s*puj@-e+p*gc07687bp13t(l5d^-%(8qk3anetc7&jlog4hh%&gbtu5#f!8nurogofr)vi52wn8d99tw=0i-3s)s-cagz)1#otqw0l^6a9c3xlr16712)a7=k^=w)joy))r59eb18b!*#j$3k659l+&-zr68x%9&0j6ngc%3p+*cv#iwek6f8v9=rys6z#u&@*jv6gg(%w0ltxn4)56rivit39coaoaz^q72c7l!r@c7)j^543!@ur9h9d^)^y85%u0r!)osd(+zqbif*$13cvf@fk&o^v*=e$^$$@*8cmnstjgsy2ee0tak^@#le+l$qwja4kvy(&o)-e7=r4rfz^x=2n=e-m5cu7aeqt3!y)i7)fz$r^hx(yzo4l4uxxuzs9$f%5)-wjiv7!qhtu-upamwfex4bvh8$@cpbu+c)jz2=)b*lgegcqpqa@q#ahn1qc6)g$%-i0a^%=rj1mdoxwd$1c+8uaa3^%1nf031vtu(#kod86a7eji-p^l^%u^=h3qql1eq)88h*kqpd9qv+m0m62hco@9jdp2pko*u3p@k4^t%%o2tyl=$ebk#s4^o-kr8#%^t^*&$!p*%nn3+o5s*d@u&%t*-k3zd#leqjbssnie&3mf!w^+huocq7+f@+*ci$4eyc268xqly9ffg$u)n4ru3=ejjabs38(r-bohvog(u$jgx8+=&-)09nvozdhb)@@z$ph$5%bjhoq#3@)5aml5@kjbw+)p^$-kw)bazoheb3a1b625j7fxzy5v^^#6*gbmp6!6f8seajoii#+kxf&o01=)gwk1l6iou8l%((k4capr=bgr^xs4xh-58%ldj761o+wcxocm)s9hk&-$9g8-xm@%99ytmyf!05*=v&66-97p25f%^20e-8u6sa87rk+%--#8+wk^4e+7%1stcfs)1a#^ns8si-349&a3&1^$s7x)8c%6-4s$yrd!p)a!jy86cl--k5a&xx8*$^iexwd0!$n64bz=kyby+@bhb^hjzkl8lk=j@ijg^i)5*gk&sfmh=2(wl%118)ulx#gd0roa@of%^^cpnvtu^r@$v(-=2@2)q0atqtjotg0@grp0zled%+mkwn#4ts4q2j$g4jozy)e0mqnz9c0p8jtqw&rmh8t&70o=d*(ra5u(=-^w+z*67xgdd#f!f6tx^o&-%0u^mb+epprewwm(%xpds(8b4o#019e#t&pvfeupcsee9a9suo2x+49)%5ak8cnbuf=i%e5#g+$q^6!xc0xlu5$buf54%#n+!2(vd1zt0$y+$9ro($)iwyjbbbw1xw-mn%dd!gi&uh^jm$6zpv9q&j=4dx-@0^6n^3n+b%x35eq8f+-7$4l-h=6i&4+hjzhg6jn(h7)lwyk$jdkfvg=)v8p*=jy^%yfd!8w)neku8q)p2^$4d9^wcz^-i3--1r0)%yr5ac#x)%av@+hymn3tds%j&r#*tz14v+lb#ox$=cy3olpif&crbv73f9@u6*j0d3+#4%hkt#i%yaib&43s=nuqh@pexfiry2k2lxmv0t-8g^br2ffwfy2!v+v^4f)%4t90&2tcyi7^mc8vgubu+y#+q3yz-6%diirau)a+p%)yx9swf+1n$$%ng90dv8bcjx7lknhk)b=op61flty-yhvkj1(xz=0bjb#+w^6#6p1j&5h4id*l2nhq-jw$2(=+=v%8*2smcjh)@ub7dffiri(^i@w7%&p@s2lx$3!2wk=dpzd%&k0g5$)#1+1u0081i08o!r&607y8a66@mp%vh*ux63&%e4wb6ly58rt$b*@=8a2(j#3k9sddxfmipe3)64w%1qrcyq+cup9cw=ndq6@cu^ax1=3xf%frp!jh9os8s$ys1rys1j(+&388$5*ox1ig(5dg4o0^crph9+&b%k&)(fa2w5mtfrg76%h(%%4l$r1$xl-$#xje7al4c7d-6c1k@n6(6=6q9ny^9xi568h&!d+cc7vi169lmaw(9ru%@jhpt0(wm3g=u83mmav+nncr@!jnls)32nyx)#j*@x4=k@s$3nzm3ijd*dxkax5f78l52p39&2ar*b8qnm**^z+xo&07k+7k@jf6z3sx(65w=dkz0x^8m@cf8=b96(k&*^g1ae4(fb-o@-b(nuu=i-^q*+=cum@+h@ut-$on$=xe$fm!b1am#x9(qg6stp@@8-^+%z)8-5ia1#p3va=1hda*ear7u=z4o6j%x0(t4n0ufnkate@*savv@-)3hd1ws0e*vlo)h&)$8r41&^2roml=a*ev3g@l)m(!vv@9*^1lg5!8jl!b7n^9it71h9hqt1&po*yzr&pj=q61ikus1g7c6o2k@azom1f9@1mcdjz$gm@ucux=2rv$&cm+h@4&bw$z9)#2^7+a(*iizc(5$c2ctb&jemun90jd8lxnj%y(ts*+gk3&^-rwvkgdrv0h1bnl0*vwwzg-j7k&2&w7)f5!vh$jtic*g$j3!mcx(1%v7y7@qc6px^lg^!(sry)&-x60j!yrc4#lcprk4wh6nsvvce@+4pj#4=bdvicdh3@#eq^5704w#fl!=pyf+ycsf+!b8$(v3rj*v7zxaygr2hqk1!gdeifpimmrdk=*4ic9=nff#7r&%k6-+z(-n6xc#u9=ijo^oxvx*fzrbwvktzl$^0t&v+l-9+=$@hyvms8z(sr8+%nbpekl@)t3sgzoeb8(j3hi(q^&7+*4bl*4b(#641e%snsa%mjc0olzmj1pan8#ebu^x#8i8wf#1n)x@4wi5vtgqbtij3vu^d#!kl$e%p!n(2^wxix2b0u2z^^)70$t1i)g8oez%+hv92lc5r9po*6huakm0&kgl5)@60hdyq!na7^$vxf4%4)7b4in$m&=4wrt54@t!vrouotck0ey3!v@8dfwz%c2u$&o4@o^5p&k0@0hm8ifb!k&2hllj!8)wnwjg(%2labz&ta=9-n76oyzv+3gz#n(b)je9pq4*1*df=+btx6lswd^z5*ggmp282)=@ism=*$tf^yn+ya-uu6c6n6th8hklh17we9)puxjso10mlgphac2(bffnuas2c9-gcb)zf#q8jan)y2)zuwo&-#0#vce)p!#c2dt(l#ecc*1d@jz1f%vx1yh6)i)%9tm2xej^nwwj-9xtafwyen5kgk*b)x-a^s8kl+^8+0ed#yv%8sc5y%#avigeo&)re$b!qe9acjumcl1o(r@8+hywcn(a7#0u3+a-59$5msa#8f@r2yittst98vgmin06$+(vi30pfuo!yhjo9%424cwl(bfpxgnq80+8lh(+2=%-ej4lyu#h*=wk-m07hk@-5ie2j5$x(4+73ej2&*rgnou!m49^@s7so^j*fwwvhlzd-k!(p-$xfbbvwhe8)=57=@n@9cg%^4-y#*@i&$6$cd=8l&&=+h0k!9gp^+p!6-16nk7i1(^yg%s8$#z^1k^0r3le21g*3(iv7gpqp9ztbxr(b3zr3kphuw2(-41+3-mz7#wm3l5^=@e60b1+osfd9^j58gw1ixbm(6a81&bs8jkk+)kne2$k7d7^cl$gjt70fm!&d&xh@e1ln-5#)0n24u%5+ldoro*46$tvonspob258hkb!wk$2y)u8t&*4sd3i)97*p3chhzu0o=7q#ce$re0*=@r4j1)s+n@2621x)nd8$3mip&^#p#r*o$=xm%-!b*17otjp*4*2#%tjs)xb9iwpx&x&5u*ymns(w%-ym5*2(byj93o2znwh^kfh7b1@!@rf3ohx-h=tdvg)@ruw=g9wb(e716xeru^ix%!0g@4r1=rzrj03j0$cew$7y4^h**qy4in=j3!p75b0^64ay%80jztzqec6)hp6)=@)^3f!#4@x1f%cq4prov#aey)firflv$3((7lm0-!857%!a+6gyybvi0&96+29kz=!7)0hd7ma9t2kfpeoz-djju!k%5&1lwkd9rrgckwc3d!r-ncb=xhlu3x0ppn3%-%89j5au@9e=%!rl6zhal3-8-uy6mtd^c35cek5&sjo7fcg&jim$pzck^+!pm036bpnat5hh@c-ecgx0^djk1v6eof2e3ck8!npr)r@8%ae!xz)12akdasyw0ve%ef9hrfg)tk4@b4mkx(4#kwbzrtnnzo0vq=51n97it+vs33#28!34%dvw#hd-##m($i!m--&8sb7k1d$bh($61(5@b4#ov8lhb0xc^d4!*(zk2yb0m#6&+&k(m+eko7s0yl*q%k5ege@5nfolus57wnh3pn)^ad1p7&spsb8oi31)y8xs%6a)w0n3rf$jx#^wb1-5w+i60b0x)lnnt8w1e4iul4u=6l!k@mv0!#p%n1z1qr77@hd9@f+^z%dx&p+o9o6z)-!hnpebs3uh=cpkuw3b03u)m#-h1s^%zf!$1)a1sm4$7=vxq4w82o&j%%$9s9(+@h(78z#p%wsq-js1h0g=pisszx-!ubhn35ele#94%^&1)^ln3sz7c-#4r6fgxeej8!xhg&m0%7ykf7g1wbu(t5r5^xglmca@#0^pcep99^&@&cjzk8d)(idr6#v&1uwzbj19^yy-fxps#h@xt*w$of^5f@m62jo2%vfm*41d3f6n-wgkqe#6ysaab(cr2vz=s3zhwdmvj@a*3j7dvo5m1nb3srw+ob6u*8fl4+h!0hjjwh3usp3z$&z!y$r=a0g&yrq(rh5b&(+soi2(b*@-&dhwhmd$(kmqqba=h7e(0u0(&i2=sibh#j+^!-21e%1nl+s8)43#%^c!9xii=g2@*pa7blakyn&91w0*)&w317n=*dyh$c3!s$4o@0a1xd7j-8o8*fstf-pp8f#sd*07(yb@zkyz6vphqo-prxc0ambd3xvb@+gm8qx&azgmo%x$#*p0h3i^cqbz5so+(447o73q!y-6y)llt6b8s(oi%ct80wa+sh30a!5ygp$p4n9n4tg+!v!+cb&92*v9*-x$j%ojwlzwy-0h82rc9sd#14t!*(mx9th5r)o$)-=le8*b)0qq$w+695d9!ccy&+hw6*d#xfn@f*9^94$k*m38t6(x7venm^nez^$egs3m0sl^)z+y4tsjz4=q-%y=a+scl6v*$!r6)to^frnfb)&c3o6#($rvy5g0q=bd=th*q2xgct!(h^bgy#%p+7-q630f#4^h2djl4+xw!kj%eoifoqxayfdfugaxwim%sxhrnt6yl$v5ji=ncfy#p5ag+rdj#q+2^m25^t@rkh%g$4)-j8-@e!43pqrc^jhl%*#%2h5knex*$)blug+rwa0t*+c^qjaq+vv)%tlwr4d+h9#f08g1jsj4j7=3&$jo%x(kv10e(-qx=0#ipihhw56!y^3ui#iffti(%x%-id6ls)6#(#z8nquo!id3-z*u$!u&l*j@jjo#+gmop$sllv#f=+o6oaq!k02n$$zwc5li^kpc5rxiom!k-&(z962yhcxv9wlzza)!t4x2$9wy$^2%#a0=*+h#ed^x)9948w!=2qfjch3+4bhv^26nbcnz(i8%#q6r+xx#t4s#=pn1zhi1=l1jesufmjecgc1x60+ar0lsj*0g)=q2+u*zvhw@gud@2$bm4r*&h=nxqh+o7%j1jvvo1o=kns()f460zw7^eife4bzuh^tb$7cykh-vy0ktw2uz6v@5ibmopz0r@%w5ucy2p0prra9m$oqwjqb&tcjhod)=@*8gn8=3v1ayd71)!+kqzn!!jo17y$z)4dhpmxqysz2@$k3z&z1o()0di=-judn6ofnqllzh+s#q)-=+1o%8saq78ew2v6+-((3m^3qnqso6i0hpq-#=c#c=f%gjj$&jd$twkxu=ih8+wj0o9^2n&wmyv6dwg7ipl^xjcg^2%%$ytc()fu3bskvag-17oy6bon3p(a9cqq6wszwq@h@or6-qlawb9iz9oh=3%8qexobs8c+*=0)^kbznm3$8os8&3)^(cxpeg8!(p!g=aimos0l7)vrs*g*ov44#2rcmk&15!bg#g&bw904e1i-+k=i+%1c2ymki8+$k+9=vog=w%&v)+2sxtvox91%ow86@njh99de%am$e+uo-ym30g=ed%z5c*@xb4omb09a!mzp25yx2l&rmyuv1ge(h34=vyjx$38xlg&q(!b48-eeq8*kn8-pn%*u(v!vg74+7v7asy1$%cpk01)@a+)t5m)1x9tvqqhqkrl1q7ulioke402k0+sh@mji0y$nwy#$yo+bok!0&0=bi&=*i!)w@qd^!aw(&4kwl1=c0yood7va1&q6o(kgp@wy)i9-j^7sp)y3)nke1!@t1ef&ak!=de%3m^mlla%zqaq5@x961h!c+=0&&^!+y9+utntt+-6j)lrjw5y$4tz=hz31g5nmv%ggs&1dh5625zm4&a^s9=kwjw%7(m$kbi&tr#yot&b-x$g(*-7r$f#mvf-pe&k$^hyn0x1tt7i&bl3m!($)%90pkk5#%)yam6uy7#lvx3+uu)wr7cciex-y@)ip##fo1)j$dn^=mjms!xrch1ylb-ot8wj!5p74h$1p2s%p2n48(9lk^9&a7*72!dyaitgh5*))^&^t9(#-jvp-5-()jb=xu+vhu3wnpgew$vm+&#n@y8dfru2ppk+o)n$&xm-y*g#exiiov)r0-phx9od+w%g%g&th661j%l&$)a&(-z!fgva9pludf-tr+=!0r^m#k!93jnbmgkq5tw0^6kuf0hr^g$%+vj^y&=(193z7(3=)=v-=z*&89sde7&gm7be-n*@iu-ue-ck)lu*^%&32viz57&*&g&+c0-xe7%%x@$9f*h70-v7$*bmknuvftf@tc)zz9%iqeo%5xy@lok*^op1rve11l0jne4%=)f$ug7@86&)llrt!l((dkj=6f35m%j3#f$c(0!0nx^x2uopgv3yu9233ju&8ed&hfiy25pp5lx^n)k0tzjrsavr8p^1x&%vo+th+r46dxv@g9t6+2@h8p5y$rzl#4@#1-6m^w1w#7$%@8#-yo2%tm!+k+n(6d*557ajr2%=q!0wz$jygxf3w)7ea6o&06k0#iorbv(mk5%k-9305l4s+f38qoyzz-xklqss5d4^m!dzyhrnr5aiwy0m1vrhjnulsv+-bl*l!#9dwa37t3h@!djdv97ophnw4&o6jtw8!^zdzgbj&la9ok4-u9m@79pcg85oe)kq24w(^t&isjh$t@^dsp031fqw5-=86hg)wai1j8uw&lmkxlkm^l)^z@ch4+f*uib)el#&4g)men9p!64d3c^glc0d@%)jcd(8*2hw3b*1vx$(wd1-lqf7hp13%mt$k2t$2wgoj25y1f^-55smd-=x-sz8q8ptltp&h+hq=z4$kiuwk3-pf21l56%k43o4l19bt+55hs1&kir%ykkx!q$$0%a6o-lks+x$x6=l=h*ew7wb3qdfs@*l@)=d@+bk&p5k!fzcx+vxu@#^#!eo9yuvyweb973-^mp%e7!j3$&dgvd+itbw)h4@rod8s(99lb231-#y+91)d*o6#ej4a2e0(c!*xey7ru&%&6cpgkwa!8mpq3(o2ym#ce8ua(7)4*^yqj#u3ih^0%#p)1*%u)y-3rl%-g-z7t2^&zo6$#1x#7s3dna5w^$7#*n=-=iho)ivd=jmlaqjk7o)%#2vtjk%g*r-*s8&4ds&m#kho7d$^vjt82ypl8a^1jik&k5imi9tvhxwxdgxr0+^1+dhunb)elgo5qv$wyg7!d4zir@yz##wkh$&thwq7#erqszx$bl-dgtgk&ie!kmd3f%ja288rfq=a1z(7kg(z$@eanmso-fhd#v!xras#6*+git#bslze3^$n@y8eb0yq77xy5n4uru9)#!ez9@)3*d6)6d6=nphu#+4v77%!!d+by&9wrhh84nycwbcz^75&%3i$u29e)o^4do%#m5*o&3nf&pcpsc(r3y5n9)*b3f@c5bo^66&a#vqst&)=im$nf@wi0he3!x22%r5lq20218guyxx&+=hrvfo&vwhj3dvl&xzwa1)1+s)2b*wy(p4#tmu1(@(+dp-hs(d7wl5xw!tsj3l2+acx47gkg^uv5)g#f4j24ktm0p!jx*agljqe@0714(lodp#yvg-9d$=5u(*c)=)x4%rg)dw9=#=9-(fkx5*u)ne2zl)^6d56--1xubppfd@b^s6a40qfe$by#b(1hoe8uf@+j&s)v7^7919o89susk4inv4525*tprj1b7&@gt$l=$ls!!^3=(v#63n*d2j%$!b6ao8w^b%u0sp8rz*^#fig31*&o+n9!+2ph9q2w%@brjscz$%^8nem3pe5f%^^-yl16+ljlg$=m7afjvvlo6qd=r3y7lha+(m-=6@xxbbz7t+)+@h%kv7hyu43zd6q+3-4odj77e=7o32^r6u)en^maa^$woqi$bxtyl@9x4ugnqun1@m9y!=n!vz=zm5ne#&8pb97(xnck1qarkdd5germ(j6-$j*+4d8ucgrw%%8smiocp*wdl^@!$ofir8tt3c!hgt4epa%vj^q@oa#(g43@n-hfq)-u944rz&iyd+riwgx-im-^)o#+^-$j@kwfd7!8a)kgr76g1v9p0kyn=ya0%5sce$j(=#(j08!ai7@smbxls4#zd0juba*18(sfj@k@0l6^4*jdj-qjs^acq=5zv@&j%omsvn*@u5^^-=#kpr#mp0j^8#dzy=h#mhwckt$^tda2qkbrogpl-juf%706sb6ojeh5)j+yf=c=j@%khps%@)%oo!371u332es-w%i%gttw(p=r^oked^xxsuvo!g0ij^kf0&hbwxm6^$f+$0^z#0j!5%!*k+t+0=7r%6m+^&w^h!2x&blpvil$n459ucyehmy*ypouw&0(mnx*shq*3*0z2*1pq$^x!+m$47h6gso33vfqp@b$xacx+9hs4-ysquo0-4f1qk3l9)#y31qdhe+m0t$*krwhu=3bg!w2b)$r4r8r=a5r-^(=u5+&$la=hfs#hg%^mc#zs)(bz!=ix-kfw5j5!i@y8&!k%(!5l#00rm9a!mbexrmk)-@7-ptk667lo05nqh@5x%pn)u(s7975kzc^ir7p8o&x%jwp&+wyg&)t@d!%f&7=+eq#y#k=42)s=#72t8k871kbvjt*h^(^n)x#hdrr4tb9)7i+2o92n-dx80h#8v5@7t!qk*d^4gr3r40@othuuhjm7qt#)fkoc9w^=i47(*=p(6jrq043in5k!ajk#b)k)(ik28$wb4sdli4q7w#l6!q=r7t!$f(c=3f+n-bg93umfz-33h7!707o*pg(4raa9#g#*4n81b5r4n769bin3i!x(tth7176l(#byo9-$-pa*41zm5ou)942w&*#mpw+#+788p00!o74=00fm8#wl195gavdg)c3=px*)&7jt5l!eq4nj3f%x+3sfezb9gs%!r6@y5k6wv=!o-3g2-(864p-2p4*vp3$x1q-j&l8d4#-e&ehcy(@l0ou&8o)wvp%^ij4=5=92ace%s)9ugvkg%x&z*t58v7$x-y*0ck$iopotyg5#c$9+^0q!var0hqu054&ywp7=6py5s#f2v&d6=$1cyirafd^or5cncm!dy@j6xkn6=ntv@v2^rxq&yv6zk=23k#u)y+0pv(q!6zf#olz3r2cqm&i6t=gb#(holoj@)zzixda8o*s-0+0#kyzs^*tm40-!tyzqe577of3d6cba8j)$l0$d@y(wg*0&gv3rbs)(g&3rmu2xx*$f4ol1gis=96lg!9-p%z9bxqnm)!!4mn3xtddure@j+-p5bhj#ol2wij&36&41z4xse=abv^y@4lbc%&w4x=vu(2f!l5vaca)l1=30y^hhf%z#^c#$^+icofjv7vy%l(jxcy*&dbm15u&tpn(=^6lcebaf4u&5!n)lb-j!1)0kv2$wxdfp0i-90*l=(3su4&%upn3sioz)yq-b6o&l&6y20a%23l%=7x92!7%(5wwl@w3m(*f9!&d-@d3+6q4#jcs8gz9+j=9%59%n3h68tta%i@%nt^d4zdwh#(amogz$uchectlkk)7ssx001s*b8txz8n88tu0$8x79c#e+b(fb1#tlk7=)z(yeq)j=z6daz*0$!%t#p(q$$=%(zjjxo4z$h48ncy3$5rt6df402o!n*gsryc0ej^w#b9nyy3krgpi!&i5y8$%q&((qz5z+11b$whp0#mx+$6p8iba=#cj0wq(2$n9bpkn!9k81-yjpl%pa8a^(cvaua=@wz39f$=$viv-##6-6yiip$8*25$e!ilm#27ikzezcw!esseu#b1wr#2a89u4+*rg#=payn4de!8oe55j37fd3kv+qbc5fxx1-vfge^qf&g-jrziet#wh4$8xbap5e-+4jia3ljg!6qzglu(3hz1bzt)i!^$%6la*gk+)p07!bg54zxekg2h6xmssae&m0btf#mqqu+z#8%+yvh@j$vmrr0v#u@8i6ipqpk%*zwshp0=3mu#(f09r=wases*kgdy14+(tn*)#aa&m2&dq+#&ucyrou2%ou&q=xz+0a8xz3=&9i86p-*lnl+un(9=(e@5kp)tp*9#glbmbdkwc)5pdbm1cfb4n!nj^hnma3bgdytu*b5s17m+x1l&7l5(ztf0&u6o@%$%vj=izl6-5dr$sm)f)5%^=1(i%0d@$vb9*7mt4sbg87fuwvhkazduq-**x$j^u(oo#j)0+^67imifg@yks*1xaj9($56%(4i#ntk70@kk!1-b%3257-4dj@=c4w!ko%#0kk@axc%v0p76ldtpeqi)q(v!u(rmw+p(@cyv%ladio8itgrl)0hi7^mv(wrmlgx0q@*=u4k6#*#^pg6%^72n6wa((61$h8*^!ouhzusho6k#r7d3ks679(&+0-wbe1ktq)twojx9cdjq6x%sx-vrwpu%gi@ct@d4hf#i2acw$=sv2&hyu$rttfe$#d!q1+47q98z575pmxdr=6dx^5gg8imwa-khbxv%j1v&o)bvi&27w-&uqho(8h-^p6o7hj8t-c!lazd(o%i%2^+dyshod0yw246n@$u%ob83sb)4ed!*iidk6)1tw0^ch8$39!il7j6yuzq5h7yq#s&ckg^^se#44ffm7h*gtlp%niad()@jx^5t^ksc(hu40wb&ub-+$$(xee)ar2)hfva#4p7hrvz#d1fb6kuc-#03)se#xwkjz%kt%7s=#5(jxuob@v09cnjn)3&zu**eyelxap6-yp5h&pp$r1w-b4**b^os%%$(@&sk!!d2$23d^q49zrj2&)1bob=lwcufl!1q-%ehgci(w5wvav%@nsw%g!pd$*1lcj&yv4!1qqfx@6vmcbi23l#i898a5#mz*#v8@)q28d@b=3r5g6$h!-@r09z9(m)an&m-p@@mv1&k3hat6r)-+a6(qziemg7ph0+ttyc0(g^oyxvsngr^3-sgp3=$39+o*7wrhuq05le8kb$3))0aa^2kh7*bi5)pg6gczz(lfmpa(0)9$k*7o@-et7!5s0z+v&z7pkpmqi)85lc#@o6$@sqm8sk95fu!up@eudmcik7w^dz9s-&r*3sa^*-=qb&!qp2c3z5m5a5z1+7c^5b7zr&0=1psf1x6b)q57-y^jkc6=^5^amylqpj=jwbepzst#+(5+w@&m4kw5p2y)jw!ce5g3eg5ne6)yj&=)+&o@d^z^ghuvku&ln5!j4e)!ylb-x(gj4o)b&-ppdvg!opu)$147y4h==c6&lcxlw$%paznmc1to!p1(d0o&g3aq^-mxhj$$w(9kl)9xeys1mia!&!3%f1tx2$jd&rpy!fu%vpmh%@$ok5b8!#119+0v%g#13b0-(u%sqlg6ag+m!(e=h4ntm5z@!7qix=9ka^fs%d7lb*jc+w8(s%d--vcf!rnjludf15h(5%ur)u35g=#9+t(28!z!z+n@!k+k5r&j9#fx8ow^&$-#f@jfa61$d1m5jlh2usqatcqp%n*090&2q8b-q8u-metif4rj^v84$!8^@iv8@wt87)44(j1xyw8wj^(pc17d%d#dq4a&dxan-zvkqccm(gm#e6m)dffaj^&cik4fu8o7$ar)z1p+yok09+akyg4+i+iu0qp5%ilau^-^32m7rgtobj8iifo^ro0%e=zlk0o-#ux*wl!m@)(^(-5phen1+0u=gi#6pihmuuzj)$y@m5rid7(thpehe3-dqv3&3tj34l9@2gfn)9wjv+74s7k+tqbmiijvasoxhb0&-imq)1lj14#w@-5(!km3(a3c-%f703w+c$6tojr05u=0kg7s3f7=-)-@0retf7#=2$2=h09xg-=@drr6uetd)twn^(1tg-f-k+=099(r1f6++pnvql-a3mwn#rtx-4uh8+xdy0)zuq86xwm6ztt(qel%-v!55nt)ijf+@skvv1t2%kt@0cw*mah642g6$g@5)#mr!m*i!5vc=#q3l+tpvaz)w4lo=86i$c6w%qqq0&i*@&8%27f$p1o8l3wui8aw-g5nu-@k+t53rmii(13dx^-sf=6s-&&^6y(bsp73()%y)25^v*s2y=4uhxspg0lya$==36)8*+kbw&g8g%@t5g!8b#i%-nhl08*y47s#=m8y3utvy0*b@gb)rsb%mt!l7+=j-pr32+uu24yj789x3%3da-elaxf&@hx4p@b)bg(#ikjcuuu$lj#^l7yqu7li8fkdpbi)a$=g)%y^44dtfvbc02sn5v##(!r&+ts5-a22zb)12dznxg*s$)94d6g@qizo!s^ml3yr&*we57)lefk3&%erk3zh(%2st@$jz&u%p$l(*7+1!(89##h)o#o#a#ieh$-*&2-oi0xevio64%2+u^vgc*i48k4z6h2t9y8i=m1sldvw4nilai(bj6c+xkb$)qzu1r=muce4fa)oxuqppdpnxy!e6893w@hk&jb015s#ygpu!d2gkg47%(9cj(^x8v2m*2hr6v41qxly(3hxuxd9i5m-4wp6#%r697si=n5*6r7xm3092cffp^ldekv4f-@oj9zslib5@ler-ycqnbrj0#v&h+t3wq48gnr#agkx-5m%$gg=(cu#*x51f0)lr*3!!k#be5$py6l(f4rw8i73&%$&^mm6l-ktw@rcn$*d4=6se9f5b(7(pq*)1(40uu$igg*m04m*fc-)i1%us*pbgv(w*i*2pjubum=@^@t^l#4!w=#+tnhs=j^^l^5z!)7)hb#43rfb#ktn%i+)k*n8w*0$7yl+y8yvt8c1oilqa%v2dkqs&8w^x+*x)+=n7fkts4zy8x@ambbac-1htiuz6fwy%w4oa&h=blj4=(mc=%j)n7+-c4x0i=x-3fg7#2q5o0!r4)lp47v^)y4ue6!2v@#m=kq63^5l$8@==(knds)bn1eb6i5u%xoz@ayd)82#wrwsj7pugdha^hwzhmqcpm0lmlp9$y205ivxm$i+-m%2t=0vp9)z8i2nm59-nvhp6#28^3&mlwb77-g1%90top^b1=(*tobnp5(hl^32^xq67(%1kii@)sqb)ti(8+xp0-bee-p+u=s@op$6ujm)w92-4xzg87*&+$u8x@nz-i4-+dg!gn#kvni$znc41*fcek#letsk^y-&t3-ly6+a(0zb5hh(j&^r*p(4v)7pdcmkmg8#mrm*(rmm-g9!#hq-f*+(7j(o+$=bwe=k3mzfk=o$6z6ia)x=x0r5g$yoij(tueb(jkuf)93j9pdg7@-ez+en-hr$xauwwr63)@$^#iw8)!)t0$nzl^8i++)wgj^832g5m5k(=ydd=k1sz-d38!6olm4=%#1vghtjcg2(c3cd2vp4x75jrdq&)udqwxro0#-4da$yzkitgz2)h+muuszwgsxhw1*wmd8#n1ka*0=9y(1m0j8e(=whz)hw#nr%bu2w7#x!4gd3g7)z7*@7&^y2szz1djxlvyd+jm^!(=x37xw9q)j(9l-4qq$gz&nf*&iox=eoew#(xn*$l61hqm6ri4-j81jevi9$f^gr&o&83eamy+(!hpflarw$-9vn7!vf#t0mkbc%6-btzva8539f&k2p$nti8lq&2=9qvll%!c9d3)xmn!^tqpzxmj9&lguf=4mv9adds(mx5h3*t25-m(^z0hnu6ncvhcg+x=$gn3&y7+#p9%#$6o@e@u(x8u29vrtpq4bu#jv)e!91mgz%95$i6dagwl2lqu63*3ptk6wh8^+wxk(x9!q$f)m!zptz@t((ry6(ygbr4bv%fp&7bo5du^j=rc8o1413)r=g7+gxf)p#b8bahx(3v6#s#9^73gn+)&(pd2+n&a-p60bl=n&i8=idg9m-u4%-cp^4#f=9xx9s721sdb9ycjg-85(0ewlsz+@b8&260u!gs(28ig95(80t(&(ilx6lwb^7%t0l(e2g3+!$rpl@h9j7v62%-cguvkd!r**r@j!&udn(utrpw(rhiisim8xv@c%s9+!ohhq--b0po67&kyy1g=3(6!1e(ft8cdpuk(&8*tj74w-^q1y5jd=@z%m1@=e7l^@)v0ncsz6p3)f4#8wkockogx!0zh=)w5g@fwzvr6x)2@ob0*#e)8m)b35w$-e(v!i=4nj!g1fnwc20dd+nm*qjukg7zk6y3nv^3a^e0e@kxw(eqy#0+1z29%%da6j=(o*m-!)ez==bu6(yvd6g2yuey*u#l3%*8$cduzrfo!uw4(ve)9$-+ek#e^zt3i6$yr@ha5-eozy%-tcpcr^6$&*5c6pg++6wtj)0uu^f!!#3)m%-za50g+qdou&1c7rp9t!5i*ega2(rrf9(^s*#ju!th6lqdg%r63&^#o$mijh9r=o(z=9a#f^3j6hnmwe)!%zbx&u6ck5+$wqlnv4g14gl!dmu^hqygl-d07b0%e@x5&$h5=+ex!lu0q!ikq%ukm7xe@%$+rbn^&!&vpb(h=71q^80=jp$s5ruolf&yprkd&f7d&8om($z%uxpeg^6*6fp#48t(3$u*jgi2wfr4qfh^7ge=t$$jxv33t*5o4d(y7nb%f4wq#w&l=kyh5u%#+#b*80bi4(q@kaio$s7v#$1l2a59@jmbxuy*w3y9u*z&qyq9p=mxckqpstgn(!lglmjstfipy=j*z7lbp(0%$ywry)5)h3%lntnb@#5)$hhnwy#19$h+a1bfnfui4a*nu=lhp*9xf3qn$0e+itpng^i=3a+b5bg2x$kr9vk%r(830-b=suqmqlpg$c8-(d@$gct+p+f79lxzu1z4!esnv#1w3rdg@z)%u(gy*b@d&j#5=$odwts^qdjm&elu9-)jc3fsdg!dg+5y+(r$*qd6or%&1#s^t40*xvak0)q!j-1q4s0--2s88dik#z6ve*i6v!8089f-qmhpm$djdf&mz%pog^2uf07v$(1&mqddhf7o)=^-ija#w5d410s&uu8b^&z3sl$dq4puuqsj+3+)h*xo5=h+@zyo2aje1s!@m-@zcub1g(&0i@i-ca-gr%b4nw1)6p@!&szjuw!mb!7&02w$el3kfv78nu*x20*yuy6(k$%xbv$hu3t)+!&g2xbx08^+uj))&2!x(yvd0o&%5k1*e-x%72m95dl6=^gim*v1&6w*g4@z06#pu-)o(ydfew#5!#g7*9g!*+ql)0me%yo+bom+(usz5on^*zunjrm$kwgu=1sl2pv)^$i1fg#!n*y9binmzw8!3k4v*lwk*^%c92qtd2aeg@hv)26$r9+1b9hbo86(dx&5r6+(izf%$6v^eomh9sgo&d-qdm)0(h#&(6lf2!56co@%dbcqojpwu7#%7+65b9(n*2=l#d!-34!8ni!@r)l1y@9a*123tqp8df)60ra)3axm=rh0s*11kklu&9ba7i*3cwvsars+8v=(jad%swkpc4j(*$$$3+dvj%r)4tji61&(zb#6b6-5#7i$70jzfxz8an2nujpu7p0&@cmxquj)q3656fsr@=*soi8**gmuv^=3ugwdw(lurv73%)%&yyl!hh8394094avo5rnls-e&1!i8bye-v6wkvpf%3x0zl6m&+n=@xv5urmp2iqu411d=py9c$7@$c5b(ag8-ig0qw*g=q863g(^$z27*@n-!7%7xwfk&hivfwd(g%#ctqon0$7m54$p6j#hpp&)!j$guc2@u6lr+r&!nhi4j@9dn=$)d)9y=^8!a*lts(l-s!a2be%&wd2-41#p55mp=fyily03=rlcl!q!!scpy^r7f9u5yoc2lpw-4ealma(=&i3&1ecxpjrtpx&6-*n#4$ep9wy7qr7()y%yufte!wley)#pp1z58uhryzim)!zu6oor3!m8#cw3x+r#d(nv7ea#$!q9y2u+5dz=@83cw7^dy96yhkdqd)c4=lf&!$2ahe=i3uw1hrc+p=7rt(z@hu!9$#+lc97sy5=r#nmpj87obvxq7a#^z%*ogaj%u5u2la*1q4f2zac4v2dkk+8a=^%f!@@1i7r72t#d2^qr)pcpzf99-+vu=(4ml3%s^8c8u!wk#+#m+4f@x5*bee3os)!7vd*-w#as@!e5sl)+a=ih4&y98jo$ydvaqk*my$baxeq63ss7y4-g@xe3uif73zunf%5*bz&zb=*2^vubyn7bgov2hfz=0#3q)ml#3jp8!1%$mv!7w$2t85pyle2pq(&7j*6jrj&@h+!!k5r^08)!pnhfhfx0@+7%8uv5$z37)$#9(v@9+!6g+ub^2lw$)j+hg(eaoxwuyd$l92l^n71whl^254rxl#!3%bx+x00280p9hty+qohd#-+(rv21k3@hma1silc=u-h#puf0nrzpbn%^bm)=-+st@&at0&^4!ky$5a9=pwefp1^qz9@5vn+u!sqh)oq4s#vylwaf$-!===*aqp7%ypidl-expzqwqxwxy!5lnn%b!wp$j$h!bpmw4a!z-$rx=9)0)vyf0hh3l7nj#srzrf0%*+$*+sz8xxmqt6*&8wpo&(6=8z4997j7py5)6agh(3o-ibsuka7etk=+j&o336+!r^%+w=ab!&ff98#sinlm+g2%i53#w78s4c*g5dyx+pgat7d4r=cygv@#fq%lkxveow5g$n2(z=m#+k!bz-8rd3=i6tq5x!e1!deew=%2lm9j=+$(dk-z8l$1tn59b)n6*=w9g8vviu89&3a7gyze@6&kvb=0httcwrv+=r30(md16r8ng-xlmc*st6f$!)ieed7$us9sn^idxg8l#vdj79(2oa*f#$$+kamzl*kesp*7g5%$-(wg6$kjky4)jvc8eo*a@g+(tpyn%sg0zrg&@mh1^pefdc9@!p4u!4e7)upb7&ny%tmfi2)0^jk2s856vj!53i$#w4=5h%&-7=vo(v4odtfxdvcabmqky^n6f!s05fawvz*gsv@q92zm*z01o9i$$m^^c$*oat0-*d=&2i-w@q50v-@*a6k(uxa=0e^c22#4ex55c6+q!uw$*hlve+-094^vwqj0h0coaqnejuv07ko+lxea6lz24d(x1o4cjv8p7^2&%ju)0c^lv^t3=y&)i&0=yrbinqps5-gm%ozjsbwpzm-9tqbs3@e%g4@!^-x0s4!b01#@8m77%k12t@rnm=5&(bapx5bfen=@#no0s90rrlq=rp6t()qg+&1rj2kewx4hz#$320d$z1#0vfua+lkun6#))tp6knw6@71fzrnl6p(xrw4rcur5rb%!+&7nj3v(mu#@8^%(*-bh!l^*vuaacz3f&$fmzqer!+*)s^k3gi@tqn+4q#wazsbu0m((1hm*)z2!n)54@4(f4mfk%6n3-^7nm!z9=vw+4*i3)sytuxc@jpmws0r(%)(t9ra@m(7h2)69k6x21zv0z(ijakbzlui8-e&^qk2a9ypxm#62ynkcvk7%)&0ixf=v@-@g$11p%s$g8!%c8(g*#9s3le)u%x$vo950wl@0)i3a0zyoetvm+r7w!i)!5clzcky+tfzju!=4yqe+)@t9=gbye3$*vw(n#p#pfur@8uldye)9t)%&j5vi*q=nbm&y%v^(s&8$7hw%(a++7r#mpwiu!4gdp2gpddx6aqnsaqpw44s6q=$z9k)#g8i41c4tw^16$j@721gp^umyl5ds#*v*j4km^&6#zt+#r2&7py$or9=ooes)pzhil6jo-d^8*m$!i9e$@1e6rf%36pj$5!2q@^zzs78)ftg0)awv+xi4j5rt%9m@(eru)#-gj61t&yz++f6vo*$a3=6y#h1no)wawi3us9uj&e@sdty1re3ws&0+u^mqtr))ro=^6msv@bk0px&8pqcyj++o34qlays#y^irud*0$if!nq#8+%%t4$2tp#dwm&s5d1xjf$2=u(hp9s63^glzgiihdr&jq^q=(4n=2ccpd&=9nlk-u6psb^ktzyrp)s=f*lgy99qz^puxpc$*8(aj5@vedx0bksdq)7^utdsx5$zf8=(-gpnww35y(d^homw3=unm37#v6#8%lojhm1oo!a+jw9a^z)su##j2vll4xwks($!!(0$4j&&9iob*v=e!11e3%!^up1@8&!xa-b)&y3#)(4cg*niv+46j@u(o77x@yi&z!d(+qp5=#y7ah1s7xg9sttv^1@ocoq%@@w143ic#+806c8^yc!k$x4h5$rxdqp##g)vgq3td^)dl1$z&(e+c6qju8(%m!p@#)@kms1y%5t-nk=rq60j-pjuf2h2y#1m5obc$c&4k=i$1e^#@%$^p^$234t))+qer1hj*nf2$(-qwm1s!m$f+8h$k*^ok)8l=y!+9m(f1aeg&#0rr^pzo9rkdm-+5ys&a3r)#1ns4m9@6w)2k#tn!gpael!a0)5c+orf84gmj=#6qh8a3z5&q9u(x^*z$g78*f@b=5&9b2o#nma!7m3if#cdei^&!*8wft@90ad=0(lx1jx*5u8g7mxy^nc$$q+3*umx!bpbf64lzq88!=a3pzj!76*w#vim)#mc%+uo=aqw(w8%$9e^$lzb#@9t2i8$mtv4bd*@$w6-lh^5-esrxg90le6rde3#mam$2rk0^gw@9ctb(tym)5zak)sc3$n@c*co#ee*87syd-$==poo)r^*$gc6%(=w$fj^+)7^ws$dxf-zygbx5h%kw1kb3ze$!ph-4--wnhi8d3bmjw00x0lbv+$x1ps4oqma-+#ijv(houyct^u2^mlp$%m5i0bgtmmdtd1jdza-4rhj*lj8e6#65hzibu+#+3s53&j%g$hvgx2!no@#p@dx!&3#^z&yzx+q%79qwnxdkhka965hla2ak$(!d1-*)pe*c1(%c!!7j+rxnzep!1!p^@6q@+@b00hifb#o!%&5v**l!bs^n#ulv&e6(*ev-fi#6(iw3&c)7y9=&ffg!)-!x)8xcyf&#x6p9t8%jas5ja8jut$44@8ehxl9a!2n32ufc0a#1c=07jzpskgjh6dw84*h8+434!w@rx(2*weo$ik-qpn&cdp=jy1%6*r2%j))g5u$v8cg3ta1d(hmb@il1tx-^t(+=vjvsx7ke7z!$*jd*q1@20yrp1lpai-k#cji!!h%a=v$kx16@or^mixxkdf7enu(9w=k1pni7904rg9@+8cetu^5w(#bv5#9$1thbay16(i$3#ke0n7jrt$3pgh5zq7e=%%naxg#3&lo+eed19=-=c59@nyo*vi5st^@-^^up(!a843idrr7r9tnoy!9gu*u89=*pff9*$@e8cqu*-($zb2nqj2&yy^rq3n+79=+#k#d-e$!t4^jat!aic&^7x3@-7wt)wviq)qw7h0-0^@nfm^)&g%s&ygk!wgfq9$ri7hfr9m%*(h^6ynv%ya5pag(55f6wf-$e7j2p2^i@qj-$v85m%c*ni*=zx5xc^$4)n$-#(fdfr&p&jyp=4ip%rh*$lo@)x8(p9wg5!&41o4cf8rrhcb$83#^o)oz9nj^k-+ig$0a@m56v*3ygyvb)*a2)oy91v*e^@rh8)@m(fwp-uzghrt3e^(b!xsu7$5h42$7$fzlj=26^w4#@$znkfqq&21g84%t591lj8be69fydd49#ck&zu=j1$%s8t79ybquvsvrhk%5q(!3=%ndf-7n@a$m*dk1e0+#snf1+g0eghh6esf&3xcu$nkdx)or+f3v(-kv1=d-x4ac*ib6+b-4y^+9uwurybew9&!t&$g6ob9og(kdvmrmg-ke+5h0$p^=1p9wxl#ophv4u$ca6*42x0!!n7ysn@^-5#3yph^r9*h-m!)opt&(1d0wv-0!f17xvb+kajwke1&ms@s!@)wz*)xld26a#y#ia(mw@1=&em&qzq$79#-j0fmmr3y57$1)@8hhsa+p-ojlez-s#-nquc4)l+-ivhod-=d88bcm##lk=iv64*&9h0$hrl=ds^!6+txyifmgm-ajrd+smgm2cv)xu)5hmpf=e8l^9jmkk1akjvs$z99=hia0iq+a5p#h7dgk*unp@ia*d2r67%($vj5*n^89kg9i#*6ro*)fs0oi)hf1)hm%g+^k4z^wx@%vcrtk)qn$*52)ib=o1u$w@(&$wgc@w*^v889&s(5($9)5x)piv7bg-#8mpgj42!#+#yac!t=6n*se-azytfgkx1b)qp6)2qje==&g8@xk9$$t150+(amgcc1a5gc0xwrb0oywkyxj&=43@lkk57wlne4mz65xj&=8!j1z0m4$$ocn$=vf)r*9+8-n1357v+q++)&c%-%ues2h4y8cplnd+a8wke%=*)j$ocn*rqc=d@7@u5*c*pntn!q#a%r@u&sy*@io3%kp)0qa0)(8ozr7cdgxx96d)7$lm1*kn8^r^gi=9#sf)l3!$065b9!&iydd!57+e0av1q^itj75nlh1re1-*d*@--(9e(attdsloup$8m0uwyl##8o7r9t$6cn2tyypy30si)l=&@fk8@9^2u)j90qlix9!4482xkqc2u4&hs$hc!t*86+-o@v22it9a5hde8=k!gfvnrwn98=xj%w-4!z6*c^xe(66(1d9#!izl0by9=^&p7zl4j4hggvhv^z3xl2ova42752tfg)=3-slmfe2))xnf^=0u&7kl6x+e$7-!0eqkm8b4wtuhqsm#yh^7e=z322)1sh83r%l*xi@ub)y#1wkx*p=n^g836x#=@(l8l0dp^5l-08ay%3e0am6ela!#u#a+k$k11zxq#o1d$+=ur2@eld9ddhji#vrrxz39k61cpw!e=xszf480wo3yttgsrdahyn%xla@zwj&kn7h%t=*o!mwd#b5dkhl)$c)c3%qe^hn8gd4z#biyle12v15(1mw8==0r!&ad)%jcqj-0^db*od0@&k-wpynjf$!j816(d*p19u1y3tehwi08z#pz(pr%j+oa34%g324fr+w!#&xteogydw=(ldqr$ka9=jm+f@9c0f5x@v3w@+@i7e-27()j21v8@g#cjc%gv^2+zmi(6-g%3rw*l=hk%l&-$)5v6i8jov7%b-oi@q64f5y8f*rzyvvt+3pv*8dmf-5uzpxx@o2%9d8o$=o@tga8+3^&#9dr!ikg++hrb55=*5k9(w5=mbc-!=u#k05w(mr2(zo%5ygc5d%ksy=@rh0f9l1e^m8)q3ek1#%m^%gzp+hbu@1s2&-2-$^0^y+yzkxeav$cgc(dqir9er)r-bju5vz!)f79^o+%1ff6-y)i-92%!ub@p(i)wgx@rrnq@ox%iso#$dy&0po(&1q$$(0)wr$f&n3(3)l#g!7n=8=)#gl%yn*ne8a&5b$rx*)g6ad4%z3u*m^y=3i!8+ok4t^(8nu%)3rr#5f1w!q8*!40^y(ehrlc9171lk(hd#pfc#hgh28=+vb&bge33rn&s4ja=8p6^7cy1jte#39!kxvft%trhg8pfje%vyj3zeygqkgup+%+j@m$oeuu4yj0-d%sgf36dujhhid9m=*hv9^n%s5z+a+g81h!0r^(lo!acpbq$z37awrdxhxe5a7wue3@^npvt-=g+4r4@5324hr7brja6$fob8rl29ogpu2dt@f$d#gq4yx%+)f#o+#g8@%g07wwvglb!%39#m-&mf1lfdz6vzyajf0h=+d1@d0h9)tij1+6w)#cavqggk2rpouvff##dxtd9s5kisj(zvoxnyyb+-dz7bu0#5*e@pz4%08-$6uew77!+9-iog$gi72dyt1mkfupr12-zu6h%al+$z1r79*bztvi=v&9y48@1b6xi+@e5bb)h2v90n%4z5$-tcq=d=apm3ch9u)7-%%(40%l+io3#rl(78j8+%$8dfx8uu+x2i51%*k135=y@3zcs05w$a7iwu5jyys&i@w5x$t#j@tk&8)6&+b3n-3kbn07dqcbzt=q1@qxv&7eyjfja+bu54koi7i)fzmjh3=#!)ty-ri5g1sispvd0h^@9#^*3tuejj9mlb2f(ko2b9*3cq7t)f$q@pr-tpn*)tg=%9@!3okoifgq*sc3zeyrm9!px4p8&f5lx)@9s=b!(5^b*rr^@(n*+scy-2j++6g&4(2-b9kv2ki*&dgk1k=-#@zpn6!64b@dj+&+bylw1wh4r0s8g-c58jt&mzb%-8^t3(0*zh&c+(z!c#y=xwk5eu0q(+vt40r&paqoqjh+t+5#)jx9f0z)jpwbkm+x^#%c^00s@=)t9l0rb!r119$tiumqp0$nj*uhoa=z#p-j3ha-5-+3cc^y-9g8q0wsic@%sa(d#7#k@bn^)1ka0pe(ewkc)dlsi!po0z9xr!$@5bkbsv#vp$7=z^#a&vj0h1pqghg0%)i$lfd17*abb(ejrs#73m14zfctgjo(id4d6&2y3sm+s^exn^=r03)hl0xy^ofk8ghsg#7p66tl+2l0aw2clyl1hg*uvbfc-og=0%y9o@x&n0h$i&*$2%-3)@(+*1!pz6x$fcqz(&d48ne@+t-32v^up7q@(u%4qsv^unm9^n*91k*x8uq$2i3=%g43xsb#w53vwa5b2s!t1y1^#2e@uww&4mq%*)h4qy8)@cznnmakznl8!@$%o85q49^mp$26)urcx4tkp1f3$7vyuhtyubchv7hw2*g7)1xfc)fy7c54cep)f9l*9v0v7@+9he#hd37sfo7pw+c7%%*xbl!&nx=vw=36=0#45jk%k=6two^9w^5&*1s)h($^5aah2qdbp$wbvee096%j1scoh!#zg^h!0mpi9jmw)kma$iz%n8a5rvfx#eq%a^pkng==&($li$zp8alik-*2466rd@l7j7$roo9nac-3(^nfrr926^bd-39%4&8t0ywv+hqmb&=(+g7#ozqoe#qbp0y2v(&j!&r$$wf!ept$(1d7()6s&me!t0fcacr1+3ous&-uyfu&7a24fc7md5ba%h8d@%m4y0%gzuvw=0u2loe*-5i#!0hku=g(i8kf!m!ilgsi+519n*%5f%gu6!&1abic%0&do&^&c*n6xq$y+3^sy65jxa3q5o)(u#hc@h05e-alj596)!244)ho(0%-d%ad=2m48kj6eapicd+@n=r(3hgavu0ab2la!=x!yy=2z(1z9o951rbh@h65ghi2%upb^-zn^s6zqnn7!*bgz*6xyrvcg#v#=l!f9t0@@s$hzrhd%+*z%^o)v#l#n-pe#&c5!a-5j90itkqw@a4g*e-tp%%=9@d$w!m056m3wdryhw^t@jwgk*o!*jc)zq)2v9yj^blt8qf5+&#o+9ol!-vu2@5gs2aqhb52(ndg-=3k4m@w1f=6%0^bf-@r%r^y#fhnapdnv*x#ltme+3!=51o#5ig)9ov*tn1jaf$kqvp=ueyov8raj(vst0^r*j@fx08*0p^9$l)pka63eybqyd0pwjs7c!v77)02ja5d&kx=-d**&sq#^!oo+m^p=ogr)snc7rd%bai!%3a#vk$p97^=!k3%kch8rjw!!cp$+pg53cjzhr!2ktksz17jbxvw*c7b1bwqi+pmlakhqpmg79j-+#jp@&h19f!i@^%^e!xk(%^palhf(ojot8n#u^dg65$ybp0ol7s=g-ro)i-l1e51=1eekw8anu8dq!9w^u*a)l&u5h^-&*94+do(un$j-wvof$ipc=0xic418)xwp9j4zrf@2%*jj0s*)8^%i50)jhv144aar@id8%@a0z34ept4p!4+t2&0pxft48i-37d1z+py=5f@e)&ia^l*+ayn*3rg162^s5ql)0ap0mecgynd0y*#jd-z1@6$)*0fec0x)bs74pjbo7p#t$!c@$n-63%i&xd5-@z^1thr*aiu)bs*2&8uiymd)1!h6r$a=7mzgjaqb7016leol=2q8un&di(qjqz%x)ps-%3s585v1=21n1=8n$m%p6iuxa6bf9i9o%a1kjkqbwgg1km#r8j4xlwg6v%cwip%#&z6jzkicnjik^2r7&x2z0g##(*(m(-h^bn7=^c6joo)e*=%&!!i!3xd13&cnv4mmqh&j*y^c!dskl!(-rw@o%2srdyj-qo&05zw1rb-5(9+kp*p&-vcc&k8ct$t#@&x2l79-8j(3rudt2&&k)bq0!c7g82bdlp&egx+noai41^l!y3&a=9^g&&^)qcfu&5a&fa$i*kp8hl+*r=pt9fh5j1px2en!)w@(4nb*#9h20u-b*=&edpx2j1m8wz1%&c#g4rf2bgg+=!yp29m5pcn!4o2e-@&zib8yk7^$6g2=*x53vhyh&)5x=w7vna38x*^vw+^(&8-(^0&p0+35610s^gijqzhv7*0+2o2vbpci=!1zib(m4=w&k349%n(bzma-q*4kzuivuzft9@omb$%9^74-1^4+g-!cm2zf&1yn$29=jm+rhz+27bujd5$0noii5^1il(5(8j)f=75w&16(-o!evewa@1+4x2hb-^8x!r*j1&z2q#7=mdobtm7h*ciujh^lkirq^do(fxb36cp-&etiz%zcozmg(@+sqwa&86tdtfp7wr5cspdga7-m!4^v9&+mxd35sjfp=^ry49zy!te9n8wje7ur%50ag7f#v+p((ejl3&*qs985$dq8sf30pplhh^%=v45@*u$vl59o#y^t=*zw711pz6897qr!e=13t=@7v1j21x@tjflxv#d(rvksxr@k2-u^0sq+y92ua+5-*4zz55gd860420dl#++2f(1tdlg9au7r%lj$7k8)6*i*8lx2vpjs+e8+egidj2w1+v$pac7xfr)z@6z&-9dq#ct@7k!zac2t^2*s2alwm(-)uhal*fg4hw@0lwm^8fa%b%0p#og@jsn*bo5lukm=i-#%$j^08mhs8uvg@w39-mfr0*razu9j@d7me8lch@r%)doj9j3y!#-478g)f5u1$-bcv)de5ozavvif9!nem33-ge%jxco64nw=#9*#t0v2z@is0qa0itwalnizt(5aq93-xan+^8--uq20(3#zs4m0v%1g2n7o(d16oo$jma7cyrrk(3nnud-laem36pzkw$r&v(l9$v&q=rcz!pl-+pe6govy6p7h%jxg+p(qs#76l=ci4u&v%ck%@x2fvde3@0p35uz0gl!amlfj!hn0janl-302340-!r*%@%nn!hov7ihzud0u@mf0e$5e2$)6%@bcbc1($+$wew8%fivktxps$j#=pv()ln5(7*(774j@8snqy%@cj22x2s4u649kt&51z#uzs#6vrxm1^@^l7v3#(ajcd#qr*-7^2)4j7la1)uji9rf(#k65f&6oc7uc@21y!6-)im7hsw&#*p9omtg0gw29fc*qs@$j1azetk@f7kzd+&gs--)6fw$8ts5847tvams6$6tijw&=5h9zi6wf^uemx7-&9e5+f)wb54ch*@jdo^r@ns1=6$4tv8dy8acfl&78gd@ma8zt#$j14pkbb8jvh)q)lj46hr&hokbsbe!=x0g5k7bn&-#7mazkd%i*t!@9=wzd9yqc=zw#5k27^y#kgo$=-y+5*^&7@28hgs#@=j9yo39*dvw-=xc@scf4yk1y0kwr6dz4jwz=c7@kltzx%*!ku)t^=o52#42%25s+rx4)qnj16(sw-uf546)9i16oz$i$t=#!^zkxf$j530ow=346k)a(9m%m!vmajmv9uno1@&l$jgu4l4s#pnvi9&qj2^7$guhrrc(cxe*b1z2xlpuya!q%eg+fb^+)p1ma+e1)9#ku4-3jf2=l8130ybq@v5-2r=g+*lch5alcl*at76+**4s4--tne#bt$#r674c(u59noiisd)r#6t7c96q(f=f^!g43$1zrsr!d*9c$%&dy87c9t4)q3m5pk&@*00x7mq12jc0+aatx7iie&*mp5lv8c0(q-1dfc128y^l6r)#zcsnp98q6wseu0&i$0mw5=%-u1v)wn&y83rfpw8gf13samvid72y0(uv4dl4f@+ioyj0b3=@%s!tj2!4yg7j)!1$v36=6rqn1vryo(769%fhieuwm!n+t6sx00t&)qt@as0&n5va3q3tvd5xb4x(1wx(s615$%99!mt(nd0*gglreu=g*7lh2opp%45^r%x#g*k=o9(st04f6k^t8f!yczu1h*t&38$b*2@o#qyo#use1)0v#1u$rgk*!#4f4w5z9ulr26h7i2jgotqlk5te1qz2s*c+z^0@n^hx0v*ysv5n=e85#s(+)3%99$^8shghe2$j#3%(!+$yl(4po#ai)0%(q27!4o&)ihvlsl&oz+s=$9j%o50vyuzn@(hp(tg2y*=rvd=#(w!)g&tgd^2-5x$w)=4je7dh86%)@fl(8!0rzva*$w=rnh)8r)un439s@xs4wo0-b6f(&94v990w!p%l!u^%u&gtqgh-a2^4b-2%eq%kg7@*r8n13^*(h8^3lp*2x6si*(0#3+j9gnmvyzqh$!kl8=g#y+v&yd)4c4qoi9=4mi3%pzb-o2@6h&c)3@64mv4e1*wbl^or#!^1kb39nb70bdh1ot1lrjtem0dgk+2jx7*2q&1uo)ye#r1g2vhgf#qc5$w$sgkn*ju#l90hmcpuswdv+=8*7gr47c)a^@(&13ic=@)^)q@%3*a302%f3v$3fmy=$jv@0j14*$naw^-7msw#ah6d)4fy#1oc6-e20qgdh299t3d!byrebh9b6a%(ev^h5r1e$zim)@v42=ojlm46bu=jd1(jolp&!ztwep)t-1y9^t(9wnm0^o^mya#db%j013*p&ifp3m8)qano6pg7^6w211(^z74ua1oda9&*aj)hb(n*943fm67*1h4gsc#((19ces==jxvm98y5rqy@tj30*f7(t15@1wx(pe^b65=ypoi&a-sahq%1=p1@1e^@@7=8gpvqo5tclnj8y%8yjxc0p^=qnr)3$pjnav1qmae7(zov^&5!k!xkdxncsvmy9b5pi%b6d73yk@4$6ni5xpde@+d$=y#e8=-x@+hql+b7uh+b#8@!h*70s2co179u(0zx$pe7pudc82)c+#qdje!%dxpp0uv7dj#2(1735t0o4d%66+o#7b#^$2ilq&ie72ol$jmxtx3dn2aq3mm0-6q#0)#jxh2#=nberv&hv!7d&0kski@bj3tw1z%&0pq#%$hqto=u6pra+!)q10-d0tvjzvb74+#f9*ceajupp5%u0&e$v%hqa!d9k-357fm6x$bth&#az@r(fj$0z6a$7@e-588d!nm)yo89z=n3et3v7kvworsqe9+6!nv3imb(du#t4ruco3!3o3ffd6r6dn&zpe+*n*cm38p12kzt)#^v-lbiaokbv%5!dl(2td=fis+vz98(f-9b6xc$1^6j0=r#rcgpc%q7^1g9zw!nvvabtit^=yqs33!popz=xnvc-e4yy8z0to&t!38(kvdj$@ts$t1p4#r=+@nwm+9s8bix!5v1nb3=dy5p-zgqup(gt(t-t6lk!q5j46no5+8upy8*uhru88tn1&j^1bb%ysasbh2g*ulub@y-pa%@3s6w)u@!j63im*w=(vz%!@d2j=q$@k5j69a&2ohj0%-sma43!ir!$qw^+t8-u=+-wfn$6ik9irf(#wrujxe3f(057l*nbka2%+as8%)2#k2!9ye-q258(z8u9^ygd&d$^7r#%%xnbv$)h$)1j)b*9n7cgrm^95j)y#*wwdupiusc2#$))0-hzktjq5n!h1#%u*$0((0r#f92fd&mf2)o7q0@80wz@z*2kzg8-fqqq*0y4nr!@-v953iuke^k*uhzzus&-o0q2(o#bxupbf4#)o=!sij(c5u*2u9bfp@3xvi9ck6)(5*3nmvapb4$%42)#gaj85(fnwkbwah*nx+#@mlr7ng$1-##*s)iijaf!3tbi-p-i!hz5$if(u5pkt90s22$go9op9wix*(8gj6$6litr6sq7q(5*1s2zz7-wia(@q^ws)(wc(*&xn94=9bo%lf&5jh*57#nodhe%a#!y*a+7lo(6rwg6wrl!+l*4ql@yl7io7#!)9e=ogpdoxs25b%up=h^%*uynv&g7q9+fgl=-uav#y9p#$y401-sk=(w2=c8x*2i7sgky*ie9&e8o)j8js!uen4jljkw7nw(01m0n@m6z(nn*p&64!kpicyp3--#mula%io4x#p28t9u+uvob8x)u%@tcj)m#!ud0g6!wss%0#be9+pbm#h$9crqztpt&7$-=v38v8isv2lkk8lcuvq+xh0ta6j=ei-&+nydzbq$5rjie9589!=z6$14)nb#laoh4ml^2ye5cakk-zwnq5ahp1ap=nh*+acc*wm0j$y37g-vca50b+#9+&uegp*t$i6a#)v=&bia044*2@!!^#xqc8cw(bsi(q#05@7m!76+^1pkdsv0visq95@rbxezd+hm%td%ra+ouco&mt#7q78!##$+q3ej5f!^d6mi-5bsor*gb*0z5ll1f1!egd$vo6m^8h3&148kab28(nmyr57d*o18)b&9%qrn0w2if7^w6wj$-wu#98zm-f-m@()t!+mazto*)l%z$62^^!!*jt+u300feell!@f7nux*&d^k&q9h7y7qie!5+l4&0*^&+v5wl*j8j&qts4f2$s3)kla8q48un0j+x+lxk8)#@-7gw5zlywehg(n4s=q@paa$mw7ds^ayg$il7)6lahqbbq7nb@ox7i21@*@+-iud$=wb!y)hf50*a9hmko#b7$cis34$i7zro!70+a@k^&uw48je1d5#k62+m&sunyi3sb8ve@0uxx4$7zm0f1s(w48mi7qy-4&98m#i+&q#8nk=w@hyk8&=&d14@ohk!co$1(yi3l0z1cp0d!blk(@d!(^c-ol$15efh1zu6om-oblxrwlq8)+^6(r5e6pcq9^(z(a7kk9pz#td0cl=#ly55p3xn!rq+r-c5vqi$75ja$v*$$y4fd544pdah$p3f8ph%64rxsiy9@x^99385v9!xj%cp$^+bern3iriowpwt0(^@xn2an=$+v*b^p&3zi478)s26vm4d85*x+6#hd@-tdmid2h+o24=(si^o()@+j1f%+e^mtgiz53cxthrumv6r8+p%%3zhq+!8sjdmvvrgb1d58xr3^4v**ayq&w8b(%l6^!p@e17rll2i90uz0$bl0&%qad6c@3z6o2#-sg0g)zmn4-fh*g=yk+u+(o1$*dg@+)+u!iosdovujhzs-k0b6fgov$ee!9x7t!m7+u1!y9^o0+53#h^08%y85$7=tybm@@e3$8d%#$k=cu4bivfx*&-f5$eov35+shz#=e$trq!(vidnpp#5^e5(#@=+5rloil8y9^0y6pk*ye%b01+f%qio7n+ot$v+52!tvi#j56-68@#9)vctrtkiamca&kq&!ls0h!wz@64iwbb)9dd4kk(0a3&)82bg6y(jmsxpcehxbpu9emn3yznlv7h8*y8oohn(1izb%rphwbewbu&pt&pd40&%)9ghjidi7ai*yq#wpoj-4gs@dnthusgwf20y@*-*s(jd--trtirca(p5b0r^e)wv(u30v7fhac99=+#fxqa+o&%ll(4s$u%g&*j%k13x*@s@ob8n!$ce8efehsi1ewnr4x&e5-(^z$yz5ra(aubq8#3%3gmuzek^fiu!35^#*25*=*xsqdk(1bl%%wvjc@vkvdub)vg1f8yuu8*9&fyi8vg$#g(1pmjuugc7@=h1=#4^kd8ui!bi5g5+-h7409l@l+q%dp=)-1p)%cc03#xvwon%5v8cd7qsz^bls&*-#0pry9im&iw@h)9pnop$bm7f1=m+-rg9*c6n+x8(go1t6d(byf&r7tbf&(miao1#^g&&dsarbfng=24gwe&8ase$-z5t*08y4#sllea*r#2x2ojffsuih&24sr(&3yp=1z7ojs)+^-4x54s#rk$6x0#@p4uhukg=35^pno=wguhjso-4^u#sh0mw3(-9y3&b77$q@wf(x@kgac0q5mbq1r5ry%23pa)7d^61k-^$^*$0os$il=r3u&(4w!*)v79a%6wl#+6767i7dt**wcssuj1z)em4r(joi38npxllgz)c9sk)^q(wvbrny5v9vw4@j+m5lz73e^)!xy7872@e+h870az1-5(f@iy9890vjg-40ht+-@e*d2@wf^to+y5x)6+dq=+-wh88jtisyx3p3wqplrc&4lva517&h%+q@r^=&r7p7&r2mv$(6$&)nuj6^be#zf(fc2xmoehhzdo@g*8p@#pm-em4!ptzq*$x=#i)wf93n10d-2k-@&w3tzhlr##+-)hnv!$m!#ibr2wxmd6i%u4i&ph0v@^sn952dw$a#^s+810nl(&%u5i%gi4dcfe-))+j)cobvcl+(4ch5%i1(wt^2%ftz0#n#de#2p1)!zk8fo)69h33yne(%u@yorr(5&p526!vda%m6z2x*3kt)ozgai=ccc@6hvez-ftr2ik*60sx0js19+-bb(cx8gq%vipakpv4mgn#%n46)m(yaa=jb2)e^7kgimcmkqrk*4exbp5-f@boz(3da^!@dz@^)a4gryh)v0a3om&g=-#rpp(d)ognfgtn^pbd1j*ov19^7qt8+c%g476!hll($%5ic9@-w3!3t444ve1)t3n%v$*i0!=o=-k5(1z-dy6l8ap+rwgf$v$ah%74%3xg616yf+9*537-)yys4*tmv7kbouht&@u58l9i1t9thz4a#^fp8vq=m(^+po=u64w&vwf1z-7miqpeei8j&yzx@ou#0!-zi3x7k!!!19$9#b#m8#)wv4d0s3yf(nq6qgl12n7hz=@ih65fz4r!$))0j&v@4v^r8i9bys)pt44m^ys2-^*fxd^rk^a8e)7=y7vo)ioo7&6pgz7s5*##116cg5udqaii)7xo6r5$693136#=o+roi(l0wq&gw(iv9nf4+n21s-y^-y%4^otwi-qqh*u5pj#!1u%tzo-6zn)o$m1)psc&%uh!ndgyl)l(pkf^f!s7px45w^a#hav=(()c%t2u&^gbuw-cd95cq!6xn686wm$ibx+fc^qpit%kuimq&#031q=idn)ol)tjeuq9w7qz8vg()ggku8#d+p2vv^w)(^$a+bh+u$-p#u*t9ea=a1w7i^k^00do6rn^6r)v+gaj92b&hn!x5r8j%uriybc30#084wc5u!-)j8=1kbme$^02kiw0q@kn&4#=e#sfetg(y#+yon$4=l#8d-jbq(4kzve9(qn2dd+805v2i(km-91b%r8tc@fib)n69fpo+al7zti3n@ht0yz6(2*%hxub+%s4u$^&8pm!j&t!)t26co4l0%@izk&2t*81^0b8)clk26jwbu(a%bw$a&rge7bjh=6com*z3*!q$d#*n96dv5!3^*j+vp6s=ww5+*^-dm3=!w+=tp#hws*6pe2fo*)xane#au*4&8q=w#&%*z(dzja9ulc=g2#k2o!d+a9=hocha=4xp@l#+6w*fh5^7=jg)6k&e4^76==s((mp!w!mp+k(i&-62*fk^uz13@l2)8yw9$-l$cy6p$y)gc8p5pt#73z@n=3-6o3n&jpk*3^i@4owwvdiro)!3jjuza&^%i+wp3r-skgej=wrxk9e7v(bs&*0+r=79+h44i^xzg(9**z6hf8eb%ildm#h9m+oz4hj5zvfmh6z0p3kvas8l*p(^)ltkm7&h!hd1rw(%x0oi@^e)c&mgf#mcxn9wk)";
            //byte[] encprikeybyte = File.ReadAllBytes("affixservices\\source\\sourcecreds\\sourcelocal.uri");
        }


        private void Form1_Load(object sender, EventArgs e)
        {
            servertime.Start();
            IDKeyToDH = new List<object>();
            waitforconnection();
        }

        private void waitforconnection()
        {
            int recv;

            byte[] data = new byte[1024];
            byte[] replydata = new byte[1024];
            loop:;
            try
            {
                Socket sck;
                Socket newSocket;
                sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                sck.ReceiveTimeout = 1000;
                IPEndPoint connectedperson = new IPEndPoint(IPAddress.Any, 8090);
                EndPoint tmpRemote = (EndPoint)connectedperson;
                sck.Bind(connectedperson);
                sck.Listen(0);
                newSocket = sck.Accept();
                while (true)
                {
                    byte[] sizeBuf = new byte[4];
                    newSocket.Receive(sizeBuf, 0, sizeBuf.Length, 0);
                    int size = BitConverter.ToInt32(sizeBuf, 0);
                    MemoryStream ms = new MemoryStream();
                    while (size > 0)
                    {
                        byte[] buffer;
                        if (size < newSocket.ReceiveBufferSize)
                        {
                            buffer = new byte[size];
                        }
                        else
                        {
                            buffer = new byte[newSocket.ReceiveBufferSize];
                        }
                        int rec = newSocket.Receive(buffer, 0, buffer.Length, 0);
                        size -= rec;
                        ms.Write(buffer, 0, rec);
                    }
                    byte[] data2 = ms.ToArray();
                    Console.Write(Encoding.ASCII.GetString(data2));
                    //byte[] data4 = File.ReadAllBytes("test.txt");
                    // Console.Write("Replyed to: " + connectedperson + "With: " + Encoding.ASCII.GetString(data4));
                    sck.Close();
                    ms.Close();
                    ms.Dispose();
                    Thread t = new Thread(() => processclientrequest(newSocket, data2));
                    t.Start();
                    // // newSocket.Send(BitConverter.GetBytes(data4.Length), 0, 4, 0);
                    //  newSocket.Send(data4);
                    //  if (waitIPs.Contains(connectedperson.Address.ToString() + " " + s.Elapsed.Seconds.ToString()) || waitIPs.Contains(connectedperson.Address.ToString() + " " + (s.Elapsed.Seconds -1).ToString()) || waitIPs.Contains(connectedperson.Address.ToString() + " " + (s.Elapsed.Seconds - 1).ToString()) || waitIPs.Contains(connectedperson.Address.ToString() + " " + (s.Elapsed.Seconds - 2).ToString()))
                    //  {
                    //      newSocket.Close();
                    //      goto loop;
                    //  }
                    //  waitIPs += System.Environment.NewLine + connectedperson.Address.ToString() + " " + s.Elapsed.Seconds.ToString();
                    //  Console.Write(waitIPs);
                    goto loop;

                }
            }

            catch { goto loop; }

        }


        private void processclientrequest(Socket newSocket, byte[] data2)
        {
            byte[] replydata;
            string UserIDKey;
            string UserDHKey;
            try
            {
                try
                {
                    newSocket.SendTimeout = 100;
                    if (!File.Exists("affixservices\\source\\blacklist\\userlist.uri"))
                    {
                        List<object> lo = new List<object> { };
                        File.WriteAllBytes("affixservices\\source\\blacklist\\userlist.uri", EncryptByteArray(convertlisttobyte(lo), intermindablehash));
                    }

                    if (File.Exists("affixservices\\source\\blacklist\\list.uri"))
                    {
                        string bannedips = Encoding.UTF8.GetString(DecryptByteArray(File.ReadAllBytes("affixservices\\source\\blacklist\\list.uri"), intermindablehash));
                        string ip = newSocket.RemoteEndPoint.ToString();
                        if (bannedips.Contains("=" + ip + "="))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }
                    }

                    List<object> processlist;
                    try
                    {
                        List<object> connectioninfo = DecryptMessage(data2);
                        UserIDKey = connectioninfo[0] as string;
                        UserDHKey = connectioninfo[1] as string;
                        processlist = connectioninfo[2] as List<object>;
                        if (!verifiedauthenticationkeys.Contains(UserAuth))
                        {
                            newSocket.Close();
                            return;
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.ToString());
                        log(new List<string> { newSocket.RemoteEndPoint.ToString(), "unsuccessful read" }, "affixservices\\person\\logs\\ulog.uri");
                        newSocket.Close();
                        UserIDKey = "";
                        return;
                    }
                    if ((processlist[0] as string) == "new bind")
                    {
                        string dh1 = processlist[1] as string;
                        string p = processlist[2] as string;
                        string q = processlist[3] as string;
                        string pubkey = processlist[4] as string;
                        long dhinternalkey = genDHpart1(long.Parse(p), long.Parse(q));
                        string IDKey = generateIDKey();
                        List<object> replyobject = new List<object>() { "success", dhinternalkey.ToString(), IDKey };
                        replydata = EncryptMessageWithoutDH(replyobject, pubkey);
                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                        newSocket.Send(replydata);
                        long DHKey = genDHpart2(long.Parse(dh1), long.Parse(p), long.Parse(q));
                        IDKeyToDH.Add(new List<object> { IDKey, DHKey.ToString() });
                        randomi = 0;
                        UserIDKey = "";
                    }
                    if ((processlist[0] as string) == "signin")
                    {
                        string username = processlist[1] as string;
                        if (usernamebanned(username))
                        {
                            newSocket.Close();
                            UserIDKey = "";
                            return;
                        }
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        string permid = getpermid(username);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(username))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (File.Exists("affixservices\\person\\users\\" + permid + "\\credentials.uri"))
                        {
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "successful signin" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }
                        else
                        {
                            log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }



                    }


                    if ((processlist[0] as string) == "getuserchats")
                    {
                        string username = processlist[1] as string;
                        if (usernamebanned(username))
                        {
                            newSocket.Close();
                            UserIDKey = "";
                            return;
                        }
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        string permid = getpermid(username);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(username))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (File.Exists("affixservices\\person\\users\\" + permid + "\\credentials.uri"))
                        {
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (passwordbyte.SequenceEqual(correctcreds))
                            {
                                if (!File.Exists("affixservices\\person\\users\\" + permid + "\\chats.uri"))
                                {
                                    List<object> lo = new List<object> { };
                                    File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\chats.uri", EncryptByteArray(convertlisttobyte(lo), intermindablehash));

                                    log(new List<string> { username, "successful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj = new List<object>() { "success", lo };
                                    replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                                else
                                {
                                    try
                                    {
                                        List<object> chatslist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\chats.uri"), intermindablehash)) as List<object>;

                                        log(new List<string> { username, "successful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj = new List<object>() { "success", chatslist };
                                        replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;

                                    }
                                    catch
                                    {

                                        log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj = new List<object>() { "error", "corrupted chats" };
                                        replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;

                                    }
                                }


                            }
                            else
                            {
                                log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }
                        else
                        {
                            log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                    }


                    if ((processlist[0] as string) == "sendmessage")
                    {
                        string username = processlist[1] as string;
                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        string peerusername = processlist[4] as string;
                        List<object> messagelist = processlist[5] as List<object>;
                        string permid = getpermid(username);
                        string peerpermid = getpermid(peerusername);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(username))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(peerusername))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "peer does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (peerpermid == null)
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "peer does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (File.Exists("affixservices\\person\\users\\" + permid + "\\credentials.uri"))
                        {
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (passwordbyte.SequenceEqual(correctcreds))
                            {
                                if (!File.Exists("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri"))
                                {
                                    log(new List<string> { username, "unsuccessful chat retrieval" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj1 = new List<object>() { "error", "chat does not exist" };
                                    replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                                else
                                {
                                    if (!File.Exists("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid + ".uri"))
                                    {
                                        log(new List<string> { username, "unsuccessful chat retrieval" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj1 = new List<object>() { "error", "peer chat does not exist" };
                                        replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                    else
                                    {
                                        List<object> currentchat = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri"), intermindablehash)) as List<object>;
                                        foreach (byte[] message in messagelist)
                                        {
                                            string randommessageid = randomStringNumeric(30);
                                            List<object> messagewithdetails = new List<object> { message, username, randommessageid };
                                            currentchat.Add(messagewithdetails);
                                        }
                                        File.WriteAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid + ".uri", EncryptByteArray(convertlisttobyte(currentchat), intermindablehash));
                                        File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri", EncryptByteArray(convertlisttobyte(currentchat), intermindablehash));
                                        log(new List<string> { username, "successful message send" }, "affixservices\\person\\logs\\ulog.uri");
                                        //List<object> debuglist = new List<object> { };
                                        List<object> sendobj1 = new List<object>() { "success", currentchat };
                                        replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                }
                            }
                            else
                            {
                                log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }
                        else
                        {
                            log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                    }




                    if ((processlist[0] as string) == "createuserchat")
                    {
                        string username = processlist[1] as string;
                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        string peerusername = processlist[4] as string;
                        string permid = getpermid(username);
                        string peerpermid = getpermid(peerusername);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(username))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(peerusername))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "peer does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (peerpermid == null)
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "peer does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (File.Exists("affixservices\\person\\users\\" + permid + "\\credentials.uri"))
                        {
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (passwordbyte.SequenceEqual(correctcreds))
                            {
                                if (!File.Exists("affixservices\\person\\users\\" + permid + "\\chats.uri"))
                                {
                                    List<object> peerchatslist;
                                    if (!File.Exists("affixservices\\person\\users\\" + peerpermid + "\\chats.uri"))
                                    {
                                        peerchatslist = new List<object> { };
                                        peerchatslist.Add(new List<object> { username, 0, "pending" });
                                    }
                                    else
                                    {
                                        peerchatslist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chats.uri"), intermindablehash)) as List<object>;
                                        peerchatslist.Add(new List<object> { username, 0, "pending" });
                                    }
                                    List<object> lo = new List<object> { };
                                    lo.Add(new List<object> { peerusername, 0, "pending" });
                                    File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\chats.uri", EncryptByteArray(convertlisttobyte(lo), intermindablehash));
                                    File.WriteAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chats.uri", EncryptByteArray(convertlisttobyte(peerchatslist), intermindablehash));
                                    if (!File.Exists("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri"))
                                    {
                                        List<object> listmessages1 = new List<object> { };
                                        byte[] listmessages1byte = convertlisttobyte(listmessages1);
                                        File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri", EncryptByteArray(listmessages1byte, intermindablehash));

                                        if (!File.Exists("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid + ".uri"))
                                        {
                                            List<object> listmessages = new List<object> { };
                                            byte[] listmessagesbyte = convertlisttobyte(listmessages);
                                            File.WriteAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid + ".uri", EncryptByteArray(listmessagesbyte, intermindablehash));
                                            log(new List<string> { username, "successful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj = new List<object>() { "success" };
                                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                        else
                                        {
                                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj1 = new List<object>() { "error", "peer chat already exists" };
                                            replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj1 = new List<object>() { "error", "user chat already exists" };
                                        replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                }
                                else
                                {
                                    try
                                    {
                                        List<object> peerchatslist;
                                        if (!File.Exists("affixservices\\person\\users\\" + peerpermid + "\\chats.uri"))
                                        {
                                            peerchatslist = new List<object> { };
                                        }
                                        else
                                        {
                                            peerchatslist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chats.uri"), intermindablehash)) as List<object>;
                                        }
                                        List<object> chatslist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\chats.uri"), intermindablehash)) as List<object>;

                                        foreach (List<object> lo in chatslist)
                                        {
                                            if ((lo[0] as string) == peerusername)
                                            {
                                                log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                                                List<object> sendobj1 = new List<object>() { "error", "this user is already your friend" };
                                                replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                                newSocket.Send(replydata);
                                                UserIDKey = "";
                                                return;
                                            }
                                        }
                                        chatslist.Add(new List<object> { peerusername, 0, "pending" });
                                        peerchatslist.Add(new List<object> { username, 0, "pending" });
                                        File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\chats.uri", EncryptByteArray(convertlisttobyte(chatslist), intermindablehash));
                                        File.WriteAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chats.uri", EncryptByteArray(convertlisttobyte(peerchatslist), intermindablehash));
                                        if (!File.Exists("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri"))
                                        {
                                            List<object> listmessages = new List<object> { };
                                            byte[] listmessagesbyte = convertlisttobyte(listmessages);
                                            File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid + ".uri", EncryptByteArray(listmessagesbyte, intermindablehash));

                                            if (!File.Exists("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid + ".uri"))
                                            {
                                                List<object> listmessages1 = new List<object> { };
                                                byte[] listmessages1byte = convertlisttobyte(listmessages1);
                                                File.WriteAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid + ".uri", EncryptByteArray(listmessages1byte, intermindablehash));
                                                log(new List<string> { username, "successful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                                List<object> sendobj1 = new List<object>() { "success" };
                                                replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                                newSocket.Send(replydata);
                                                UserIDKey = "";
                                                return;
                                            }
                                            else
                                            {
                                                log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                                                List<object> sendobj1 = new List<object>() { "error", "peer chat already exists" };
                                                replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                                newSocket.Send(replydata);
                                                UserIDKey = "";
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj1 = new List<object>() { "error", "user chat already exists" };
                                            replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                    }
                                    catch
                                    {
                                        log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj = new List<object>() { "error", "corrupted chats" };
                                        replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;

                                    }
                                }


                            }
                            else
                            {
                                log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }
                        else
                        {
                            log(new List<string> { username, "unsuccessful chats retreival" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }



                    }


                    if ((processlist[0] as string) == "signup")
                    {
                        string username1 = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string email = processlist[3] as string;
                        string pubkey = processlist[4] as string;

                        string availablechars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_";
                        string username = "";
                        bool perfect = true;
                        foreach (char c in username1)
                        {
                            if (availablechars.Contains(c))
                            {
                                username = username + c;
                            }
                            else
                            {
                                log(new List<string> { username, "unsuccessful signup" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "error" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }
                        if (email.Contains("="))
                        {
                            log(new List<string> { username, "unsuccessful signup, contained equal sign." }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "email" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (usernamebanned(username))
                        {
                            newSocket.Close();
                            UserIDKey = "";
                            return;
                        }
                        else
                        {
                            if (!File.Exists("affixservices\\person\\emails\\listemail.uri"))
                            {
                                List<object> listemails = new List<object>();
                                listemails.Add(new List<object> { "", "" });
                                File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(listemails), intermindablehash));
                            }
                            foreach (List<object> emailtie in convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>)
                            {
                                if ((string)emailtie[0] == email)
                                {
                                    log(new List<string> { username, "unsuccessful signup" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj1 = new List<object>() { "error", "email" };
                                    replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                                if ((string)emailtie[1] == username)
                                {
                                    log(new List<string> { username, "unsuccessful signup" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj1 = new List<object>() { "error", "username" };
                                    replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                            }
                            string confirmationcode = randomStringAlphabet(8);
                            string userpermid = getpermid(username);
                            if (userpermid == null)
                            {
                                userpermid = genpermid(username);
                            }
                            if (userpermid == null)
                            {
                                newSocket.Close();
                                UserIDKey = "";
                                return;
                            }
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\confirmation.uri", EncryptByteArray(Encoding.UTF8.GetBytes(confirmationcode), intermindablehash));
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\email.uri", EncryptByteArray(Encoding.UTF8.GetBytes(email), intermindablehash));
                            byte[] serializedpasswordbyte = convertlisttobyte(passwordbyte);
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\credentials.uri", EncryptByteArray(serializedpasswordbyte, intermindablehash));
                            emailmessage(email, username, confirmationcode);
                            log(new List<string> { username, "partially successful signup, verification email sent" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "success" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }


                    }


                    if ((processlist[0] as string) == "signupIFA2")
                    {
                        string username1 = processlist[1] as string;
                        byte[] encPermPriKey = processlist[2] as byte[];
                        byte[] credentials = processlist[3] as byte[];
                        string permPubKey = processlist[4] as string;
                        string email = processlist[5] as string;
                        string pubkey = processlist[6] as string;

                        string availablechars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_";
                        string username = "";
                        bool perfect = true;
                        foreach (char c in username1)
                        {
                            if (availablechars.Contains(c))
                            {
                                username = username + c;
                            }
                            else
                            {
                                log(new List<string> { username, "unsuccessful signup" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj = new List<object>() { "error" };
                                replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }
                        if (email.Contains("="))
                        {
                            log(new List<string> { username, "unsuccessful signup, contained equal sign." }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "email" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (usernamebanned(username))
                        {
                            newSocket.Close();
                            UserIDKey = "";
                            return;
                        }
                        else
                        {
                            if (!File.Exists("affixservices\\person\\emails\\listemail.uri"))
                            {
                                List<object> listemails = new List<object>();
                                listemails.Add(new List<object> { "", "" });
                                File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(listemails), intermindablehash));
                            }
                            foreach (List<object> emailtie in convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>)
                            {
                                if ((string)emailtie[0] == email)
                                {
                                    log(new List<string> { username, "unsuccessful signup" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj1 = new List<object>() { "error", "email" };
                                    replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                                if ((string)emailtie[1] == username)
                                {
                                    log(new List<string> { username, "unsuccessful signup" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj1 = new List<object>() { "error", "username" };
                                    replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                            }
                            string confirmationcode = randomStringAlphabet(8);
                            string userpermid = getpermid(username);
                            if (userpermid == null)
                            {
                                userpermid = genpermid(username);
                            }
                            if (userpermid == null)
                            {
                                newSocket.Close();
                                UserIDKey = "";
                                return;
                            }
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\confirmation.uri", EncryptByteArray(Encoding.UTF8.GetBytes(confirmationcode), intermindablehash));
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\email.uri", EncryptByteArray(Encoding.UTF8.GetBytes(email), intermindablehash));
                            byte[] serializedpasswordbyte = convertlisttobyte(new List<object> { encPermPriKey, permPubKey });
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\credentials.uri", EncryptByteArray(serializedpasswordbyte, intermindablehash));
                            File.WriteAllBytes("affixservices\\person\\users\\" + userpermid + "\\normcredentials.uri", EncryptByteArray(convertlisttobyte(credentials), intermindablehash));
                            emailmessage(email, username, confirmationcode);


                            string verificationkey = randomString(6000);
                            setverifiedconnection(username, verificationkey, newSocket.RemoteEndPoint);

                            log(new List<string> { username, "partially successful signup, verification email sent" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "success", verificationkey };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }


                    }




                    if ((processlist[0] as string) == "signinIFA2")
                    {
                        string username = processlist[1] as string;
                        if (usernamebanned(username))
                        {
                            newSocket.Close();
                            UserIDKey = "";
                            return;
                        }
                        //byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[2] as string;



                        string permid = getpermid(username);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(username))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (File.Exists("affixservices\\person\\users\\" + permid + "\\credentials.uri"))
                        {
                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj1 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */
                            List<object> creds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as List<object>;
                            byte[] encPermPriKey = creds[0] as byte[];
                            string permPubKey = creds[1] as string;
                            string randomVerifiedConnectionKey = randomString(6000);
                            string randomEncryptionKey = randomString(60);
                            byte[] validationmessage = Encrypt(permPubKey, Encoding.UTF8.GetBytes(randomEncryptionKey));
                            byte[] encryptedRandomVerifiedConnectionKey = EncryptByteArray(Encoding.UTF8.GetBytes(randomVerifiedConnectionKey), randomEncryptionKey);
                            setverifiedconnection(username, randomVerifiedConnectionKey, newSocket.RemoteEndPoint);

                            log(new List<string> { username, "successful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "success", encPermPriKey, validationmessage, encryptedRandomVerifiedConnectionKey };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        else
                        {
                            log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }



                    }
                    if ((processlist[0] as string) == "checkIFA2")
                    {
                        string username = processlist[1] as string; 
                        if (usernamebanned(username))
                        {
                            newSocket.Close();
                            UserIDKey = "";
                            return;
                        }
                        string verificationkey = processlist[2] as string;
                        //byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;



                        string permid = getpermid(username);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!userverified(username))
                        {
                            log(new List<string> { username, "unsuccessful chats creation" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (File.Exists("affixservices\\person\\users\\" + permid + "\\credentials.uri"))
                        {
                            if(!checkverifiedconnection(username, verificationkey))
                            {
                                log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj1 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }

                            log(new List<string> { username, "successful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "success" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        else
                        {
                            log(new List<string> { username, "unsuccessful signin" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj = new List<object>() { "error", "user does not exist" };
                            replydata = EncryptMessage(sendobj, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }



                    }








                    if ((processlist[0] as string) == "getchat")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        string peerusername = processlist[4] as string;


                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }
                        if (usernamebanned(peerusername))
                        {
                            log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj13 = new List<object>() { "error", "peer has been banned" };
                            replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (userverified(username) && userverified(peerusername))
                        {
                            string permid = getpermid(username);
                            string peerpermid = getpermid(peerusername);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "error", "user does not exist" };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (peerpermid == null)
                            {
                                log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj16 = new List<object>() { "error", "peer does not exist" };
                                replydata = EncryptMessage(sendobj16, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!File.Exists("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid.ToString() + ".uri"))
                            {
                                log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj12 = new List<object>() { "error", "peer chat does not exist" };
                                replydata = EncryptMessage(sendobj12, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!File.Exists("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid.ToString() + ".uri"))
                            {
                                log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj12 = new List<object>() { "error", "user chat does not exist" };
                                replydata = EncryptMessage(sendobj12, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            byte[] peerschat = DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\chat" + permid.ToString() + ".uri"), intermindablehash);
                            byte[] userschat = DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\chat" + peerpermid.ToString() + ".uri"), intermindablehash);
                            if (!peerschat.SequenceEqual(userschat))
                            {
                                log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "user and peer chats out of sync" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }

                            List<object> currentchat = convertbytetolist(peerschat) as List<object>;

                            log(new List<string> { username, "successful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                            //List<object> debuglist = new List<object> { };
                            List<object> sendobj13 = new List<object>() { "success", currentchat };
                            replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;

                        }
                        log(new List<string> { username, "unsuccessful obtain chat" }, "affixservices\\person\\logs\\ulog.uri");
                        List<object> sendobj1 = new List<object>() { "error", "user or peer does not exist" };
                        replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                        newSocket.Send(replydata);
                        UserIDKey = "";
                        return;


                    }












                    if ((processlist[0] as string) == "holepunchlog")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> portlist = processlist[4] as List<object>;
                        bool isserver = false;
                        string servername = "";
                        try
                        {
                            servername = processlist[5] as string;
                            isserver = true;
                        }
                        catch
                        {
                        }

                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            List<object> modifiedportlist = new List<object> { };
                            if (!isserver)
                            {
                                if (File.Exists("affixservices\\person\\users\\" + permid + "\\punch.uri"))
                                {
                                    List<object> previousholepunchlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\punch.uri"), intermindablehash)) as List<object>;
                                    List<object> previoususersandports = previousholepunchlist[1] as List<object>;

                                    foreach (List<object> prevuserandport in previoususersandports)
                                    {
                                        string prevpeerusername = prevuserandport[0] as string;
                                        if (prevpeerusername.Substring(0, 6) == "psv://")
                                        {
                                            string peerusername = prevpeerusername.Substring(6, prevpeerusername.Length - 6).Split('/')[0];

                                            if (userverified(peerusername) && !usernamebanned(peerusername))
                                            {
                                                modifiedportlist.Add(prevuserandport);
                                            }
                                        }
                                        else
                                        {
                                            if (userverified(prevpeerusername) && !usernamebanned(prevpeerusername))
                                            {
                                                modifiedportlist.Add(prevuserandport);
                                            }
                                        }
                                    }
                                }

                                foreach (List<object> userandport in portlist)
                                {
                                    bool makenew = true;
                                    int indexofprev = -1;
                                    string peerusername = userandport[0] as string;
                                    foreach (List<object> prevuserandport in modifiedportlist)
                                    {
                                        if (peerusername == prevuserandport[0] as string)
                                        {
                                            makenew = false;
                                            indexofprev = modifiedportlist.IndexOf(prevuserandport);
                                        }
                                    }
                                    if (peerusername.Substring(0, 6) == "psv://")
                                    {
                                        string usernametouse = peerusername.Substring(6, peerusername.Length - 6).Split('/')[0];

                                        if (userverified(usernametouse) && !usernamebanned(usernametouse))
                                        {
                                            if (makenew)
                                            {
                                                modifiedportlist.Add(userandport);
                                            }
                                            else
                                            {
                                                modifiedportlist[indexofprev] = userandport;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (userverified(peerusername) && !usernamebanned(peerusername))
                                        {
                                            if (makenew)
                                            {
                                                modifiedportlist.Add(userandport);
                                            }
                                            else
                                            {
                                                modifiedportlist[indexofprev] = userandport;
                                            }
                                        }
                                    }
                                }



                                string ip = newSocket.RemoteEndPoint.ToString();

                                List<object> openipandports = new List<object> { ip.Split(':')[0], modifiedportlist };

                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\punch.uri", EncryptByteArray(convertlisttobyte(openipandports), intermindablehash));

                                log(new List<string> { username, "successful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj11 = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                if (File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                                {
                                    List<object> servers = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;
                                    int indexofserver = -1;
                                    foreach (List<object> server in servers)
                                    {
                                        if (server[0] as string == servername)
                                        {
                                            indexofserver = servers.IndexOf(server);
                                        }
                                    }
                                    if (indexofserver != -1)
                                    {
                                        List<object> previoususersandports = (servers[indexofserver] as List<object>)[2] as List<object>;

                                        foreach (List<object> prevuserandport in previoususersandports)
                                        {
                                            string prevpeerusername = prevuserandport[0] as string;
                                            if (userverified(prevpeerusername) && !usernamebanned(prevpeerusername))
                                            {
                                                modifiedportlist.Add(prevuserandport);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj111 = new List<object>() { "error", "server does not exist" };
                                        replydata = EncryptMessage(sendobj111, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                    foreach (List<object> userandport in portlist)
                                    {
                                        bool makenew = true;
                                        int indexofprev = -1;
                                        string peerusername = userandport[0] as string;
                                        foreach (List<object> prevuserandport in modifiedportlist)
                                        {
                                            if (peerusername == prevuserandport[0] as string)
                                            {
                                                makenew = false;
                                                indexofprev = modifiedportlist.IndexOf(prevuserandport);
                                            }
                                        }
                                        if (userverified(peerusername) && !usernamebanned(peerusername))
                                        {
                                            if (makenew)
                                            {
                                                modifiedportlist.Add(userandport);
                                            }
                                            else
                                            {
                                                modifiedportlist[indexofprev] = userandport;
                                            }
                                        }
                                    }



                                    string ip = newSocket.RemoteEndPoint.ToString();

                                    List<object> openipandports = modifiedportlist;
                                    (servers[indexofserver] as List<object>)[2] = openipandports;
                                    (servers[indexofserver] as List<object>)[1] = ip.Split(':')[0];
                                    File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri", EncryptByteArray(convertlisttobyte(servers), intermindablehash));

                                    log(new List<string> { username, "successful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj11 = new List<object>() { "success" };
                                    replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                            }
                        }
                    }

                    if ((processlist[0] as string) == "holepunchlogwithIFA2")
                    {
                        string username = processlist[1] as string;
                        string verificationkey = processlist[2] as string;
                        //byte[] passwordbyte = processlist[3] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> portlist = processlist[4] as List<object>;
                        bool isserver = false;
                        string servername = "";
                        try
                        {
                            servername = processlist[5] as string;
                            isserver = true;
                        }
                        catch
                        {
                        }
                        //new Thread(() => { MessageBox.Show(username); }).Start();
                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */
                            if (!checkverifiedconnection(username, verificationkey))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            List<object> modifiedportlist = new List<object> { };
                            if (!isserver)
                            {
                                if (File.Exists("affixservices\\person\\users\\" + permid + "\\punch.uri"))
                                {
                                    List<object> previousholepunchlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\punch.uri"), intermindablehash)) as List<object>;
                                    List<object> previoususersandports = previousholepunchlist[1] as List<object>;

                                    foreach (List<object> prevuserandport in previoususersandports)
                                    {
                                        string prevpeerusername = prevuserandport[0] as string;
                                        if (prevpeerusername.Substring(0, 6) == "psv://")
                                        {
                                            string peerusername = prevpeerusername.Substring(6, prevpeerusername.Length - 6).Split('/')[0];

                                            if (userverified(peerusername) && !usernamebanned(peerusername))
                                            {
                                                modifiedportlist.Add(prevuserandport);
                                            }
                                        }
                                        else
                                        {
                                            if (userverified(prevpeerusername) && !usernamebanned(prevpeerusername))
                                            {
                                                modifiedportlist.Add(prevuserandport);
                                            }
                                        }
                                    }
                                }

                                foreach (List<object> userandport in portlist)
                                {
                                    bool makenew = true;
                                    int indexofprev = -1;
                                    string peerusername = userandport[0] as string;
                                    foreach (List<object> prevuserandport in modifiedportlist)
                                    {
                                        if (peerusername == prevuserandport[0] as string)
                                        {
                                            makenew = false;
                                            indexofprev = modifiedportlist.IndexOf(prevuserandport);
                                        }
                                    }
                                    if (peerusername.Substring(0, 6) == "psv://")
                                    {
                                        string usernametouse = peerusername.Substring(6, peerusername.Length - 6).Split('/')[0];

                                        if (userverified(usernametouse) && !usernamebanned(usernametouse))
                                        {
                                            if (makenew)
                                            {
                                                modifiedportlist.Add(userandport);
                                            }
                                            else
                                            {
                                                modifiedportlist[indexofprev] = userandport;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (userverified(peerusername) && !usernamebanned(peerusername))
                                        {
                                            if (makenew)
                                            {
                                                modifiedportlist.Add(userandport);
                                            }
                                            else
                                            {
                                                modifiedportlist[indexofprev] = userandport;
                                            }
                                        }
                                    }
                                }



                                string ip = newSocket.RemoteEndPoint.ToString();

                                List<object> openipandports = new List<object> { ip.Split(':')[0], modifiedportlist };

                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\punch.uri", EncryptByteArray(convertlisttobyte(openipandports), intermindablehash));

                                log(new List<string> { username, "successful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj11 = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                if (File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                                {
                                    List<object> servers = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;
                                    int indexofserver = -1;
                                    foreach (List<object> server in servers)
                                    {
                                        if (server[0] as string == servername)
                                        {
                                            indexofserver = servers.IndexOf(server);
                                        }
                                    }
                                    if (indexofserver != -1)
                                    {
                                        List<object> previoususersandports = (servers[indexofserver] as List<object>)[2] as List<object>;

                                        foreach (List<object> prevuserandport in previoususersandports)
                                        {
                                            string prevpeerusername = prevuserandport[0] as string;
                                            if (userverified(prevpeerusername) && !usernamebanned(prevpeerusername))
                                            {
                                                modifiedportlist.Add(prevuserandport);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj111 = new List<object>() { "error", "server does not exist" };
                                        replydata = EncryptMessage(sendobj111, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                    foreach (List<object> userandport in portlist)
                                    {
                                        bool makenew = true;
                                        int indexofprev = -1;
                                        string peerusername = userandport[0] as string;
                                        foreach (List<object> prevuserandport in modifiedportlist)
                                        {
                                            if (peerusername == prevuserandport[0] as string)
                                            {
                                                makenew = false;
                                                indexofprev = modifiedportlist.IndexOf(prevuserandport);
                                            }
                                        }
                                        if (userverified(peerusername) && !usernamebanned(peerusername))
                                        {
                                            if (makenew)
                                            {
                                                modifiedportlist.Add(userandport);
                                            }
                                            else
                                            {
                                                modifiedportlist[indexofprev] = userandport;
                                            }
                                        }
                                    }



                                    string ip = newSocket.RemoteEndPoint.ToString();

                                    List<object> openipandports = modifiedportlist;
                                    (servers[indexofserver] as List<object>)[2] = openipandports;
                                    (servers[indexofserver] as List<object>)[1] = ip.Split(':')[0];
                                    File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri", EncryptByteArray(convertlisttobyte(servers), intermindablehash));
                                    //MessageBox.Show("");
                                    log(new List<string> { username, "successful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj11 = new List<object>() { "success" };
                                    replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                            }
                        }
                    }

                    if ((processlist[0] as string) == "createserver")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        string servername = processlist[4] as string;

                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }


                            if (File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                            {
                                List<object> serverlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;

                                //MessageBox.Show(serverlist[1] as string);
                                foreach (List<object> server in serverlist)
                                {
                                    if (server[0] as string == servername)
                                    {
                                        log(new List<string> { username, "unsuccessful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj14 = new List<object>() { "error", "server already exists" };
                                        replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                }

                                string ip = newSocket.RemoteEndPoint.ToString();

                                List<object> newserver = new List<object> { servername, ip.Split(':')[0], new List<object> { } };
                                serverlist.Add(newserver);
                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri", EncryptByteArray(convertlisttobyte(serverlist), intermindablehash));

                                log(new List<string> { username, "successful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                List<object> serverlist = new List<object> { };
                                string ip = newSocket.RemoteEndPoint.ToString();

                                List<object> newserver = new List<object> { servername, ip.Split(':')[0], new List<object> { } };
                                serverlist.Add(newserver);
                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri", EncryptByteArray(convertlisttobyte(serverlist), intermindablehash));

                                log(new List<string> { username, "successful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }




                        }
                    }





                    if ((processlist[0] as string) == "createserverwithIFA2")
                    {
                        string username = processlist[1] as string;
                        //byte[] passwordbyte = processlist[2] as byte[];
                        string verificationkey = processlist[2] as string;
                        string pubkey = processlist[3] as string;
                        string servername = processlist[4] as string;

                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }

                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }

                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */

                            if (!checkverifiedconnection(username, verificationkey))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "incorrect credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }


                            if (File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                            {
                                List<object> serverlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;

                                //MessageBox.Show(serverlist[1] as string);
                                foreach (List<object> server in serverlist)
                                {
                                    if (server[0] as string == servername)
                                    {
                                        log(new List<string> { username, "unsuccessful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj14 = new List<object>() { "error", "server already exists" };
                                        replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                }

                                string ip = newSocket.RemoteEndPoint.ToString();

                                List<object> newserver = new List<object> { servername, ip.Split(':')[0], new List<object> { } };
                                serverlist.Add(newserver);
                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri", EncryptByteArray(convertlisttobyte(serverlist), intermindablehash));

                                log(new List<string> { username, "successful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                List<object> serverlist = new List<object> { };
                                string ip = newSocket.RemoteEndPoint.ToString();

                                List<object> newserver = new List<object> { servername, ip.Split(':')[0], new List<object> { } };
                                serverlist.Add(newserver);
                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri", EncryptByteArray(convertlisttobyte(serverlist), intermindablehash));

                                log(new List<string> { username, "successful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success" };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }




                        }
                    }


                    if ((processlist[0] as string) == "holepunchkeylog")
                    {
                        string username = processlist[1] as string;
                        string verificationkey = processlist[2] as string;
                        //byte[] passwordbyte = processlist[3] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> keylist = processlist[4] as List<object>;
                        bool isserver = false;
                        string servername = "";
                        try
                        {
                            servername = processlist[5] as string;
                            isserver = true;
                        }
                        catch
                        {

                        }
                        //new Thread(() => { MessageBox.Show(username); }).Start();
                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchkeylog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchkeylog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */
                            if (!checkverifiedconnection(username, verificationkey))
                            {
                                log(new List<string> { username, "unsuccessful holepunchkeylog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!File.Exists("affixservices\\person\\users\\" + permid + "\\punchkeys.uri"))
                            {
                                List<object> punchkeys1 = new List<object> { new List<object> { }, new List<object> { } };
                                File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\punchkeys.uri", EncryptByteArray(convertlisttobyte(punchkeys1), intermindablehash));
                            }

                            List<object> punchkeys = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\punchkeys.uri"), intermindablehash)) as List<object>;

                            if (!isserver)
                            {
                                foreach (List<object> holepunchkey in keylist)
                                {
                                    string peerusernametouse = "";
                                    string peerusername = holepunchkey[0] as string;
                                    string pubkeyforpeer = holepunchkey[1] as string;

                                    if (peerusername.Substring(0, 6) == "psv://")
                                    {
                                        string usernameandserver = peerusername.Substring(6, peerusername.Length - 6);
                                        peerusernametouse = usernameandserver.Split('/')[0];
                                    }
                                    else
                                    {
                                        peerusernametouse = peerusername;
                                    }


                                    if (!usernamebanned(peerusernametouse) && userverified(peerusernametouse))
                                    {
                                        bool newkey = true;
                                        int index = -1;
                                        foreach (List<object> punchkey in (punchkeys[0] as List<object>))
                                        {
                                            if (punchkey[0] as string == peerusername)
                                            {
                                                newkey = false;
                                                index = (punchkey[0] as List<object>).IndexOf(punchkey);
                                            }
                                        }
                                        if (newkey)
                                        {
                                            (punchkeys[0] as List<object>).Add(new List<object> { peerusername, pubkeyforpeer });
                                        }
                                        else
                                        {
                                            (punchkeys[0] as List<object>)[index] = new List<object> { peerusername, pubkeyforpeer };
                                        }

                                    }
                                }




                            }
                            else
                            {
                                if (!File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                                {
                                    log(new List<string> { username, "unsuccessful holepunchkeylog" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj16 = new List<object>() { "error", "no local servers available" };
                                    replydata = EncryptMessage(sendobj16, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                                List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;
                                bool serverexists = false;
                                foreach (List<object> server in openipandports)
                                {
                                    if (server[0] as string == servername)
                                    {
                                        serverexists = true;
                                    }
                                }
                                if (serverexists)
                                {
                                    int indexofserver = -1;
                                    foreach (List<object> server in (punchkeys[1] as List<object>))
                                    {
                                        if (server[0] as string == servername)
                                        {
                                            indexofserver = (punchkeys[1] as List<object>).IndexOf(server);
                                        }
                                    }

                                    if (indexofserver == -1)
                                    {
                                        (punchkeys[1] as List<object>).Add(new List<object> { servername, new List<object> { } });
                                        indexofserver = (punchkeys[1] as List<object>).Count - 1;
                                    }

                                    foreach (List<object> holepunchkey in keylist)
                                    {
                                        string peerusernametouse = "";
                                        string peerusername = holepunchkey[0] as string;
                                        string pubkeyforpeer = holepunchkey[1] as string;

                                        if (peerusername.Substring(0, 6) == "psv://")
                                        {
                                            string usernameandserver = peerusername.Substring(6, peerusername.Length - 6);
                                            peerusernametouse = usernameandserver.Split('/')[0];
                                        }
                                        else
                                        {
                                            peerusernametouse = peerusername;
                                        }


                                        if (!usernamebanned(peerusernametouse) && userverified(peerusernametouse))
                                        {

                                            bool newkey = true;
                                            int index = -1;
                                            foreach (List<object> punchkey in (((punchkeys[1] as List<object>)[indexofserver] as List<object>)[1] as List<object>))
                                            {
                                                if (punchkey[0] as string == peerusername)
                                                {
                                                    newkey = false;
                                                    index = (((punchkeys[1] as List<object>)[indexofserver] as List<object>)[1] as List<object>).IndexOf(punchkey);
                                                }
                                            }
                                            if (newkey)
                                            {
                                                (((punchkeys[1] as List<object>)[indexofserver] as List<object>)[1] as List<object>).Add(new List<object> { peerusername, pubkeyforpeer });
                                            }
                                            else
                                            {
                                                (((punchkeys[1] as List<object>)[indexofserver] as List<object>)[1] as List<object>)[index] = new List<object> { peerusername, pubkeyforpeer };
                                            }

                                        }
                                    }
                                }
                                else
                                {
                                    log(new List<string> { username, "unsuccessful holepunchkeylog" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj16 = new List<object>() { "error", "local server does not exist" };
                                    replydata = EncryptMessage(sendobj16, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                            }



                            File.WriteAllBytes("affixservices\\person\\users\\" + permid + "\\punchkeys.uri", EncryptByteArray(convertlisttobyte(punchkeys), intermindablehash));


                            log(new List<string> { username, "successful holepunchkeylog" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj15 = new List<object>() { "success" };
                            replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;

                        }
                    }

                    if ((processlist[0] as string) == "holepunchkeyget")
                    {
                        string username = processlist[1] as string;
                        string verificationkey = processlist[2] as string;
                        //byte[] passwordbyte = processlist[3] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> userlist = processlist[4] as List<object>;
                        bool isserver = false;
                        string servername = "";
                        try
                        {
                            servername = processlist[5] as string;
                            isserver = true;
                        }
                        catch
                        {

                        }
                        //new Thread(() => { MessageBox.Show(username); }).Start();
                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchkeyget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchkeyget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */
                            if (!checkverifiedconnection(username, verificationkey))
                            {
                                log(new List<string> { username, "unsuccessful holepunchkeyget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }

                            List<object> returnobj = new List<object> { };

                            foreach (string user in userlist)
                            {
                                bool remoteisserver = false;
                                string remoteservername = "";
                                string peerusernametouse = "";
                                string peerusername = user;

                                if (peerusername.Substring(0, 6) == "psv://")
                                {
                                    remoteisserver = true;
                                    string usernameandserver = peerusername.Substring(6, peerusername.Length - 6);
                                    peerusernametouse = usernameandserver.Split('/')[0];
                                    remoteservername = usernameandserver.Split('/')[1];
                                }
                                else
                                {
                                    peerusernametouse = peerusername;
                                }
                                string peerpermid = getpermid(peerusernametouse);

                                if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\punchkeys.uri"))
                                {
                                    List<object> punchkeys = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\punchkeys.uri"), intermindablehash)) as List<object>;

                                    if (!usernamebanned(peerusernametouse) && userverified(peerusernametouse))
                                    {
                                        if (!remoteisserver)
                                        {
                                            foreach (List<object> punchkey in (punchkeys[0] as List<object>))
                                            {
                                                if (punchkey[0] as string == peerusername)
                                                {
                                                    returnobj.Add(new List<object> { peerusername, punchkey[1] as string });
                                                }
                                            }


                                            if (isserver)
                                            {
                                                foreach (List<object> punchkey in (punchkeys[0] as List<object>))
                                                {
                                                    if (punchkey[0] as string == "psv://" + username + "/" + servername)
                                                    {
                                                        returnobj.Add(new List<object> { peerusername, punchkey[1] as string });
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                foreach (List<object> punchkey in (punchkeys[0] as List<object>))
                                                {
                                                    if (punchkey[0] as string == username)
                                                    {
                                                        returnobj.Add(new List<object> { peerusername, punchkey[1] as string });
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\psvs.uri"))
                                            {
                                                List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\psvs.uri"), intermindablehash)) as List<object>;
                                                bool serverexists = false;
                                                foreach (List<object> server in openipandports)
                                                {
                                                    if (server[0] as string == remoteservername)
                                                    {
                                                        serverexists = true;
                                                    }
                                                }
                                                if (serverexists)
                                                {
                                                    int indexofserver = -1;
                                                    foreach (List<object> server in (punchkeys[1] as List<object>))
                                                    {
                                                        if (server[0] as string == remoteservername)
                                                        {
                                                            indexofserver = (punchkeys[1] as List<object>).IndexOf(server);
                                                        }
                                                    }

                                                    if (indexofserver == -1)
                                                    {
                                                        log(new List<string> { username, "unsuccessful holepunchkeyget" }, "affixservices\\person\\logs\\ulog.uri");
                                                        List<object> sendobj16 = new List<object>() { "error", "remote server does not exist" };
                                                        replydata = EncryptMessage(sendobj16, pubkey, UserDHKey);
                                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                                        newSocket.Send(replydata);
                                                        UserIDKey = "";
                                                        return;
                                                    }

                                                    if (isserver)
                                                    {
                                                        foreach (List<object> punchkey in (((punchkeys[1] as List<object>)[indexofserver] as List<object>)[1] as List<object>))
                                                        {
                                                            if (punchkey[0] as string == "psv://" + username + "/" + servername)
                                                            {
                                                                returnobj.Add(new List<object> { peerusername, punchkey[1] as string });
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (List<object> punchkey in (((punchkeys[1] as List<object>)[indexofserver] as List<object>)[1] as List<object>))
                                                        {
                                                            if (punchkey[0] as string == username)
                                                            {
                                                                returnobj.Add(new List<object> { peerusername, punchkey[1] as string });
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }


                            log(new List<string> { username, "successful holepunchkeyget" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj15 = new List<object>() { "success", returnobj };
                            replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;

                        }
                    }



                    if ((processlist[0] as string) == "deleteserver")
                    {

                    }


                    if ((processlist[0] as string) == "getservers")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;

                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }


                            if (File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                            {
                                List<object> serverlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;

                                log(new List<string> { username, "successful server creation" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success", serverlist };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                List<object> serverlist = new List<object> { };
                                log(new List<string> { username, "successful getservers" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success", serverlist };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }




                        }
                    }






                    if ((processlist[0] as string) == "getserverswithIFA2")
                    {
                        string username = processlist[1] as string;
                        string verificationKey = processlist[2] as string;
                        //byte[] passwordbyte = processlist[3] as byte[];
                        string pubkey = processlist[3] as string;

                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful getservers" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful getservers" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */
                            if (!checkverifiedconnection(username, verificationKey))
                            {
                                log(new List<string> { username, "unsuccessful getservers" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (File.Exists("affixservices\\person\\users\\" + permid + "\\psvs.uri"))
                            {
                                List<object> serverlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\psvs.uri"), intermindablehash)) as List<object>;

                                log(new List<string> { username, "successful getservers" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success", serverlist };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            else
                            {
                                List<object> serverlist = new List<object> { };
                                log(new List<string> { username, "successful getservers" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj15 = new List<object>() { "success", serverlist };
                                replydata = EncryptMessage(sendobj15, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }




                        }
                    }














                    if ((processlist[0] as string) == "holepunchget")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> peerusernames = processlist[4] as List<object>;
                        bool isserver = false;
                        string servername = "";
                        try
                        {
                            servername = processlist[5] as string;
                            isserver = true;
                        }
                        catch
                        {
                        }



                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            List<object> modifiedpeerusernames = new List<object> { };
                            foreach (string peerusername in peerusernames)
                            {
                                string endingusername = "";
                                if (peerusername.Substring(0, 6) == "psv://")
                                {
                                    endingusername = peerusername.Substring(6, peerusername.Length - 6).Split('/')[0];
                                }
                                else
                                {
                                    endingusername = peerusername;
                                }
                                if (userverified(endingusername) && !usernamebanned(endingusername))
                                {
                                    modifiedpeerusernames.Add(peerusername);
                                }
                            }

                            List<object> peerips = new List<object> { };
                            foreach (string peerusername in modifiedpeerusernames)
                            {
                                if (peerusername.Substring(0, 6) == "psv://")
                                {
                                    string servername1 = peerusername.Substring(6, peerusername.Length - 6).Split('/')[1];
                                    string peer = peerusername.Substring(6, peerusername.Length - 6).Split('/')[0];
                                    string peerpermid = getpermid(peer);
                                    if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\psvs.uri"))
                                    {
                                        List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\psvs.uri"), intermindablehash)) as List<object>;
                                        foreach (List<object> server in openipandports)
                                        {
                                            if (server[0] as string == servername1)
                                            {
                                                foreach (List<object> userport in server[2] as List<object>)
                                                {
                                                    if (userport[0] as string == username)
                                                    {
                                                        //MessageBox.Show(server[1] as string + ":" + userport[1] as string);
                                                        peerips.Add(new List<object> { peerusername, server[1] as string + ":" + userport[1] as string });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                        replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                }
                                else
                                {
                                    if (isserver)
                                    {
                                        string peerpermid = getpermid(peerusername);
                                        if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"))
                                        {
                                            List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"), intermindablehash)) as List<object>;
                                            foreach (List<object> userport in (openipandports as List<object>)[1] as List<object>)
                                            {
                                                //MessageBox.Show(userport[0] as string);
                                                if (userport[0] as string == "psv://" + username + "/" + servername)
                                                {
                                                    //MessageBox.Show(openipandports[0] as string + ":" + userport[1] as string);
                                                    peerips.Add(new List<object> { peerusername, openipandports[0] as string + ":" + userport[1] as string });
                                                }
                                            }
                                        }
                                        else
                                        {
                                            log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                            replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        string peerpermid = getpermid(peerusername);
                                        if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"))
                                        {
                                            List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"), intermindablehash)) as List<object>;
                                            foreach (List<object> userport in (openipandports as List<object>)[1] as List<object>)
                                            {
                                                if (userport[0] as string == username)
                                                {
                                                    //MessageBox.Show(openipandports[0] as string + ":" + userport[1] as string);
                                                    peerips.Add(new List<object> { peerusername, openipandports[0] as string + ":" + userport[1] as string });
                                                }
                                            }
                                        }
                                        else
                                        {
                                            log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                            replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                    }
                                }
                            }
                            log(new List<string> { username, "successful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj11 = new List<object>() { "success", peerips };
                            replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }










                    }

                    if ((processlist[0] as string) == "holepunchgetwithIFA2")
                    {
                        string username = processlist[1] as string;
                        string verificationkey = processlist[2] as string;
                        //byte[] passwordbyte = processlist[3] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> peerusernames = processlist[4] as List<object>;
                        bool isserver = false;
                        string servername = "";
                        try
                        {
                            servername = processlist[5] as string;
                            isserver = true;
                        }
                        catch
                        {
                        }



                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            /*
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];
                            
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            */
                            if (!checkverifiedconnection(username, verificationkey))
                            {
                                log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }

                            List<object> modifiedpeerusernames = new List<object> { };
                            foreach (string peerusername in peerusernames)
                            {
                                string endingusername = "";
                                if (peerusername.Substring(0, 6) == "psv://")
                                {
                                    endingusername = peerusername.Substring(6, peerusername.Length - 6).Split('/')[0];
                                }
                                else
                                {
                                    endingusername = peerusername;
                                }
                                if (userverified(endingusername) && !usernamebanned(endingusername))
                                {
                                    modifiedpeerusernames.Add(peerusername);
                                }
                            }

                            List<object> peerips = new List<object> { };
                            foreach (string peerusername in modifiedpeerusernames)
                            {
                                if (peerusername.Substring(0, 6) == "psv://")
                                {
                                    string servername1 = peerusername.Substring(6, peerusername.Length - 6).Split('/')[1];
                                    string peer = peerusername.Substring(6, peerusername.Length - 6).Split('/')[0];
                                    string peerpermid = getpermid(peer);
                                    if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\psvs.uri"))
                                    {
                                        List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\psvs.uri"), intermindablehash)) as List<object>;
                                        foreach (List<object> server in openipandports)
                                        {
                                            if (server[0] as string == servername1)
                                            {
                                                foreach (List<object> userport in server[2] as List<object>)
                                                {
                                                    //MessageBox.Show(userport[0] as string);
                                                    if (userport[0] as string == username)
                                                    {
                                                        //MessageBox.Show(server[1] as string + ":" + userport[1] as string);
                                                        peerips.Add(new List<object> { peerusername, server[1] as string + ":" + userport[1] as string });
                                                        //MessageBox.Show(peerusername, server[1] as string + ":" + userport[1] as string);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                        List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                        replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                        newSocket.Send(replydata);
                                        UserIDKey = "";
                                        return;
                                    }
                                }
                                else
                                {
                                    if (isserver)
                                    {
                                        string peerpermid = getpermid(peerusername);
                                        if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"))
                                        {
                                            List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"), intermindablehash)) as List<object>;
                                            foreach (List<object> userport in (openipandports as List<object>)[1] as List<object>)
                                            {
                                                //MessageBox.Show(userport[0] as string);
                                                if (userport[0] as string == "psv://" + username + "/" + servername)
                                                {
                                                    //MessageBox.Show(openipandports[0] as string + ":" + userport[1] as string);
                                                    peerips.Add(new List<object> { peerusername, openipandports[0] as string + ":" + userport[1] as string });
                                                }
                                            }
                                        }
                                        else
                                        {
                                            log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                            replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        string peerpermid = getpermid(peerusername);
                                        if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"))
                                        {
                                            List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"), intermindablehash)) as List<object>;
                                            foreach (List<object> userport in (openipandports as List<object>)[1] as List<object>)
                                            {
                                                if (userport[0] as string == username)
                                                {
                                                    //MessageBox.Show(openipandports[0] as string + ":" + userport[1] as string);
                                                    peerips.Add(new List<object> { peerusername, openipandports[0] as string + ":" + userport[1] as string });
                                                }
                                            }
                                        }
                                        else
                                        {
                                            log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                            List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                            replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                            newSocket.Send(replydata);
                                            UserIDKey = "";
                                            return;
                                        }
                                    }
                                }
                            }
                            log(new List<string> { username, "successful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj11 = new List<object>() { "success", peerips };
                            replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }










                    }


                    if ((processlist[0] as string) == "joinserver")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string pubkey = processlist[3] as string;
                        List<object> peerusernames = processlist[4] as List<object>;



                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        ///////////////////////////



                        if (userverified(username))
                        {
                            string permid = getpermid(username);
                            if (permid == null)
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj13 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "account error" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                            if (!passwordbyte.SequenceEqual(correctcreds))
                            {
                                log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj14 = new List<object>() { "error", "credentials" };
                                replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            List<object> modifiedpeerusernames = new List<object> { };
                            foreach (string peerusername in peerusernames)
                            {
                                if (userverified(peerusername) && !usernamebanned(peerusername))
                                {
                                    modifiedpeerusernames.Add(peerusername);
                                }
                            }

                            List<object> peerips = new List<object> { };
                            foreach (string peerusername in modifiedpeerusernames)
                            {
                                string peerpermid = getpermid(peerusername);
                                if (File.Exists("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"))
                                {
                                    List<object> openipandports = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + peerpermid + "\\punch.uri"), intermindablehash)) as List<object>;
                                    foreach (List<object> userport in (openipandports as List<object>)[1] as List<object>)
                                    {
                                        if (userport[0] as string == username)
                                        {
                                            //MessageBox.Show(openipandports[0] as string + ":" + userport[1] as string);
                                            peerips.Add(new List<object> { peerusername, openipandports[0] as string + ":" + userport[1] as string });
                                        }
                                    }
                                }
                                else
                                {
                                    log(new List<string> { username, "unsuccessful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                                    List<object> sendobj113 = new List<object>() { "error", "no peerside punch" };
                                    replydata = EncryptMessage(sendobj113, pubkey, UserDHKey);
                                    newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                    newSocket.Send(replydata);
                                    UserIDKey = "";
                                    return;
                                }
                            }
                            log(new List<string> { username, "successful holepunchget" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj11 = new List<object>() { "success", peerips };
                            replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }










                    }
















                    if ((processlist[0] as string) == "verify")
                    {
                        string username = processlist[1] as string;
                        byte[] passwordbyte = processlist[2] as byte[];
                        string email = processlist[3] as string;
                        string pubkey = processlist[4] as string;
                        string verifykey = processlist[5] as string;


                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        if (!File.Exists("affixservices\\person\\emails\\listemail.uri"))
                        {
                            List<object> listemails = new List<object>();
                            listemails.Add(new List<object> { "", "" });
                            File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(listemails), intermindablehash));
                        }

                        foreach (List<object> emailtie in convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>)
                        {
                            if ((string)emailtie[0] == email)
                            {
                                log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj11 = new List<object>() { "error", "email" };
                                replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if ((string)emailtie[1] == username)
                            {
                                log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj12 = new List<object>() { "error", "username" };
                                replydata = EncryptMessage(sendobj12, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }

                        string permid = getpermid(username);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj13 = new List<object>() { "error", "username" };
                            replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj14 = new List<object>() { "error", "username" };
                            replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\credentials.uri"), intermindablehash)) as byte[];
                        if (!passwordbyte.SequenceEqual(correctcreds))
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj14 = new List<object>() { "error", "credentials" };
                            replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        string correctverification = Encoding.UTF8.GetString(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\confirmation.uri"), intermindablehash));
                        if (!(correctverification == verifykey))
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj12 = new List<object>() { "error", "verification code" };
                            replydata = EncryptMessage(sendobj12, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        List<object> emailtielist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>;
                        emailtielist.Add(new List<object> { email, username });
                        File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(emailtielist), intermindablehash));
                        log(new List<string> { username, "successful verification" }, "affixservices\\person\\logs\\ulog.uri");
                        List<object> sendobj1 = new List<object>() { "success" };
                        replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                        newSocket.Send(replydata);
                        UserIDKey = "";
                        return;
                    }
                    if ((processlist[0] as string) == "verifyIFA2")
                    {
                        string username = processlist[1] as string;
                        string connectionKey = processlist[2] as string;
                        byte[] credentials = processlist[3] as byte[];
                        string email = processlist[4] as string;
                        string pubkey = processlist[5] as string;
                        string verifykey = processlist[6] as string;


                        if (usernamebanned(username))
                        {
                            UserIDKey = "";
                            newSocket.Close();
                            return;
                        }

                        if (!File.Exists("affixservices\\person\\emails\\listemail.uri"))
                        {
                            List<object> listemails = new List<object>();
                            listemails.Add(new List<object> { "", "" });
                            File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(listemails), intermindablehash));
                        }

                        foreach (List<object> emailtie in convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>)
                        {
                            if ((string)emailtie[0] == email)
                            {
                                log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj11 = new List<object>() { "error", "email" };
                                replydata = EncryptMessage(sendobj11, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                            if ((string)emailtie[1] == username)
                            {
                                log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                                List<object> sendobj12 = new List<object>() { "error", "username" };
                                replydata = EncryptMessage(sendobj12, pubkey, UserDHKey);
                                newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                                newSocket.Send(replydata);
                                UserIDKey = "";
                                return;
                            }
                        }

                        string permid = getpermid(username);
                        if (permid == null)
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj13 = new List<object>() { "error", "username" };
                            replydata = EncryptMessage(sendobj13, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        if (!Directory.Exists("affixservices\\person\\users\\" + permid + "\\"))
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj14 = new List<object>() { "error", "username" };
                            replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        byte[] correctcreds = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\normcredentials.uri"), intermindablehash)) as byte[];

                        if (!credentials.SequenceEqual(correctcreds))
                        {
                            log(new List<string> { username, "unsuccessful holepunchlog" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj14 = new List<object>() { "error", "credentials" };
                            replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }

                        if (!checkverifiedconnection(username, connectionKey))
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj14 = new List<object>() { "error", "credentials" };
                            replydata = EncryptMessage(sendobj14, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        string correctverification = Encoding.UTF8.GetString(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\users\\" + permid + "\\confirmation.uri"), intermindablehash));
                        if (!(correctverification == verifykey))
                        {
                            log(new List<string> { username, "unsuccessful verification" }, "affixservices\\person\\logs\\ulog.uri");
                            List<object> sendobj12 = new List<object>() { "error", "verification code" };
                            replydata = EncryptMessage(sendobj12, pubkey, UserDHKey);
                            newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                            newSocket.Send(replydata);
                            UserIDKey = "";
                            return;
                        }
                        List<object> emailtielist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>;
                        emailtielist.Add(new List<object> { email, username });
                        File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(emailtielist), intermindablehash));
                        log(new List<string> { username, "successful verification" }, "affixservices\\person\\logs\\ulog.uri");
                        List<object> sendobj1 = new List<object>() { "success" };
                        replydata = EncryptMessage(sendobj1, pubkey, UserDHKey);
                        newSocket.Send(BitConverter.GetBytes(replydata.Length), 0, 4, 0);
                        newSocket.Send(replydata);
                        UserIDKey = "";
                        return;
                    }
                    log(new List<string> { UserIDKey, "unknown command" }, "affixservices\\person\\logs\\ulog.uri");
                    newSocket.Close();
                    UserIDKey = "";
                    return;
                }
                catch (Exception ex)
                {
                    File.WriteAllBytes("affixservices\\error\\asel." + DateTime.Now.ToString("h.mm.ss.ms.tt") + "." + LongRandom(0, 2000000, new Random()).ToString() + ".uri", EncryptByteArray(Encoding.UTF8.GetBytes(ex.ToString()), intermindablehash));
                    MessageBox.Show(ex.ToString());
                }
                return;
            }
            catch { return; }


        }












        private string generateIDKey()
        {
            string IDKey = "";
            bool newkey = false;
            while (newkey == false)
            {
                IDKey = randomString(3000);
                newkey = true;
                foreach (List<object> idkeybind in IDKeyToDH)
                {
                    if (idkeybind[0] as string == IDKey)
                    {
                        newkey = false;
                    }
                }
            }
            return IDKey;
        }





        private string genpermid(string username)
        {
            List<object> permidlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\cloc\\cloc.uri"), intermindablehash)) as List<object>;
            retry:;
            string randompermid = randomStringNumeric(24);

            if ((getuser(randompermid) == null))
            {
                permidlist.Add(new List<object> { username, randompermid });
                File.WriteAllBytes("affixservices\\person\\cloc\\cloc.uri", EncryptByteArray(convertlisttobyte(permidlist), intermindablehash));
            }
            else
            {
                goto retry;
            }
            Directory.CreateDirectory("affixservices\\person\\users\\" + randompermid + "\\");
            return randompermid;
        }

        private string getpermid(string username)
        {
            if (!File.Exists(("affixservices\\person\\cloc\\cloc.uri")))
            {
                File.WriteAllBytes("affixservices\\person\\cloc\\cloc.uri", EncryptByteArray(convertlisttobyte(new List<object> { }), intermindablehash));
            }
            List<object> userpermidlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\cloc\\cloc.uri"), intermindablehash)) as List<object>;
            foreach (List<object> o in userpermidlist)
            {
                if ((string)o[0] == username)
                {
                    string userpermid = (string)o[1];
                    return userpermid;
                }
            }
            return null;
        }

        private bool userverified(string username)
        {
            foreach (List<object> emailtie in convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>)
            {
                if ((string)emailtie[1] == username)
                {
                    return true;
                }
            }
            return false;
        }
        private bool emailverified(string email)
        {
            foreach (List<object> emailtie in convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>)
            {
                if ((string)emailtie[0] == email)
                {
                    return true;
                }
            }
            return false;
        }

        private string getuser(string permid)
        {
            if (!File.Exists(("affixservices\\person\\cloc\\cloc.uri")))
            {
                File.WriteAllBytes("affixservices\\person\\cloc\\cloc.uri", EncryptByteArray(convertlisttobyte(new List<object> { }), intermindablehash));
            }
            List<object> userpermidlist = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\cloc\\cloc.uri"), intermindablehash)) as List<object>;
            foreach (List<object> o in userpermidlist)
            {
                if ((string)o[1] == permid)
                {
                    string username = (string)o[0];
                    return username;
                }
            }
            return null;
        }
        private void verifyuser(string username, string email)
        {
            List<object> listemails = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\person\\emails\\listemail.uri"), intermindablehash)) as List<object>;
            listemails.Add(new List<object> { email, username });
            File.WriteAllBytes("affixservices\\person\\emails\\listemail.uri", EncryptByteArray(convertlisttobyte(listemails), intermindablehash));
        }

        public async void emailmessage(string emailaddress, string username, string confirmationcode)
        {
            string email = emailaddress;
            emaillogin = new NetworkCredential("aeteamaffixsoftware@gmail.com", "s1y+lk24@#[8t5*a)it8*80bwym+t%v!h&[^ufrm-4)@2w=byd%t]l68w#-d");
            emailclient = new SmtpClient("smtp.gmail.com");
            emailclient.Port = Convert.ToInt32("587");
            emailclient.EnableSsl = true;
            emailclient.Credentials = emaillogin;
            msg = new MailMessage { From = new MailAddress("aeteamaffixsoftware@gmail.com", "Affix Software", Encoding.UTF8) };
            msg.To.Add(new MailAddress(email));
            msg.Subject = "Affix Services Account Verification";
            msg.Body = @"Welcome to Affix Services! This is a confirmation email for the account under the name: " + username + @". 
In order to verify your email, please copy this code into Your Affix Services Client: 
"
+ System.Environment.NewLine + confirmationcode + System.Environment.NewLine +
@"

After you verify, you'll have access to using our encrypted chat for talking to other members, and have the ability to store files in our database!

Just in case, remember to read our terms of service(located at 'http://teamaffix.com/')
                And make sure you download more of our products from 'http://teamaffix.com/'

Thanks!

We welcome you to Affix. ";
            msg.BodyEncoding = Encoding.UTF8;
            msg.IsBodyHtml = true;
            msg.Priority = MailPriority.Normal;
            msg.DeliveryNotificationOptions = DeliveryNotificationOptions.OnFailure;
            emailclient.SendAsync(msg, "aeteamaffixsoftware@gmail.com");
        }








        private void setverifiedconnection(string username, string verificationkey, EndPoint remoteEP)
        {
            byte[] encverificationkey = EncryptByteArray(Encoding.UTF8.GetBytes(verificationkey), verificationkey);
            foreach (List<object> connection in verifiedconnections)
            {
                if ((connection[1] as string) == username && (connection[0] as byte[]) == encverificationkey)
                {
                    return;
                }
            }
            verifiedconnections.Add(new List<object> { encverificationkey, username, remoteEP, servertime.Elapsed });
        }


        private List<object> getverifiedconnections(string username)
        {
            int index = -1;
            List<object> connectionlist = new List<object> { };
            foreach (List<object> connection in verifiedconnections)
            {
                if ((connection[1] as string) == username)
                {
                    connectionlist.Add(connection);
                }
            }
            return connectionlist;
        }

        private bool checkverifiedconnection(string username, string verificationkey)
        {
            byte[] encverificationkey = EncryptByteArray(Encoding.UTF8.GetBytes(verificationkey), verificationkey);
            foreach (List<object> connection in verifiedconnections)
            {
                //new Thread(() => { MessageBox.Show(connection[0] as string + " " + (connection[1] as string)); }).Start();
                if ((connection[0] as byte[]).SequenceEqual(encverificationkey) && (connection[1] as string) == username && (servertime.Elapsed.Hours - (connection[3] as TimeSpan? ?? default(TimeSpan)).Hours) < 3)
                {
                    connection[3] = servertime.Elapsed;
                    return true;
                }
            }
            return false;
        }





        private void log(List<string> loglist, string filedirectory)
        {
            string logtime = DateTime.Now.ToString("h:mm:ss..ms..tt");
            loglist.Insert(0, logtime + ":");
            byte[] logbyte = convertlisttobyte(loglist);
            File.WriteAllBytes(filedirectory, EncryptByteArray(logbyte, intermindablehash));
        }
        private bool usernamebanned(string username)
        {
            List<object> bannedusers = convertbytetolist(DecryptByteArray(File.ReadAllBytes("affixservices\\source\\blacklist\\userlist.uri"), intermindablehash)) as List<object>;
            foreach (List<object> user in bannedusers)
            {
                if (username == (user[0] as string))
                {
                    return true;
                }
            }
            return false;
        }




        private byte[] EncryptMessageWithoutDH(List<object> listobj, string publickey)
        {
            //string pubKey = File.ReadAllText("dat\\source\\client\\keys\\puK.uri");

            //MessageBox.Show(Encoding.UTF8.GetString(UserCredentials.credentials));
            //EncryptFull==============================================================
            var sendObject = listobj;

            byte[] sendObjectByte = convertlisttobyte(sendObject);

            string randomkey = randomString(40);

            List<object> IDKeyandDHencrypted = new List<object>() { "serverreturn", sendObjectByte };

            byte[] ByteIDKeyandDHencrypted = convertlisttobyte(IDKeyandDHencrypted);

            byte[] encrypted = EncryptByteArray(ByteIDKeyandDHencrypted, randomkey);

            string pubKey = publickey;

            byte[] encryptedKey = Encrypt(pubKey, Encoding.UTF8.GetBytes(randomkey));

            List<byte[]> finalSendObject = new List<byte[]> { encryptedKey, encrypted };

            byte[] finalSendObjectByte = convertlisttobyte(finalSendObject);
            return finalSendObjectByte;
        }




        private byte[] EncryptMessage(List<object> listobj, string publickey, string UserDHKey)
        {
            try
            {
                //string pubKey = File.ReadAllText("dat\\source\\client\\keys\\puK.uri");

                //MessageBox.Show(Encoding.UTF8.GetString(UserCredentials.credentials));
                //EncryptFull==============================================================
                var sendObject = listobj;

                byte[] sendObjectByte = convertlisttobyte(sendObject);

                string randomkey = randomString(40);

                byte[] dhencrypted = EncryptByteArray(sendObjectByte, UserDHKey);

                List<object> IDKeyandDHencrypted = new List<object>() { "serverreturn", dhencrypted };

                byte[] ByteIDKeyandDHencrypted = convertlisttobyte(IDKeyandDHencrypted);

                byte[] encrypted = EncryptByteArray(ByteIDKeyandDHencrypted, randomkey);

                string pubKey = publickey;

                byte[] encryptedKey = Encrypt(pubKey, Encoding.UTF8.GetBytes(randomkey));

                List<byte[]> finalSendObject = new List<byte[]> { encryptedKey, encrypted };

                byte[] finalSendObjectByte = convertlisttobyte(finalSendObject);
                //MessageBox.Show(finalSendObjectByte.Count().ToString());
                return finalSendObjectByte;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


















        private List<object> DecryptMessage(byte[] finalSendObjectByte)
        {
            string UserIDKey;
            string UserDHKey;
            List<byte[]> finalSendObject2 = convertbytetolist(finalSendObjectByte) as List<byte[]>;

            byte[] encryptedKey2 = finalSendObject2[0] as byte[];

            byte[] encrypted2 = finalSendObject2[1] as byte[];

            byte[] randomKey = Decrypt(priKey, encryptedKey2);

            string randomKey2 = Encoding.UTF8.GetString(randomKey);

            byte[] ByteIDKeyandDHencrypted = DecryptByteArray(encrypted2, randomKey2);

            List<object> IDKeyandDHencrypted = convertbytetolist(ByteIDKeyandDHencrypted) as List<object>;

            string IDKey = IDKeyandDHencrypted[0] as string;
            UserIDKey = IDKey;
            string userauth = IDKeyandDHencrypted[2] as string;
            UserAuth = userauth;

            byte[] processListByte = IDKeyandDHencrypted[1] as byte[];

            string dhkey = "";

            /*
            foreach(List<object> lo in IDKeyToDH)
            {
                MessageBox.Show(lo[0] as string); 
            }
            */

            foreach (List<object> o in IDKeyToDH)
            {
                if ((o[0] as string) == IDKey)
                {
                    dhkey = o[1] as string;
                    UserDHKey = dhkey;
                    goto skip;
                }
            }
            goto noDH;
            skip:;
            byte[] processListDHByte = DecryptByteArray(processListByte, dhkey);

            List<object> processList = convertbytetolist(processListDHByte) as List<object>;
            //MessageBox.Show("");
            return new List<object> { UserIDKey, UserDHKey, processList };
            noDH:;
            return new List<object> { UserIDKey, null, convertbytetolist(processListByte) as List<object> };
        }

        private long genDHpart1(long p, long q)
        {
            randomi = LongRandom(90000, 900000, new Random());
            long I = (p ^ randomi) % q;
            return I;
        }

        private long genDHpart2(long inversekey, long p, long q)
        {
            return ((inversekey ^ randomi) % q);
        }

        long LongRandom(long min, long max, Random rand)
        {
            long result = rand.Next((Int32)(min >> 32), (Int32)(max >> 32));
            result = (result << 32);
            result = result | (long)rand.Next((Int32)min, (Int32)max);
            return result;
        }





        private string randomString(int randomlength)
        {
            retry:;
            try
            {
                string randomString = "";
                char[] letters = "qwertyuiopasdfghjklzxcvbnm0123456789!@#$%^&*()=-+_".ToCharArray();
                Random randomcode = new Random();
                for (int i = 0; i < randomlength; i++)
                {
                    randomString += letters[randomcode.Next(0, 49)].ToString();
                }
                return randomString;
            }
            catch
            {
                goto retry;
            }
        }


        private string randomStringAlphabet(int randomlength)
        {
            retry:;
            try
            {
                string randomString = "";
                char[] letters = "qwertyuiopasdfghjklzxcvbnm0123456789".ToCharArray();
                Random randomcode = new Random();
                for (int i = 0; i < randomlength; i++)
                {
                    randomString += letters[randomcode.Next(0, 35)].ToString();
                }
                return randomString;
            }
            catch
            {
                goto retry;
            }
        }



        private string randomStringNumeric(int randomlength)
        {
            retry:;
            try
            {
                string randomString = "";
                char[] letters = "0123456789".ToCharArray();
                Random randomcode = new Random();
                for (int i = 0; i < randomlength; i++)
                {
                    randomString += letters[randomcode.Next(0, 9)].ToString();
                }
                return randomString;
            }
            catch
            {
                goto retry;
            }
        }

        static void Generatekeys(string pubKeyFileName, string priKeyFileName)
        {
            using (var rsa = new RSACryptoServiceProvider(2048))
            {
                rsa.PersistKeyInCsp = false;
                string pubKeyString = rsa.ToXmlString(false);
                File.WriteAllText(pubKeyFileName, pubKeyString);
                string priKeyString = rsa.ToXmlString(true);
                File.WriteAllText(priKeyFileName, priKeyString);
            }
        }



        static byte[] Encrypt(string publicKey, byte[] input)
        {
            //byte[] input1 = Encoding.UTF8.GetBytes(input);
            byte[] encrypted;
            using (var rsa = new RSACryptoServiceProvider(4096))
            {
                rsa.PersistKeyInCsp = false;
                rsa.FromXmlString(publicKey);
                encrypted = rsa.Encrypt(input, true);
            }
            return encrypted;
        }

        static byte[] Decrypt(string privateKey, byte[] input)
        {
            byte[] decrypted;
            using (var rsa = new RSACryptoServiceProvider(4096))
            {
                rsa.PersistKeyInCsp = false;
                rsa.FromXmlString(privateKey);
                decrypted = rsa.Decrypt(input, true);
            }
            return decrypted;
        }

        private byte[] EncryptByteArray(byte[] unEncryptedBytes, string key)
        {
            try
            {
                //enc
                byte[] dectext = unEncryptedBytes;
                using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())
                {
                    byte[] keys = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                    using (TripleDESCryptoServiceProvider tripDes = new TripleDESCryptoServiceProvider() { Key = keys, Mode = CipherMode.ECB, Padding = PaddingMode.PKCS7 })
                    {
                        ICryptoTransform transform = tripDes.CreateEncryptor();
                        byte[] results = transform.TransformFinalBlock(dectext, 0, dectext.Length);
                        return results;
                    }
                }
            }
            catch
            {
                return null;
            }
        }

        private byte[] DecryptByteArray(byte[] EncryptedBytes, string key)
        {
            try
            {
                byte[] enctext = EncryptedBytes;
                using (MD5CryptoServiceProvider md5 = new MD5CryptoServiceProvider())
                {
                    byte[] keys = md5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                    using (TripleDESCryptoServiceProvider tripDes = new TripleDESCryptoServiceProvider() { Key = keys, Mode = CipherMode.ECB, Padding = PaddingMode.PKCS7 })
                    {
                        ICryptoTransform transform = tripDes.CreateDecryptor();
                        byte[] results = transform.TransformFinalBlock(enctext, 0, enctext.Length);
                        return results;
                    }
                }
            }
            catch
            {
                return null;
            }
        }

        private byte[] convertlisttobyte(object list)
        {
            var binFormatter = new BinaryFormatter();
            var mStream = new MemoryStream();
            binFormatter.Serialize(mStream, list);

            return mStream.ToArray();
        }

        private object convertbytetolist(byte[] bytelist)
        {
            var mStream = new MemoryStream();
            var binFormatter = new BinaryFormatter();
            // Where 'objectBytes' is your byte array.
            mStream.Write(bytelist, 0, bytelist.Length);
            mStream.Position = 0;
            return binFormatter.Deserialize(mStream) as object;
        }





    }
}